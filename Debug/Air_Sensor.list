
Air_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f2c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08002fe4  08002fe4  00012fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031a8  080031a8  000131b0  2**0
                  CONTENTS
  4 .ARM          00000000  080031a8  080031a8  000131b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031a8  080031b0  000131b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031a8  080031a8  000131a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031ac  080031ac  000131ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000131b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  20000000  080031b0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  080031b0  0002067c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000131b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000131d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001ec3  00000000  00000000  0001321b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b3f  00000000  00000000  000150de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004b0  00000000  00000000  00015c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000036b  00000000  00000000  000160d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000191b  00000000  00000000  0001643b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003dde  00000000  00000000  00017d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000066fa  00000000  00000000  0001bb34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000e5c  00000000  00000000  00022230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0002308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000000 	.word	0x20000000
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002fcc 	.word	0x08002fcc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000004 	.word	0x20000004
 80000fc:	08002fcc 	.word	0x08002fcc

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <AM2302_Request_Data>:

/*
 * The GPIO port is setup as output drain initially and has the output set as
 * 1 which leaves the port in Hi-Z, wire = VDD (set high).
 */
uint8_t AM2302_Request_Data(uint16_t *pRH_data, uint16_t *pTemperature_data){
 8000218:	b5b0      	push	{r4, r5, r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	uint8_t Check_sum = 0;
 8000222:	2317      	movs	r3, #23
 8000224:	18fb      	adds	r3, r7, r3
 8000226:	2200      	movs	r2, #0
 8000228:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0; //Cycle tracker
 800022a:	2416      	movs	r4, #22
 800022c:	193b      	adds	r3, r7, r4
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]
	uint8_t sampling_counter = 0;
 8000232:	2315      	movs	r3, #21
 8000234:	18fb      	adds	r3, r7, r3
 8000236:	2200      	movs	r2, #0
 8000238:	701a      	strb	r2, [r3, #0]
	– Push-pull mode: A “0” in the Output register activates the N-MOS whereas a “1” in
	the Output register activates the P-MOS
	*/

	//Initialize port
	GPIOA_MODER &= ~(0x3 << 0); //Reset for PA0
 800023a:	23a0      	movs	r3, #160	; 0xa0
 800023c:	05db      	lsls	r3, r3, #23
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	23a0      	movs	r3, #160	; 0xa0
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	2103      	movs	r1, #3
 8000246:	438a      	bics	r2, r1
 8000248:	601a      	str	r2, [r3, #0]
	GPIOA_MODER |= (0x1 << 0); //01: General purpose output mode for PA0
 800024a:	23a0      	movs	r3, #160	; 0xa0
 800024c:	05db      	lsls	r3, r3, #23
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	23a0      	movs	r3, #160	; 0xa0
 8000252:	05db      	lsls	r3, r3, #23
 8000254:	2101      	movs	r1, #1
 8000256:	430a      	orrs	r2, r1
 8000258:	601a      	str	r2, [r3, #0]
	GPIOA_ODR |= (1 << 0); //Set PA0 output to 1 leaves the port in Hi-Z, wire = VDD
 800025a:	4b99      	ldr	r3, [pc, #612]	; (80004c0 <AM2302_Request_Data+0x2a8>)
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	4b98      	ldr	r3, [pc, #608]	; (80004c0 <AM2302_Request_Data+0x2a8>)
 8000260:	2101      	movs	r1, #1
 8000262:	430a      	orrs	r2, r1
 8000264:	601a      	str	r2, [r3, #0]

	//Step 1: MCU send out start signal to AM2302 and AM2302 send response signal to MCU

	pause_us(5); //100 = 10ms
 8000266:	2005      	movs	r0, #5
 8000268:	f000 f932 	bl	80004d0 <pause_us>
	GPIOA_ODR &= ~(1 << 0); //Set PA0 output to 0 activates the N-MOS
 800026c:	4b94      	ldr	r3, [pc, #592]	; (80004c0 <AM2302_Request_Data+0x2a8>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	4b93      	ldr	r3, [pc, #588]	; (80004c0 <AM2302_Request_Data+0x2a8>)
 8000272:	2101      	movs	r1, #1
 8000274:	438a      	bics	r2, r1
 8000276:	601a      	str	r2, [r3, #0]
	pause_us(2000); //10 = 1ms (Host pulls low for a minimum of 1ms) 30
 8000278:	23fa      	movs	r3, #250	; 0xfa
 800027a:	00db      	lsls	r3, r3, #3
 800027c:	0018      	movs	r0, r3
 800027e:	f000 f927 	bl	80004d0 <pause_us>
	GPIOA_ODR |= (1 << 0); //Set PA0 output to 1 leaves the port in Hi-Z, wire = VDD
 8000282:	4b8f      	ldr	r3, [pc, #572]	; (80004c0 <AM2302_Request_Data+0x2a8>)
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	4b8e      	ldr	r3, [pc, #568]	; (80004c0 <AM2302_Request_Data+0x2a8>)
 8000288:	2101      	movs	r1, #1
 800028a:	430a      	orrs	r2, r1
 800028c:	601a      	str	r2, [r3, #0]
	*/

	//Step 2: AM2302 send data to MCU

	//Detects data from the AM2302/DHT22 sensor
	GPIOA_MODER &= ~(0x3 << 0); //00: Input mode for PA0
 800028e:	23a0      	movs	r3, #160	; 0xa0
 8000290:	05db      	lsls	r3, r3, #23
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	23a0      	movs	r3, #160	; 0xa0
 8000296:	05db      	lsls	r3, r3, #23
 8000298:	2103      	movs	r1, #3
 800029a:	438a      	bics	r2, r1
 800029c:	601a      	str	r2, [r3, #0]
	for(i=0;i<42;i++){
 800029e:	193b      	adds	r3, r7, r4
 80002a0:	2200      	movs	r2, #0
 80002a2:	701a      	strb	r2, [r3, #0]
 80002a4:	e03d      	b.n	8000322 <AM2302_Request_Data+0x10a>
		//Tracks the length of time when the signal is set
		sampling_counter=0;
 80002a6:	2315      	movs	r3, #21
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2200      	movs	r2, #0
 80002ac:	701a      	strb	r2, [r3, #0]
		while((GPIOA_IDR & (0x01<<0))==1 && sampling_counter<AM2302_TIMEOUT){
 80002ae:	e005      	b.n	80002bc <AM2302_Request_Data+0xa4>
			//wait
			sampling_counter++;
 80002b0:	2115      	movs	r1, #21
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	781a      	ldrb	r2, [r3, #0]
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	3201      	adds	r2, #1
 80002ba:	701a      	strb	r2, [r3, #0]
		while((GPIOA_IDR & (0x01<<0))==1 && sampling_counter<AM2302_TIMEOUT){
 80002bc:	4b81      	ldr	r3, [pc, #516]	; (80004c4 <AM2302_Request_Data+0x2ac>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2201      	movs	r2, #1
 80002c2:	4013      	ands	r3, r2
 80002c4:	d004      	beq.n	80002d0 <AM2302_Request_Data+0xb8>
 80002c6:	2315      	movs	r3, #21
 80002c8:	18fb      	adds	r3, r7, r3
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2bc7      	cmp	r3, #199	; 0xc7
 80002ce:	d9ef      	bls.n	80002b0 <AM2302_Request_Data+0x98>
		}
		data[i]=sampling_counter;
 80002d0:	2316      	movs	r3, #22
 80002d2:	18fb      	adds	r3, r7, r3
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	4a7c      	ldr	r2, [pc, #496]	; (80004c8 <AM2302_Request_Data+0x2b0>)
 80002d8:	2015      	movs	r0, #21
 80002da:	1839      	adds	r1, r7, r0
 80002dc:	7809      	ldrb	r1, [r1, #0]
 80002de:	54d1      	strb	r1, [r2, r3]

		//Waits while the signal is low
		sampling_counter=0;
 80002e0:	183b      	adds	r3, r7, r0
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
		while((GPIOA_IDR & (0x01<<0))==0 && sampling_counter<AM2302_TIMEOUT){
 80002e6:	e005      	b.n	80002f4 <AM2302_Request_Data+0xdc>
			//wait
			sampling_counter++;
 80002e8:	2115      	movs	r1, #21
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	781a      	ldrb	r2, [r3, #0]
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	3201      	adds	r2, #1
 80002f2:	701a      	strb	r2, [r3, #0]
		while((GPIOA_IDR & (0x01<<0))==0 && sampling_counter<AM2302_TIMEOUT){
 80002f4:	4b73      	ldr	r3, [pc, #460]	; (80004c4 <AM2302_Request_Data+0x2ac>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2201      	movs	r2, #1
 80002fa:	4013      	ands	r3, r2
 80002fc:	d104      	bne.n	8000308 <AM2302_Request_Data+0xf0>
 80002fe:	2315      	movs	r3, #21
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2bc7      	cmp	r3, #199	; 0xc7
 8000306:	d9ef      	bls.n	80002e8 <AM2302_Request_Data+0xd0>
		}
		data_low[i]=sampling_counter;
 8000308:	2016      	movs	r0, #22
 800030a:	183b      	adds	r3, r7, r0
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	4a6f      	ldr	r2, [pc, #444]	; (80004cc <AM2302_Request_Data+0x2b4>)
 8000310:	2115      	movs	r1, #21
 8000312:	1879      	adds	r1, r7, r1
 8000314:	7809      	ldrb	r1, [r1, #0]
 8000316:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<42;i++){
 8000318:	183b      	adds	r3, r7, r0
 800031a:	781a      	ldrb	r2, [r3, #0]
 800031c:	183b      	adds	r3, r7, r0
 800031e:	3201      	adds	r2, #1
 8000320:	701a      	strb	r2, [r3, #0]
 8000322:	2116      	movs	r1, #22
 8000324:	187b      	adds	r3, r7, r1
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b29      	cmp	r3, #41	; 0x29
 800032a:	d9bc      	bls.n	80002a6 <AM2302_Request_Data+0x8e>
	}

	//Step 3: Process the data
	uint8_t j = 0; //Data array tracker
 800032c:	2314      	movs	r3, #20
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	2200      	movs	r2, #0
 8000332:	701a      	strb	r2, [r3, #0]
	for(i=0;i<40;i++){
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2200      	movs	r2, #0
 8000338:	701a      	strb	r2, [r3, #0]
 800033a:	e084      	b.n	8000446 <AM2302_Request_Data+0x22e>
		j=i+2;
 800033c:	2114      	movs	r1, #20
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2016      	movs	r0, #22
 8000342:	183a      	adds	r2, r7, r0
 8000344:	7812      	ldrb	r2, [r2, #0]
 8000346:	3202      	adds	r2, #2
 8000348:	701a      	strb	r2, [r3, #0]
		if(i<16){
 800034a:	183b      	adds	r3, r7, r0
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b0f      	cmp	r3, #15
 8000350:	d822      	bhi.n	8000398 <AM2302_Request_Data+0x180>
			*pRH_data <<= 1; //x <<= 2; equivalent to x = x << 2;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	881b      	ldrh	r3, [r3, #0]
 8000356:	18db      	adds	r3, r3, r3
 8000358:	b29a      	uxth	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	801a      	strh	r2, [r3, #0]
			if (data[j]>=AM2302_TIME_DATA0 && data[j]<AM2302_TIMEOUT)
 800035e:	187b      	adds	r3, r7, r1
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	4a59      	ldr	r2, [pc, #356]	; (80004c8 <AM2302_Request_Data+0x2b0>)
 8000364:	5cd3      	ldrb	r3, [r2, r3]
 8000366:	2b27      	cmp	r3, #39	; 0x27
 8000368:	d90d      	bls.n	8000386 <AM2302_Request_Data+0x16e>
 800036a:	187b      	adds	r3, r7, r1
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	4a56      	ldr	r2, [pc, #344]	; (80004c8 <AM2302_Request_Data+0x2b0>)
 8000370:	5cd3      	ldrb	r3, [r2, r3]
 8000372:	2bc7      	cmp	r3, #199	; 0xc7
 8000374:	d807      	bhi.n	8000386 <AM2302_Request_Data+0x16e>
				*pRH_data |= 0x01;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	881b      	ldrh	r3, [r3, #0]
 800037a:	2201      	movs	r2, #1
 800037c:	4313      	orrs	r3, r2
 800037e:	b29a      	uxth	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	801a      	strh	r2, [r3, #0]
 8000384:	e059      	b.n	800043a <AM2302_Request_Data+0x222>
			else if (data[j]>=AM2302_TIMEOUT)
 8000386:	2314      	movs	r3, #20
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	4a4e      	ldr	r2, [pc, #312]	; (80004c8 <AM2302_Request_Data+0x2b0>)
 800038e:	5cd3      	ldrb	r3, [r2, r3]
 8000390:	2bc7      	cmp	r3, #199	; 0xc7
 8000392:	d952      	bls.n	800043a <AM2302_Request_Data+0x222>
				return 1; //The counter timed out
 8000394:	2301      	movs	r3, #1
 8000396:	e08e      	b.n	80004b6 <AM2302_Request_Data+0x29e>
		} else if (i>=16 && i<32){
 8000398:	2216      	movs	r2, #22
 800039a:	18bb      	adds	r3, r7, r2
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b0f      	cmp	r3, #15
 80003a0:	d927      	bls.n	80003f2 <AM2302_Request_Data+0x1da>
 80003a2:	18bb      	adds	r3, r7, r2
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b1f      	cmp	r3, #31
 80003a8:	d823      	bhi.n	80003f2 <AM2302_Request_Data+0x1da>
			*pTemperature_data <<= 1;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	18db      	adds	r3, r3, r3
 80003b0:	b29a      	uxth	r2, r3
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	801a      	strh	r2, [r3, #0]
			if (data[j]>=AM2302_TIME_DATA0 && data[j]<AM2302_TIMEOUT)
 80003b6:	2114      	movs	r1, #20
 80003b8:	187b      	adds	r3, r7, r1
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4a42      	ldr	r2, [pc, #264]	; (80004c8 <AM2302_Request_Data+0x2b0>)
 80003be:	5cd3      	ldrb	r3, [r2, r3]
 80003c0:	2b27      	cmp	r3, #39	; 0x27
 80003c2:	d90d      	bls.n	80003e0 <AM2302_Request_Data+0x1c8>
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	4a3f      	ldr	r2, [pc, #252]	; (80004c8 <AM2302_Request_Data+0x2b0>)
 80003ca:	5cd3      	ldrb	r3, [r2, r3]
 80003cc:	2bc7      	cmp	r3, #199	; 0xc7
 80003ce:	d807      	bhi.n	80003e0 <AM2302_Request_Data+0x1c8>
				*pTemperature_data |= 0x01;
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	881b      	ldrh	r3, [r3, #0]
 80003d4:	2201      	movs	r2, #1
 80003d6:	4313      	orrs	r3, r2
 80003d8:	b29a      	uxth	r2, r3
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	801a      	strh	r2, [r3, #0]
			if (data[j]>=AM2302_TIME_DATA0 && data[j]<AM2302_TIMEOUT)
 80003de:	e02b      	b.n	8000438 <AM2302_Request_Data+0x220>
			else if (data[j]>=AM2302_TIMEOUT)
 80003e0:	2314      	movs	r3, #20
 80003e2:	18fb      	adds	r3, r7, r3
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	4a38      	ldr	r2, [pc, #224]	; (80004c8 <AM2302_Request_Data+0x2b0>)
 80003e8:	5cd3      	ldrb	r3, [r2, r3]
 80003ea:	2bc7      	cmp	r3, #199	; 0xc7
 80003ec:	d924      	bls.n	8000438 <AM2302_Request_Data+0x220>
				return 1; //The counter timed out
 80003ee:	2301      	movs	r3, #1
 80003f0:	e061      	b.n	80004b6 <AM2302_Request_Data+0x29e>
		} else {
			Check_sum <<= 1;
 80003f2:	2117      	movs	r1, #23
 80003f4:	187a      	adds	r2, r7, r1
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	18db      	adds	r3, r3, r3
 80003fc:	7013      	strb	r3, [r2, #0]
			if (data[j]>=AM2302_TIME_DATA0 && data[j]<AM2302_TIMEOUT)
 80003fe:	2014      	movs	r0, #20
 8000400:	183b      	adds	r3, r7, r0
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	4a30      	ldr	r2, [pc, #192]	; (80004c8 <AM2302_Request_Data+0x2b0>)
 8000406:	5cd3      	ldrb	r3, [r2, r3]
 8000408:	2b27      	cmp	r3, #39	; 0x27
 800040a:	d90c      	bls.n	8000426 <AM2302_Request_Data+0x20e>
 800040c:	183b      	adds	r3, r7, r0
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	4a2d      	ldr	r2, [pc, #180]	; (80004c8 <AM2302_Request_Data+0x2b0>)
 8000412:	5cd3      	ldrb	r3, [r2, r3]
 8000414:	2bc7      	cmp	r3, #199	; 0xc7
 8000416:	d806      	bhi.n	8000426 <AM2302_Request_Data+0x20e>
				Check_sum |= 0x01;
 8000418:	187b      	adds	r3, r7, r1
 800041a:	187a      	adds	r2, r7, r1
 800041c:	7812      	ldrb	r2, [r2, #0]
 800041e:	2101      	movs	r1, #1
 8000420:	430a      	orrs	r2, r1
 8000422:	701a      	strb	r2, [r3, #0]
 8000424:	e009      	b.n	800043a <AM2302_Request_Data+0x222>
			else if (data[j]>=AM2302_TIMEOUT)
 8000426:	2314      	movs	r3, #20
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	4a26      	ldr	r2, [pc, #152]	; (80004c8 <AM2302_Request_Data+0x2b0>)
 800042e:	5cd3      	ldrb	r3, [r2, r3]
 8000430:	2bc7      	cmp	r3, #199	; 0xc7
 8000432:	d902      	bls.n	800043a <AM2302_Request_Data+0x222>
				return 1; //The counter timed out
 8000434:	2301      	movs	r3, #1
 8000436:	e03e      	b.n	80004b6 <AM2302_Request_Data+0x29e>
			if (data[j]>=AM2302_TIME_DATA0 && data[j]<AM2302_TIMEOUT)
 8000438:	46c0      	nop			; (mov r8, r8)
	for(i=0;i<40;i++){
 800043a:	2116      	movs	r1, #22
 800043c:	187b      	adds	r3, r7, r1
 800043e:	781a      	ldrb	r2, [r3, #0]
 8000440:	187b      	adds	r3, r7, r1
 8000442:	3201      	adds	r2, #1
 8000444:	701a      	strb	r2, [r3, #0]
 8000446:	2316      	movs	r3, #22
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b27      	cmp	r3, #39	; 0x27
 800044e:	d800      	bhi.n	8000452 <AM2302_Request_Data+0x23a>
 8000450:	e774      	b.n	800033c <AM2302_Request_Data+0x124>
		}
	}

	//Step 4: Check sum
	uint8_t a = (uint8_t)(*pRH_data>>8);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	881b      	ldrh	r3, [r3, #0]
 8000456:	0a1b      	lsrs	r3, r3, #8
 8000458:	b29a      	uxth	r2, r3
 800045a:	2113      	movs	r1, #19
 800045c:	187b      	adds	r3, r7, r1
 800045e:	701a      	strb	r2, [r3, #0]
	uint8_t b = (uint8_t)(*pRH_data);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	881a      	ldrh	r2, [r3, #0]
 8000464:	2012      	movs	r0, #18
 8000466:	183b      	adds	r3, r7, r0
 8000468:	701a      	strb	r2, [r3, #0]
	uint8_t c = (uint8_t)(*pTemperature_data>>8);
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	881b      	ldrh	r3, [r3, #0]
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	b29a      	uxth	r2, r3
 8000472:	2411      	movs	r4, #17
 8000474:	193b      	adds	r3, r7, r4
 8000476:	701a      	strb	r2, [r3, #0]
	uint8_t d = (uint8_t)(*pTemperature_data);
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	881a      	ldrh	r2, [r3, #0]
 800047c:	2510      	movs	r5, #16
 800047e:	197b      	adds	r3, r7, r5
 8000480:	701a      	strb	r2, [r3, #0]
	uint8_t e = a+b+c+d;
 8000482:	187a      	adds	r2, r7, r1
 8000484:	183b      	adds	r3, r7, r0
 8000486:	7812      	ldrb	r2, [r2, #0]
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	18d3      	adds	r3, r2, r3
 800048c:	b2da      	uxtb	r2, r3
 800048e:	193b      	adds	r3, r7, r4
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	18d3      	adds	r3, r2, r3
 8000494:	b2d9      	uxtb	r1, r3
 8000496:	200f      	movs	r0, #15
 8000498:	183b      	adds	r3, r7, r0
 800049a:	197a      	adds	r2, r7, r5
 800049c:	7812      	ldrb	r2, [r2, #0]
 800049e:	188a      	adds	r2, r1, r2
 80004a0:	701a      	strb	r2, [r3, #0]
	if (e==Check_sum)
 80004a2:	183a      	adds	r2, r7, r0
 80004a4:	2317      	movs	r3, #23
 80004a6:	18fb      	adds	r3, r7, r3
 80004a8:	7812      	ldrb	r2, [r2, #0]
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d101      	bne.n	80004b4 <AM2302_Request_Data+0x29c>
		return 0; //Transfer successful
 80004b0:	2300      	movs	r3, #0
 80004b2:	e000      	b.n	80004b6 <AM2302_Request_Data+0x29e>
	else
		return 2; //Check_sum failed
 80004b4:	2302      	movs	r3, #2
}
 80004b6:	0018      	movs	r0, r3
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b006      	add	sp, #24
 80004bc:	bdb0      	pop	{r4, r5, r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	50000014 	.word	0x50000014
 80004c4:	50000010 	.word	0x50000010
 80004c8:	2000001c 	.word	0x2000001c
 80004cc:	20000048 	.word	0x20000048

080004d0 <pause_us>:

void pause_us(uint32_t n){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	//For 16Mhz clock speed 10 count = 1ms
	uint32_t i = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	60fb      	str	r3, [r7, #12]
	uint32_t j = n;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < (j); i++);
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	e002      	b.n	80004ec <pause_us+0x1c>
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	3301      	adds	r3, #1
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fa      	ldr	r2, [r7, #12]
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d3f8      	bcc.n	80004e6 <pause_us+0x16>
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b004      	add	sp, #16
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <intialize_Clock_HSI16>:
#include <stdint.h>
#include "Clocks.h"

void intialize_Clock_HSI16(){
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	//Set Clock Registers
	RCC_CR |= (1 << 0); //HSI16 Oscillator is ON
 8000504:	4b04      	ldr	r3, [pc, #16]	; (8000518 <intialize_Clock_HSI16+0x18>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <intialize_Clock_HSI16+0x18>)
 800050a:	2101      	movs	r1, #1
 800050c:	430a      	orrs	r2, r1
 800050e:	601a      	str	r2, [r3, #0]
}
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	40021000 	.word	0x40021000

0800051c <set_system_clock>:

void set_system_clock(){
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	RCC_CFGR |= (0x01 << 0); //01: HSI16 oscillator used as system clock
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <set_system_clock+0x18>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <set_system_clock+0x18>)
 8000526:	2101      	movs	r1, #1
 8000528:	430a      	orrs	r2, r1
 800052a:	601a      	str	r2, [r3, #0]
}
 800052c:	46c0      	nop			; (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	4002100c 	.word	0x4002100c

08000538 <initialize_I2C1_Clock>:

void initialize_I2C1_Clock(){
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	RCC_CCIPR &= ~(1 << 12); // Set Clock for I2C1 10:HSI16 Clock 16MHz
 800053c:	4b0b      	ldr	r3, [pc, #44]	; (800056c <initialize_I2C1_Clock+0x34>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <initialize_I2C1_Clock+0x34>)
 8000542:	490b      	ldr	r1, [pc, #44]	; (8000570 <initialize_I2C1_Clock+0x38>)
 8000544:	400a      	ands	r2, r1
 8000546:	601a      	str	r2, [r3, #0]
	RCC_CCIPR |= (1 << 13);
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <initialize_I2C1_Clock+0x34>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <initialize_I2C1_Clock+0x34>)
 800054e:	2180      	movs	r1, #128	; 0x80
 8000550:	0189      	lsls	r1, r1, #6
 8000552:	430a      	orrs	r2, r1
 8000554:	601a      	str	r2, [r3, #0]
	RCC_APB1ENR |= (1 << 21); // Enable clock for I2C1EN
 8000556:	4b07      	ldr	r3, [pc, #28]	; (8000574 <initialize_I2C1_Clock+0x3c>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <initialize_I2C1_Clock+0x3c>)
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	0389      	lsls	r1, r1, #14
 8000560:	430a      	orrs	r2, r1
 8000562:	601a      	str	r2, [r3, #0]
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	4002104c 	.word	0x4002104c
 8000570:	ffffefff 	.word	0xffffefff
 8000574:	40021038 	.word	0x40021038

08000578 <initialize_GPIOA_Clock>:

void initialize_GPIOA_Clock(){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	//Set clock for GPIOA
	RCC_IOPENR |= (1 << 0); //Set bit 1 to 1 PA - Enable clock for port A
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <initialize_GPIOA_Clock+0x18>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <initialize_GPIOA_Clock+0x18>)
 8000582:	2101      	movs	r1, #1
 8000584:	430a      	orrs	r2, r1
 8000586:	601a      	str	r2, [r3, #0]
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	4002102c 	.word	0x4002102c

08000594 <initialize_GPIOB_Clock>:

void initialize_GPIOB_Clock(){
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	//Set clock for GPIOB
	RCC_IOPENR |= (1 << 1); // Enable clock for port B
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <initialize_GPIOB_Clock+0x18>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <initialize_GPIOB_Clock+0x18>)
 800059e:	2102      	movs	r1, #2
 80005a0:	430a      	orrs	r2, r1
 80005a2:	601a      	str	r2, [r3, #0]
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	4002102c 	.word	0x4002102c

080005b0 <initialize_LSE_Clock>:

void initialize_LSE_Clock(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	//All steps required
	RCC_APB1ENR |= BIT28; //PWREN: Power interface clock enable bit, 1: Power interface clock enabled
 80005b4:	4b19      	ldr	r3, [pc, #100]	; (800061c <initialize_LSE_Clock+0x6c>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <initialize_LSE_Clock+0x6c>)
 80005ba:	2180      	movs	r1, #128	; 0x80
 80005bc:	0549      	lsls	r1, r1, #21
 80005be:	430a      	orrs	r2, r1
 80005c0:	601a      	str	r2, [r3, #0]
	PWR_CR |= (1 << 8); //DBP: Disable backup write protection
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <initialize_LSE_Clock+0x70>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <initialize_LSE_Clock+0x70>)
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	0049      	lsls	r1, r1, #1
 80005cc:	430a      	orrs	r2, r1
 80005ce:	601a      	str	r2, [r3, #0]
	RCC_CSR |= BIT19; //Bit 19 RTCRST: RTC software reset bit, 1: Resets the RTC peripheral, its clock source selection and the backup registers.
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <initialize_LSE_Clock+0x74>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <initialize_LSE_Clock+0x74>)
 80005d6:	2180      	movs	r1, #128	; 0x80
 80005d8:	0309      	lsls	r1, r1, #12
 80005da:	430a      	orrs	r2, r1
 80005dc:	601a      	str	r2, [r3, #0]
	RCC_CSR &= ~BIT19;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <initialize_LSE_Clock+0x74>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <initialize_LSE_Clock+0x74>)
 80005e4:	4910      	ldr	r1, [pc, #64]	; (8000628 <initialize_LSE_Clock+0x78>)
 80005e6:	400a      	ands	r2, r1
 80005e8:	601a      	str	r2, [r3, #0]
	RCC_CSR |= (0x03 << 11); //LSEDRV; LSE oscillator Driving capability bits, 11: Highest drive
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <initialize_LSE_Clock+0x74>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <initialize_LSE_Clock+0x74>)
 80005f0:	21c0      	movs	r1, #192	; 0xc0
 80005f2:	0149      	lsls	r1, r1, #5
 80005f4:	430a      	orrs	r2, r1
 80005f6:	601a      	str	r2, [r3, #0]
	RCC_CSR |= BIT8; //LSEON: External low-speed oscillator enable bit, 1:LSE oscillator ON
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <initialize_LSE_Clock+0x74>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <initialize_LSE_Clock+0x74>)
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	0049      	lsls	r1, r1, #1
 8000602:	430a      	orrs	r2, r1
 8000604:	601a      	str	r2, [r3, #0]
	while ((RCC_CSR & BIT9)==0){
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <initialize_LSE_Clock+0x74>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	4013      	ands	r3, r2
 8000612:	d0f9      	beq.n	8000608 <initialize_LSE_Clock+0x58>
		//LSERDY: External low-speed oscillator ready bit, 1: External 32 kHz oscillator ready
	}
}
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021038 	.word	0x40021038
 8000620:	40007000 	.word	0x40007000
 8000624:	40021050 	.word	0x40021050
 8000628:	fff7ffff 	.word	0xfff7ffff

0800062c <initialize_LPTIM1_Clock>:
	while ((RCC_CSR & BIT1)==0){
		//Bit 1 LSIRDY: Internal low-speed oscillator ready bit, 1: LSI oscillator ready
	}
}

void initialize_LPTIM1_Clock(){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	//Set clock for LPTIM at 32000 Hz
	RCC_APB1ENR |= (1 << 31); //LPTIM1EN: Low-power timer clock enable bit
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <initialize_LPTIM1_Clock+0x28>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <initialize_LPTIM1_Clock+0x28>)
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	0609      	lsls	r1, r1, #24
 800063a:	430a      	orrs	r2, r1
 800063c:	601a      	str	r2, [r3, #0]
	RCC_CCIPR |= (0x03 << 18); //Bits 19:18 LPTIM1SEL: Low-power Timer clock source selection bits, 11: LSE clock selected as LP Timer clock
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <initialize_LPTIM1_Clock+0x2c>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <initialize_LPTIM1_Clock+0x2c>)
 8000644:	21c0      	movs	r1, #192	; 0xc0
 8000646:	0309      	lsls	r1, r1, #12
 8000648:	430a      	orrs	r2, r1
 800064a:	601a      	str	r2, [r3, #0]
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	40021038 	.word	0x40021038
 8000658:	4002104c 	.word	0x4002104c

0800065c <initialize_DMA_Clock>:

void initialize_DMA_Clock(){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	RCC_AHBENR |= (1 << 0); //DMA clock enable bit
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <initialize_DMA_Clock+0x18>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <initialize_DMA_Clock+0x18>)
 8000666:	2101      	movs	r1, #1
 8000668:	430a      	orrs	r2, r1
 800066a:	601a      	str	r2, [r3, #0]
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40021030 	.word	0x40021030

08000678 <initialize_USART2_Clock>:

void initialize_USART2_Clock(){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	RCC_APB1ENR |= (1 << 17); // Bit 17 USART2EN: USART2 clock enable bit
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <initialize_USART2_Clock+0x24>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <initialize_USART2_Clock+0x24>)
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	0289      	lsls	r1, r1, #10
 8000686:	430a      	orrs	r2, r1
 8000688:	601a      	str	r2, [r3, #0]
	RCC_CCIPR |= (0x2 << 2); // USART2SEL: USART2 clock source selection bits 10: HSI16 clock selected as USART2 clock
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <initialize_USART2_Clock+0x28>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <initialize_USART2_Clock+0x28>)
 8000690:	2108      	movs	r1, #8
 8000692:	430a      	orrs	r2, r1
 8000694:	601a      	str	r2, [r3, #0]
}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021038 	.word	0x40021038
 80006a0:	4002104c 	.word	0x4002104c

080006a4 <initialize_GPIOA_OD_PU>:
	initialize_GPIOA_GPO_PP(CLKportNumber); //PA4
	initialize_GPIOA_OD_PU(DIOportNumber); //PA3
}

//GPIO Open Drain, Pull-Up
void initialize_GPIOA_OD_PU(uint8_t portNumber){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	0002      	movs	r2, r0
 80006ac:	1dfb      	adds	r3, r7, #7
 80006ae:	701a      	strb	r2, [r3, #0]
 	// Port A
 	GPIOA_MODER &= ~(0x03 << (portNumber*2));   // Reset MODER
 80006b0:	23a0      	movs	r3, #160	; 0xa0
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	2103      	movs	r1, #3
 80006be:	4099      	lsls	r1, r3
 80006c0:	000b      	movs	r3, r1
 80006c2:	43db      	mvns	r3, r3
 80006c4:	0019      	movs	r1, r3
 80006c6:	23a0      	movs	r3, #160	; 0xa0
 80006c8:	05db      	lsls	r3, r3, #23
 80006ca:	400a      	ands	r2, r1
 80006cc:	601a      	str	r2, [r3, #0]
	GPIOA_MODER |= (0x01 << (portNumber*2));   // 01: General purpose output mode
 80006ce:	23a0      	movs	r3, #160	; 0xa0
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	1dfb      	adds	r3, r7, #7
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	2101      	movs	r1, #1
 80006dc:	4099      	lsls	r1, r3
 80006de:	000b      	movs	r3, r1
 80006e0:	0019      	movs	r1, r3
 80006e2:	23a0      	movs	r3, #160	; 0xa0
 80006e4:	05db      	lsls	r3, r3, #23
 80006e6:	430a      	orrs	r2, r1
 80006e8:	601a      	str	r2, [r3, #0]
 	GPIOA_OSPEEDR &= ~(0x3 << (portNumber*2)); // Reset OSPEEDR
 80006ea:	4b20      	ldr	r3, [pc, #128]	; (800076c <initialize_GPIOA_OD_PU+0xc8>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	1dfb      	adds	r3, r7, #7
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	2103      	movs	r1, #3
 80006f6:	4099      	lsls	r1, r3
 80006f8:	000b      	movs	r3, r1
 80006fa:	43db      	mvns	r3, r3
 80006fc:	0019      	movs	r1, r3
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <initialize_GPIOA_OD_PU+0xc8>)
 8000700:	400a      	ands	r2, r1
 8000702:	601a      	str	r2, [r3, #0]
 	GPIOA_OSPEEDR |= (0x02 << (portNumber*2));  // 10: High-speed mode
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <initialize_GPIOA_OD_PU+0xc8>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	2102      	movs	r1, #2
 8000710:	4099      	lsls	r1, r3
 8000712:	000b      	movs	r3, r1
 8000714:	0019      	movs	r1, r3
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <initialize_GPIOA_OD_PU+0xc8>)
 8000718:	430a      	orrs	r2, r1
 800071a:	601a      	str	r2, [r3, #0]
 	GPIOA_OTYPER |= (1 << portNumber);         // 1: Output open-drain
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <initialize_GPIOA_OD_PU+0xcc>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	1dfb      	adds	r3, r7, #7
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2101      	movs	r1, #1
 8000726:	4099      	lsls	r1, r3
 8000728:	000b      	movs	r3, r1
 800072a:	0019      	movs	r1, r3
 800072c:	4b10      	ldr	r3, [pc, #64]	; (8000770 <initialize_GPIOA_OD_PU+0xcc>)
 800072e:	430a      	orrs	r2, r1
 8000730:	601a      	str	r2, [r3, #0]
 	GPIOA_PUPDR &= ~(0x03 << (portNumber*2));   // Reset PUPDR
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <initialize_GPIOA_OD_PU+0xd0>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	1dfb      	adds	r3, r7, #7
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	2103      	movs	r1, #3
 800073e:	4099      	lsls	r1, r3
 8000740:	000b      	movs	r3, r1
 8000742:	43db      	mvns	r3, r3
 8000744:	0019      	movs	r1, r3
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <initialize_GPIOA_OD_PU+0xd0>)
 8000748:	400a      	ands	r2, r1
 800074a:	601a      	str	r2, [r3, #0]
 	GPIOA_PUPDR |= (0x01 << (portNumber*2));    // 01: Pull-up
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <initialize_GPIOA_OD_PU+0xd0>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	1dfb      	adds	r3, r7, #7
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	2101      	movs	r1, #1
 8000758:	4099      	lsls	r1, r3
 800075a:	000b      	movs	r3, r1
 800075c:	0019      	movs	r1, r3
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <initialize_GPIOA_OD_PU+0xd0>)
 8000760:	430a      	orrs	r2, r1
 8000762:	601a      	str	r2, [r3, #0]
 }
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b002      	add	sp, #8
 800076a:	bd80      	pop	{r7, pc}
 800076c:	50000008 	.word	0x50000008
 8000770:	50000004 	.word	0x50000004
 8000774:	5000000c 	.word	0x5000000c

08000778 <initialize_GPIOA_GPO_PP>:

 //General Purpose Output, Push-Pull
 void initialize_GPIOA_GPO_PP(uint8_t portNumber){
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	0002      	movs	r2, r0
 8000780:	1dfb      	adds	r3, r7, #7
 8000782:	701a      	strb	r2, [r3, #0]
 	//Set GPIO register
 	GPIOA_MODER &= ~(0x03 << (portNumber*2)); //Reset MODER
 8000784:	23a0      	movs	r3, #160	; 0xa0
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	2103      	movs	r1, #3
 8000792:	4099      	lsls	r1, r3
 8000794:	000b      	movs	r3, r1
 8000796:	43db      	mvns	r3, r3
 8000798:	0019      	movs	r1, r3
 800079a:	23a0      	movs	r3, #160	; 0xa0
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	400a      	ands	r2, r1
 80007a0:	601a      	str	r2, [r3, #0]
 	GPIOA_MODER |= (0x01 << (portNumber*2)); //01: General purpose output mode
 80007a2:	23a0      	movs	r3, #160	; 0xa0
 80007a4:	05db      	lsls	r3, r3, #23
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	1dfb      	adds	r3, r7, #7
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	2101      	movs	r1, #1
 80007b0:	4099      	lsls	r1, r3
 80007b2:	000b      	movs	r3, r1
 80007b4:	0019      	movs	r1, r3
 80007b6:	23a0      	movs	r3, #160	; 0xa0
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	430a      	orrs	r2, r1
 80007bc:	601a      	str	r2, [r3, #0]
 	GPIOA_OSPEEDR |= (0x02 << (portNumber*2)); //10: High speed mode
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <initialize_GPIOA_GPO_PP+0xb0>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	1dfb      	adds	r3, r7, #7
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	2102      	movs	r1, #2
 80007ca:	4099      	lsls	r1, r3
 80007cc:	000b      	movs	r3, r1
 80007ce:	0019      	movs	r1, r3
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <initialize_GPIOA_GPO_PP+0xb0>)
 80007d2:	430a      	orrs	r2, r1
 80007d4:	601a      	str	r2, [r3, #0]
 	GPIOA_OTYPER &= ~(1 << portNumber); //0: Output push-pull (reset state)
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <initialize_GPIOA_GPO_PP+0xb4>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2101      	movs	r1, #1
 80007e0:	4099      	lsls	r1, r3
 80007e2:	000b      	movs	r3, r1
 80007e4:	43db      	mvns	r3, r3
 80007e6:	0019      	movs	r1, r3
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <initialize_GPIOA_GPO_PP+0xb4>)
 80007ea:	400a      	ands	r2, r1
 80007ec:	601a      	str	r2, [r3, #0]
 	GPIOA_PUPDR &= ~(0x03 << (portNumber*2)); //Reset
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <initialize_GPIOA_GPO_PP+0xb8>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	2103      	movs	r1, #3
 80007fa:	4099      	lsls	r1, r3
 80007fc:	000b      	movs	r3, r1
 80007fe:	43db      	mvns	r3, r3
 8000800:	0019      	movs	r1, r3
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <initialize_GPIOA_GPO_PP+0xb8>)
 8000804:	400a      	ands	r2, r1
 8000806:	601a      	str	r2, [r3, #0]
 	GPIOA_PUPDR |= (0x02 << (portNumber*2)); //01: Pull-up
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <initialize_GPIOA_GPO_PP+0xb8>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	1dfb      	adds	r3, r7, #7
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	2102      	movs	r1, #2
 8000814:	4099      	lsls	r1, r3
 8000816:	000b      	movs	r3, r1
 8000818:	0019      	movs	r1, r3
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <initialize_GPIOA_GPO_PP+0xb8>)
 800081c:	430a      	orrs	r2, r1
 800081e:	601a      	str	r2, [r3, #0]
 }
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b002      	add	sp, #8
 8000826:	bd80      	pop	{r7, pc}
 8000828:	50000008 	.word	0x50000008
 800082c:	50000004 	.word	0x50000004
 8000830:	5000000c 	.word	0x5000000c

08000834 <initialize_GPIOA_Output>:

 void initialize_GPIOA_Output(uint8_t portNumber, uint8_t polarity){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	0002      	movs	r2, r0
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	1dbb      	adds	r3, r7, #6
 8000842:	1c0a      	adds	r2, r1, #0
 8000844:	701a      	strb	r2, [r3, #0]
	 if (polarity == 1)
 8000846:	1dbb      	adds	r3, r7, #6
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d10b      	bne.n	8000866 <initialize_GPIOA_Output+0x32>
		 GPIOA_ODR |= (1 << portNumber);
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <initialize_GPIOA_Output+0x54>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2101      	movs	r1, #1
 8000858:	4099      	lsls	r1, r3
 800085a:	000b      	movs	r3, r1
 800085c:	0019      	movs	r1, r3
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <initialize_GPIOA_Output+0x54>)
 8000860:	430a      	orrs	r2, r1
 8000862:	601a      	str	r2, [r3, #0]
	 else
		 GPIOA_ODR &= ~(1 << portNumber);
 }
 8000864:	e00b      	b.n	800087e <initialize_GPIOA_Output+0x4a>
		 GPIOA_ODR &= ~(1 << portNumber);
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <initialize_GPIOA_Output+0x54>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2101      	movs	r1, #1
 8000870:	4099      	lsls	r1, r3
 8000872:	000b      	movs	r3, r1
 8000874:	43db      	mvns	r3, r3
 8000876:	0019      	movs	r1, r3
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <initialize_GPIOA_Output+0x54>)
 800087a:	400a      	ands	r2, r1
 800087c:	601a      	str	r2, [r3, #0]
 }
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b002      	add	sp, #8
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	50000014 	.word	0x50000014

0800088c <initialize_GPIO_AM2302>:

 void initialize_GPIO_AM2302(){
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	 initialize_GPIOA_OD_PU((uint8_t)0);
 8000890:	2000      	movs	r0, #0
 8000892:	f7ff ff07 	bl	80006a4 <initialize_GPIOA_OD_PU>
	 initialize_GPIOA_Output((uint8_t)0, 1);
 8000896:	2101      	movs	r1, #1
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff ffcb 	bl	8000834 <initialize_GPIOA_Output>
 }
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <intialize_GPIO_USART2>:

 void intialize_GPIO_USART2(){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
 	// Port A PIN1 D1 PA9 USART2_TX(1), PIN2 D0 PA10 USART2_RX(1)
 	GPIOA_MODER &= ~(1 << 18); // 10: Alternate function mode for PA9 Reset value: 0xEBFF FCFF for port A
 80008a8:	23a0      	movs	r3, #160	; 0xa0
 80008aa:	05db      	lsls	r3, r3, #23
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	23a0      	movs	r3, #160	; 0xa0
 80008b0:	05db      	lsls	r3, r3, #23
 80008b2:	494b      	ldr	r1, [pc, #300]	; (80009e0 <intialize_GPIO_USART2+0x13c>)
 80008b4:	400a      	ands	r2, r1
 80008b6:	601a      	str	r2, [r3, #0]
 	GPIOA_MODER |= (1 << 19);
 80008b8:	23a0      	movs	r3, #160	; 0xa0
 80008ba:	05db      	lsls	r3, r3, #23
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	23a0      	movs	r3, #160	; 0xa0
 80008c0:	05db      	lsls	r3, r3, #23
 80008c2:	2180      	movs	r1, #128	; 0x80
 80008c4:	0309      	lsls	r1, r1, #12
 80008c6:	430a      	orrs	r2, r1
 80008c8:	601a      	str	r2, [r3, #0]
 	GPIOA_MODER &= ~(1 << 20); // 10: Alternate function mode for PA10 Reset value: 0xEBFF FCFF for port A
 80008ca:	23a0      	movs	r3, #160	; 0xa0
 80008cc:	05db      	lsls	r3, r3, #23
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	23a0      	movs	r3, #160	; 0xa0
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	4943      	ldr	r1, [pc, #268]	; (80009e4 <intialize_GPIO_USART2+0x140>)
 80008d6:	400a      	ands	r2, r1
 80008d8:	601a      	str	r2, [r3, #0]
 	GPIOA_MODER |= (1 << 21);
 80008da:	23a0      	movs	r3, #160	; 0xa0
 80008dc:	05db      	lsls	r3, r3, #23
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	23a0      	movs	r3, #160	; 0xa0
 80008e2:	05db      	lsls	r3, r3, #23
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	0389      	lsls	r1, r1, #14
 80008e8:	430a      	orrs	r2, r1
 80008ea:	601a      	str	r2, [r3, #0]
 	GPIOA_AFRH |= (0x4 << 4); // PA9 = AF4(USART2_TX) D1 0100: AF4
 80008ec:	4b3e      	ldr	r3, [pc, #248]	; (80009e8 <intialize_GPIO_USART2+0x144>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b3d      	ldr	r3, [pc, #244]	; (80009e8 <intialize_GPIO_USART2+0x144>)
 80008f2:	2140      	movs	r1, #64	; 0x40
 80008f4:	430a      	orrs	r2, r1
 80008f6:	601a      	str	r2, [r3, #0]
 	GPIOA_AFRH |= (0x4 << 8); // PA10 = AF4(USART2_RX) D0 0100: AF4
 80008f8:	4b3b      	ldr	r3, [pc, #236]	; (80009e8 <intialize_GPIO_USART2+0x144>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b3a      	ldr	r3, [pc, #232]	; (80009e8 <intialize_GPIO_USART2+0x144>)
 80008fe:	2180      	movs	r1, #128	; 0x80
 8000900:	00c9      	lsls	r1, r1, #3
 8000902:	430a      	orrs	r2, r1
 8000904:	601a      	str	r2, [r3, #0]
 	GPIOA_OSPEEDR |= (0x2 << 18); // 10: High speed for PA9
 8000906:	4b39      	ldr	r3, [pc, #228]	; (80009ec <intialize_GPIO_USART2+0x148>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	4b38      	ldr	r3, [pc, #224]	; (80009ec <intialize_GPIO_USART2+0x148>)
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	0309      	lsls	r1, r1, #12
 8000910:	430a      	orrs	r2, r1
 8000912:	601a      	str	r2, [r3, #0]
 	GPIOA_OSPEEDR |= (0x2 << 20); // 10: High speed for PA10
 8000914:	4b35      	ldr	r3, [pc, #212]	; (80009ec <intialize_GPIO_USART2+0x148>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b34      	ldr	r3, [pc, #208]	; (80009ec <intialize_GPIO_USART2+0x148>)
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	0389      	lsls	r1, r1, #14
 800091e:	430a      	orrs	r2, r1
 8000920:	601a      	str	r2, [r3, #0]
 	GPIOA_OTYPER &= ~(1 << 9); // 0: Output push-pull (reset state) PA9
 8000922:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <intialize_GPIO_USART2+0x14c>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	4b32      	ldr	r3, [pc, #200]	; (80009f0 <intialize_GPIO_USART2+0x14c>)
 8000928:	4932      	ldr	r1, [pc, #200]	; (80009f4 <intialize_GPIO_USART2+0x150>)
 800092a:	400a      	ands	r2, r1
 800092c:	601a      	str	r2, [r3, #0]
 	GPIOA_OTYPER &= ~(1 << 10); // 0: Output push-pull (reset state) PA10
 800092e:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <intialize_GPIO_USART2+0x14c>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	4b2f      	ldr	r3, [pc, #188]	; (80009f0 <intialize_GPIO_USART2+0x14c>)
 8000934:	4930      	ldr	r1, [pc, #192]	; (80009f8 <intialize_GPIO_USART2+0x154>)
 8000936:	400a      	ands	r2, r1
 8000938:	601a      	str	r2, [r3, #0]
 	GPIOA_PUPDR &= ~(0x3 << 18); // 10: Pull-down for PA9
 800093a:	4b30      	ldr	r3, [pc, #192]	; (80009fc <intialize_GPIO_USART2+0x158>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <intialize_GPIO_USART2+0x158>)
 8000940:	492f      	ldr	r1, [pc, #188]	; (8000a00 <intialize_GPIO_USART2+0x15c>)
 8000942:	400a      	ands	r2, r1
 8000944:	601a      	str	r2, [r3, #0]
 	GPIOA_PUPDR &= ~(0x3 << 20); // 00: No pull-up, pull-down for PA10
 8000946:	4b2d      	ldr	r3, [pc, #180]	; (80009fc <intialize_GPIO_USART2+0x158>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <intialize_GPIO_USART2+0x158>)
 800094c:	492d      	ldr	r1, [pc, #180]	; (8000a04 <intialize_GPIO_USART2+0x160>)
 800094e:	400a      	ands	r2, r1
 8000950:	601a      	str	r2, [r3, #0]
 	// pGPIOB_BSRR default
 	// pGPIOB_LCKR default
 	// pGPIOB_LCKR default

 	// PA0 USART2_CTS AF4, PA1 USART2_RTS/USART2_DE AF4
 	GPIOA_MODER &= ~(1 << 0); // 10: Alternate function mode for PA0 Reset value: 0xEBFF FCFF for port A
 8000952:	23a0      	movs	r3, #160	; 0xa0
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	23a0      	movs	r3, #160	; 0xa0
 800095a:	05db      	lsls	r3, r3, #23
 800095c:	2101      	movs	r1, #1
 800095e:	438a      	bics	r2, r1
 8000960:	601a      	str	r2, [r3, #0]
 	GPIOA_MODER |= (1 << 1);
 8000962:	23a0      	movs	r3, #160	; 0xa0
 8000964:	05db      	lsls	r3, r3, #23
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	23a0      	movs	r3, #160	; 0xa0
 800096a:	05db      	lsls	r3, r3, #23
 800096c:	2102      	movs	r1, #2
 800096e:	430a      	orrs	r2, r1
 8000970:	601a      	str	r2, [r3, #0]
 	GPIOA_MODER &= ~(1 << 2); // 10: Alternate function mode for PA1 Reset value: 0xEBFF FCFF for port A
 8000972:	23a0      	movs	r3, #160	; 0xa0
 8000974:	05db      	lsls	r3, r3, #23
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	23a0      	movs	r3, #160	; 0xa0
 800097a:	05db      	lsls	r3, r3, #23
 800097c:	2104      	movs	r1, #4
 800097e:	438a      	bics	r2, r1
 8000980:	601a      	str	r2, [r3, #0]
 	GPIOA_MODER |= (1 << 3);
 8000982:	23a0      	movs	r3, #160	; 0xa0
 8000984:	05db      	lsls	r3, r3, #23
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	23a0      	movs	r3, #160	; 0xa0
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	2108      	movs	r1, #8
 800098e:	430a      	orrs	r2, r1
 8000990:	601a      	str	r2, [r3, #0]
 	GPIOA_AFRL |= (0x4 << 0); // PA0 = AF4(USART2_CTS) D1 0100: AF4
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <intialize_GPIO_USART2+0x164>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <intialize_GPIO_USART2+0x164>)
 8000998:	2104      	movs	r1, #4
 800099a:	430a      	orrs	r2, r1
 800099c:	601a      	str	r2, [r3, #0]
 	GPIOA_AFRL |= (0x4 << 4); // PA1 = AF4(USART2_RTS/USART2_DE) D0 0100: AF4
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <intialize_GPIO_USART2+0x164>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <intialize_GPIO_USART2+0x164>)
 80009a4:	2140      	movs	r1, #64	; 0x40
 80009a6:	430a      	orrs	r2, r1
 80009a8:	601a      	str	r2, [r3, #0]
 	GPIOA_OSPEEDR |= (0x2 << 0); // 10: High speed for PA0
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <intialize_GPIO_USART2+0x148>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <intialize_GPIO_USART2+0x148>)
 80009b0:	2102      	movs	r1, #2
 80009b2:	430a      	orrs	r2, r1
 80009b4:	601a      	str	r2, [r3, #0]
 	GPIOA_OSPEEDR |= (0x2 << 2); // 10: High speed for PA1
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <intialize_GPIO_USART2+0x148>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <intialize_GPIO_USART2+0x148>)
 80009bc:	2108      	movs	r1, #8
 80009be:	430a      	orrs	r2, r1
 80009c0:	601a      	str	r2, [r3, #0]
 	GPIOA_PUPDR |= (0x2 << 0); // 10: Pull-down for PA0
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <intialize_GPIO_USART2+0x158>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <intialize_GPIO_USART2+0x158>)
 80009c8:	2102      	movs	r1, #2
 80009ca:	430a      	orrs	r2, r1
 80009cc:	601a      	str	r2, [r3, #0]
 	GPIOA_PUPDR |= (0x2 << 2); // 10: Pull-down for PA1
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <intialize_GPIO_USART2+0x158>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <intialize_GPIO_USART2+0x158>)
 80009d4:	2108      	movs	r1, #8
 80009d6:	430a      	orrs	r2, r1
 80009d8:	601a      	str	r2, [r3, #0]
 }
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	fffbffff 	.word	0xfffbffff
 80009e4:	ffefffff 	.word	0xffefffff
 80009e8:	50000024 	.word	0x50000024
 80009ec:	50000008 	.word	0x50000008
 80009f0:	50000004 	.word	0x50000004
 80009f4:	fffffdff 	.word	0xfffffdff
 80009f8:	fffffbff 	.word	0xfffffbff
 80009fc:	5000000c 	.word	0x5000000c
 8000a00:	fff3ffff 	.word	0xfff3ffff
 8000a04:	ffcfffff 	.word	0xffcfffff
 8000a08:	50000020 	.word	0x50000020

08000a0c <EEPROM_Get_Serial_Number>:
		//*pGPIOB_ODR |= ((*pI2C1_ISR >> 0) & 0x01); //PB0 = I2C_TXE
	//}
//}

//Retrieves serial number information from specified chip
void EEPROM_Get_Serial_Number(uint8_t I2C_address){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	0002      	movs	r2, r0
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	701a      	strb	r2, [r3, #0]
	//Reads serial data information plus one byte before which will be overwritten with label
	I2C_EEPROM_Read(I2C_address, (EEPROM_MANUFACTURER_CODE-1), 0x07); //Reads into EEPROM_received_data
 8000a18:	490d      	ldr	r1, [pc, #52]	; (8000a50 <EEPROM_Get_Serial_Number+0x44>)
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2207      	movs	r2, #7
 8000a20:	0018      	movs	r0, r3
 8000a22:	f000 f911 	bl	8000c48 <I2C_EEPROM_Read>
	label_message_type(0x07, I2C_address, EEPROM_received_data); //Seventh byte is labeled with the I2C_address chip address
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <EEPROM_Get_Serial_Number+0x48>)
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	0019      	movs	r1, r3
 8000a2e:	2007      	movs	r0, #7
 8000a30:	f002 f862 	bl	8002af8 <label_message_type>
	label_message_type(0x00, 0x06, EEPROM_received_data); //Seventh byte is labeled with the I2C_address chip address
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <EEPROM_Get_Serial_Number+0x48>)
 8000a36:	001a      	movs	r2, r3
 8000a38:	2106      	movs	r1, #6
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f002 f85c 	bl	8002af8 <label_message_type>
	EEPROM_read_message_queue_add(EEPROM_received_data);
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <EEPROM_Get_Serial_Number+0x48>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 ff8a 	bl	800195c <EEPROM_read_message_queue_add>
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	00007ff9 	.word	0x00007ff9
 8000a54:	20000084 	.word	0x20000084

08000a58 <EEPROM_Stored_Data_Block_Is_Available>:

//Stored data blocks is available in the EEPROM and has not been processed
uint8_t EEPROM_Stored_Data_Block_Is_Available(uint8_t I2C_address){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	0002      	movs	r2, r0
 8000a60:	1dfb      	adds	r3, r7, #7
 8000a62:	701a      	strb	r2, [r3, #0]
	//1. Retrieve EEPROM_Data_Process_Address and EEPROM_Data_Write_Address (global variables are updated)
	EEPROM_Get_Data_Write_Pointer(I2C_address); //Updates EEPROM_Data_Write_Address (global)
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f000 f84d 	bl	8000b08 <EEPROM_Get_Data_Write_Pointer>
	EEPROM_Get_Data_Process_Pointer(I2C_address); //Updates EEPROM_Data_Process_Address (global)
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 f86a 	bl	8000b4c <EEPROM_Get_Data_Process_Pointer>

	//2. Test if there are any new stored data that have not been processed
	if (EEPROM_Data_Write_Address != EEPROM_Data_Process_Address){
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <EEPROM_Stored_Data_Block_Is_Available+0x3c>)
 8000a7a:	881a      	ldrh	r2, [r3, #0]
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <EEPROM_Stored_Data_Block_Is_Available+0x40>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d001      	beq.n	8000a88 <EEPROM_Stored_Data_Block_Is_Available+0x30>
		//New data are available
		return 1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	e000      	b.n	8000a8a <EEPROM_Stored_Data_Block_Is_Available+0x32>
	} else {
		//No new data are available
		return 0;
 8000a88:	2300      	movs	r3, #0
	}
}
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	2000009e 	.word	0x2000009e
 8000a98:	200000a0 	.word	0x200000a0

08000a9c <EEPROM_Reset_Data_Pointers>:
	//   Received data are stored in EEPROM_received_data array (global) in first four bytes
	EEPROM_Get_Data_Write_Pointer(I2C_address);
	EEPROM_Get_Data_Process_Pointer(I2C_address);
}

void EEPROM_Reset_Data_Pointers(uint8_t I2C_address){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	701a      	strb	r2, [r3, #0]
	//Reset the data block count and write pointer
	EEPROM_Data_Write_Address = EEPROM_INITIAL_DATA_WRITE_POINTER;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <EEPROM_Reset_Data_Pointers+0x60>)
 8000aaa:	2204      	movs	r2, #4
 8000aac:	801a      	strh	r2, [r3, #0]
	EEPROM_Data_Process_Address = EEPROM_INITIAL_DATA_WRITE_POINTER;
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <EEPROM_Reset_Data_Pointers+0x64>)
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	801a      	strh	r2, [r3, #0]
	*(EEPROM_send_data) = (EEPROM_Data_Process_Address >> 8); //Block number High Byte
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <EEPROM_Reset_Data_Pointers+0x64>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <EEPROM_Reset_Data_Pointers+0x68>)
 8000ac0:	701a      	strb	r2, [r3, #0]
	*(EEPROM_send_data+1) = EEPROM_Data_Process_Address; //Block number Low Byte
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <EEPROM_Reset_Data_Pointers+0x64>)
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <EEPROM_Reset_Data_Pointers+0x68>)
 8000aca:	705a      	strb	r2, [r3, #1]
	*(EEPROM_send_data+2) = (EEPROM_Data_Write_Address >> 8); //Address High Byte
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <EEPROM_Reset_Data_Pointers+0x60>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <EEPROM_Reset_Data_Pointers+0x68>)
 8000ad8:	709a      	strb	r2, [r3, #2]
	*(EEPROM_send_data+3) = EEPROM_Data_Write_Address; //Address Low Byte
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <EEPROM_Reset_Data_Pointers+0x60>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <EEPROM_Reset_Data_Pointers+0x68>)
 8000ae2:	70da      	strb	r2, [r3, #3]
	I2C_EEPROM_Write(I2C_address, EEPROM_DATA_BLOCK_PROCESS_POINTER, 0x4, 0x1);
 8000ae4:	1dfb      	adds	r3, r7, #7
 8000ae6:	7818      	ldrb	r0, [r3, #0]
 8000ae8:	2301      	movs	r3, #1
 8000aea:	2204      	movs	r2, #4
 8000aec:	2100      	movs	r1, #0
 8000aee:	f000 f90f 	bl	8000d10 <I2C_EEPROM_Write>
}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b002      	add	sp, #8
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	2000009e 	.word	0x2000009e
 8000b00:	200000a0 	.word	0x200000a0
 8000b04:	20000074 	.word	0x20000074

08000b08 <EEPROM_Get_Data_Write_Pointer>:

//Gets the EEPROM_Data_Write_Address on EEPROM updating the current global variable
void EEPROM_Get_Data_Write_Pointer(uint8_t I2C_address){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	0002      	movs	r2, r0
 8000b10:	1dfb      	adds	r3, r7, #7
 8000b12:	701a      	strb	r2, [r3, #0]
	//1. Retrieve EEPROM_Data_Write_Address pointer (2 bytes)
	//   Received data are stored in EEPROM_received_data array (global) in first four bytes
	I2C_EEPROM_Read(I2C_address, EEPROM_DATA_BLOCK_WRITE_POINTER, 0x2);
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2202      	movs	r2, #2
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f000 f893 	bl	8000c48 <I2C_EEPROM_Read>

	//Updates global variables
	EEPROM_Data_Write_Address = (((*(EEPROM_received_data+0)) << 8) | (*(EEPROM_received_data+1)));
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <EEPROM_Get_Data_Write_Pointer+0x3c>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	021b      	lsls	r3, r3, #8
 8000b28:	b21a      	sxth	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <EEPROM_Get_Data_Write_Pointer+0x3c>)
 8000b2c:	785b      	ldrb	r3, [r3, #1]
 8000b2e:	b21b      	sxth	r3, r3
 8000b30:	4313      	orrs	r3, r2
 8000b32:	b21b      	sxth	r3, r3
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <EEPROM_Get_Data_Write_Pointer+0x40>)
 8000b38:	801a      	strh	r2, [r3, #0]
}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b002      	add	sp, #8
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	20000084 	.word	0x20000084
 8000b48:	2000009e 	.word	0x2000009e

08000b4c <EEPROM_Get_Data_Process_Pointer>:

//Gets the EEPROM_Data_Process_Address on EEPROM updating the current global variable
void EEPROM_Get_Data_Process_Pointer(uint8_t I2C_address){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	0002      	movs	r2, r0
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	701a      	strb	r2, [r3, #0]
	//1. Retrieve EEPROM_Data_Process_Address pointer (2 bytes)
	//   Received data are stored in EEPROM_received_data array (global) in first four bytes
	I2C_EEPROM_Read(I2C_address, EEPROM_DATA_BLOCK_PROCESS_POINTER, 0x2);
 8000b58:	1dfb      	adds	r3, r7, #7
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	2100      	movs	r1, #0
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 f871 	bl	8000c48 <I2C_EEPROM_Read>

	//Updates global variables
	EEPROM_Data_Process_Address = (((*(EEPROM_received_data+0)) << 8) | (*(EEPROM_received_data+1)));
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <EEPROM_Get_Data_Process_Pointer+0x3c>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	021b      	lsls	r3, r3, #8
 8000b6c:	b21a      	sxth	r2, r3
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <EEPROM_Get_Data_Process_Pointer+0x3c>)
 8000b70:	785b      	ldrb	r3, [r3, #1]
 8000b72:	b21b      	sxth	r3, r3
 8000b74:	4313      	orrs	r3, r2
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <EEPROM_Get_Data_Process_Pointer+0x40>)
 8000b7c:	801a      	strh	r2, [r3, #0]
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b002      	add	sp, #8
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	20000084 	.word	0x20000084
 8000b8c:	200000a0 	.word	0x200000a0

08000b90 <EEPROM_Increment_Data_Process_Pointer>:
	//Transmits the data to EEPROM
	I2C_EEPROM_Write(I2C_address, EEPROM_DATA_BLOCK_WRITE_POINTER, 0x2, 0x1);
}

//Increments the EEPROM_Data_Process_Address on EEPROM using the current global variable
void EEPROM_Increment_Data_Process_Pointer(uint8_t I2C_address, uint16_t incrementSize){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	0002      	movs	r2, r0
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	1c0a      	adds	r2, r1, #0
 8000ba0:	801a      	strh	r2, [r3, #0]
	EEPROM_Data_Process_Address += incrementSize;
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <EEPROM_Increment_Data_Process_Pointer+0x50>)
 8000ba4:	881a      	ldrh	r2, [r3, #0]
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	18d3      	adds	r3, r2, r3
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <EEPROM_Increment_Data_Process_Pointer+0x50>)
 8000bb0:	801a      	strh	r2, [r3, #0]

	//Prepares the send data global array
	*(EEPROM_send_data) = (EEPROM_Data_Process_Address >> 8); //High Byte
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <EEPROM_Increment_Data_Process_Pointer+0x50>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	0a1b      	lsrs	r3, r3, #8
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <EEPROM_Increment_Data_Process_Pointer+0x54>)
 8000bbe:	701a      	strb	r2, [r3, #0]
	*(EEPROM_send_data+1) = EEPROM_Data_Process_Address; //Low Byte
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <EEPROM_Increment_Data_Process_Pointer+0x50>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <EEPROM_Increment_Data_Process_Pointer+0x54>)
 8000bc8:	705a      	strb	r2, [r3, #1]

	//Transmits the data to EEPROM
	I2C_EEPROM_Write(I2C_address, EEPROM_DATA_BLOCK_PROCESS_POINTER, 0x2, 0x1);
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	7818      	ldrb	r0, [r3, #0]
 8000bce:	2301      	movs	r3, #1
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f000 f89c 	bl	8000d10 <I2C_EEPROM_Write>
}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200000a0 	.word	0x200000a0
 8000be4:	20000074 	.word	0x20000074

08000be8 <EEPROM_Get_FIFO_Data_Block>:

	//3.Update EEPROM_Data_Write_Address pointer. The first two bytes of EEPROM_send_data (global) reserved for EEPROM_address
	EEPROM_Increment_Data_Write_Pointer(I2C_address, MESSAGE_BLOCK_BYTES);
}

uint8_t EEPROM_Get_FIFO_Data_Block(uint8_t I2C_address){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	0002      	movs	r2, r0
 8000bf0:	1dfb      	adds	r3, r7, #7
 8000bf2:	701a      	strb	r2, [r3, #0]
	//1. Updates EEPROM_Data_Process_Address and EEPROM_Data_Write_Address (global variables are updated)
	if(EEPROM_Stored_Data_Block_Is_Available(I2C_address)){
 8000bf4:	1dfb      	adds	r3, r7, #7
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f7ff ff2d 	bl	8000a58 <EEPROM_Stored_Data_Block_Is_Available>
 8000bfe:	1e03      	subs	r3, r0, #0
 8000c00:	d019      	beq.n	8000c36 <EEPROM_Get_FIFO_Data_Block+0x4e>
		//2.Read data block starting at the last process pointer
		I2C_EEPROM_Read(I2C_address, EEPROM_Data_Process_Address, MESSAGE_BLOCK_BYTES);
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <EEPROM_Get_FIFO_Data_Block+0x58>)
 8000c04:	8819      	ldrh	r1, [r3, #0]
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	220e      	movs	r2, #14
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f000 f81b 	bl	8000c48 <I2C_EEPROM_Read>

		//3.Update EEPROM_Data_Process_Address pointer. The first two bytes of EEPROM_send_data (global) reserved for EEPROM_address
		EEPROM_Increment_Data_Process_Pointer(I2C_address, MESSAGE_BLOCK_BYTES);
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	210e      	movs	r1, #14
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff ffb9 	bl	8000b90 <EEPROM_Increment_Data_Process_Pointer>

		//4. Add data on the EEPROM received data processing queue
		label_message_type(0x0D, 0x01, EEPROM_received_data); //Labels block 13 with 1 (Came from EEPROM)
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <EEPROM_Get_FIFO_Data_Block+0x5c>)
 8000c20:	001a      	movs	r2, r3
 8000c22:	2101      	movs	r1, #1
 8000c24:	200d      	movs	r0, #13
 8000c26:	f001 ff67 	bl	8002af8 <label_message_type>
		EEPROM_read_message_queue_add(EEPROM_received_data);
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <EEPROM_Get_FIFO_Data_Block+0x5c>)
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f000 fe95 	bl	800195c <EEPROM_read_message_queue_add>

		//New data were available
		return 1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e000      	b.n	8000c38 <EEPROM_Get_FIFO_Data_Block+0x50>
	} else {
		//No new data were available, EEPROM_received_data array is not updated
		return 0;
 8000c36:	2300      	movs	r3, #0
	}
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b002      	add	sp, #8
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200000a0 	.word	0x200000a0
 8000c44:	20000084 	.word	0x20000084

08000c48 <I2C_EEPROM_Read>:
 * @param nBytes The number of bytes to read.
 *
 * @note The function assumes that I2C_EEPROM_Write has been defined and implements
 * the necessary write operation to set up the read operation.
 */
void I2C_EEPROM_Read(uint8_t I2C_address, uint16_t EEPROM_address, uint8_t nBytes) {
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	0004      	movs	r4, r0
 8000c50:	0008      	movs	r0, r1
 8000c52:	0011      	movs	r1, r2
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	1c22      	adds	r2, r4, #0
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	1c02      	adds	r2, r0, #0
 8000c5e:	801a      	strh	r2, [r3, #0]
 8000c60:	1dbb      	adds	r3, r7, #6
 8000c62:	1c0a      	adds	r2, r1, #0
 8000c64:	701a      	strb	r2, [r3, #0]

    // Initialize read operation
    receive_byte_counter = 0; // Tracks position in the receive array
 8000c66:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <I2C_EEPROM_Read+0xb0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
    i2c_read_successful_flag = 0;
 8000c6c:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <I2C_EEPROM_Read+0xb4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]

    // Master transmit control byte and two-byte EEPROM address to be read
    // No need to generate STOP condition
    // Master read - send control byte and receive bytes
    // To end read operation generate NACK and STOP
    I2C_EEPROM_Write(I2C_address, EEPROM_address, 0, 0x0); // Transmit control byte, address, restart
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	8819      	ldrh	r1, [r3, #0]
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	7818      	ldrb	r0, [r3, #0]
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f000 f847 	bl	8000d10 <I2C_EEPROM_Write>

    // Will attempt to receive data only when the EEPROM address write was successful
    // EEPROM is not in a write cycle (address write was successful)
    // No need for pooling
    if (i2c_write_successful_flag == 1) {
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <I2C_EEPROM_Read+0xb8>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d131      	bne.n	8000cee <I2C_EEPROM_Read+0xa6>
        // Reinitialize for read operation
        I2C1_CR2 |= (0x51 << 1);  // SADD[7:1] Slave Address for 7-bit addressing
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <I2C_EEPROM_Read+0xbc>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <I2C_EEPROM_Read+0xbc>)
 8000c90:	21a2      	movs	r1, #162	; 0xa2
 8000c92:	430a      	orrs	r2, r1
 8000c94:	601a      	str	r2, [r3, #0]
        I2C1_CR2 &= ~(0xFF << 16); // Clear NBYTES
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <I2C_EEPROM_Read+0xbc>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <I2C_EEPROM_Read+0xbc>)
 8000c9c:	491a      	ldr	r1, [pc, #104]	; (8000d08 <I2C_EEPROM_Read+0xc0>)
 8000c9e:	400a      	ands	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]
        I2C1_CR2 |= (nBytes << 16); // NBYTES=data_size Number of bytes to be sent
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <I2C_EEPROM_Read+0xbc>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	1dbb      	adds	r3, r7, #6
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	041b      	lsls	r3, r3, #16
 8000cac:	0019      	movs	r1, r3
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <I2C_EEPROM_Read+0xbc>)
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	601a      	str	r2, [r3, #0]
        I2C1_CR2 |= (1 << 10);      // RD_WRN=1 Master Requests a Read Transfer
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <I2C_EEPROM_Read+0xbc>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <I2C_EEPROM_Read+0xbc>)
 8000cba:	2180      	movs	r1, #128	; 0x80
 8000cbc:	00c9      	lsls	r1, r1, #3
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	601a      	str	r2, [r3, #0]
        // ------This causes STOP generation
        // I2C1_CR2 |= (1 << 25); // Set AUTOEND bit - STOP will set after NACK automatically

        // Start the read operation
        // One attempt only
        I2C1_CR2 |= (1 << 13); // START
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <I2C_EEPROM_Read+0xbc>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <I2C_EEPROM_Read+0xbc>)
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	0189      	lsls	r1, r1, #6
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	601a      	str	r2, [r3, #0]
        I2C1_CR2 |= (1 << 25); // Set AUTOEND bit - STOP will set after NACK automatically
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <I2C_EEPROM_Read+0xbc>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <I2C_EEPROM_Read+0xbc>)
 8000cd6:	2180      	movs	r1, #128	; 0x80
 8000cd8:	0489      	lsls	r1, r1, #18
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	601a      	str	r2, [r3, #0]
        i2c_busy = 1;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <I2C_EEPROM_Read+0xc4>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	701a      	strb	r2, [r3, #0]

        // Wait while I2C is busy before the next write - Blocks its own operation
        while (i2c_busy) {
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <I2C_EEPROM_Read+0xc4>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1fb      	bne.n	8000ce6 <I2C_EEPROM_Read+0x9e>
            // Wait
        }
    }
}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b003      	add	sp, #12
 8000cf4:	bd90      	pop	{r4, r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	20000099 	.word	0x20000099
 8000cfc:	2000009c 	.word	0x2000009c
 8000d00:	2000009b 	.word	0x2000009b
 8000d04:	40005404 	.word	0x40005404
 8000d08:	ff00ffff 	.word	0xff00ffff
 8000d0c:	2000009a 	.word	0x2000009a

08000d10 <I2C_EEPROM_Write>:
// I2C_address is the 4-bit address of the EEPROM
// generateStop is here to allow this function to be used for EEPROM read operation
// generateStop == 1 generate STOP condition at the end of transmission
// generateStop == 0 Don't generate STOP
// The first two bytes of EEPROM_send_data reserved for EEPROM_address
void I2C_EEPROM_Write(uint8_t I2C_address, uint16_t EEPROM_address, uint8_t nBytes, uint8_t generateStop) {
 8000d10:	b5b0      	push	{r4, r5, r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	0005      	movs	r5, r0
 8000d18:	000c      	movs	r4, r1
 8000d1a:	0010      	movs	r0, r2
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	1c2a      	adds	r2, r5, #0
 8000d22:	701a      	strb	r2, [r3, #0]
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	1c22      	adds	r2, r4, #0
 8000d28:	801a      	strh	r2, [r3, #0]
 8000d2a:	1dbb      	adds	r3, r7, #6
 8000d2c:	1c02      	adds	r2, r0, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
 8000d30:	1cfb      	adds	r3, r7, #3
 8000d32:	1c0a      	adds	r2, r1, #0
 8000d34:	701a      	strb	r2, [r3, #0]
    uint8_t control_byte = (0x50 | I2C_address); // Control byte 1010000
 8000d36:	200f      	movs	r0, #15
 8000d38:	183b      	adds	r3, r7, r0
 8000d3a:	1dfa      	adds	r2, r7, #7
 8000d3c:	7812      	ldrb	r2, [r2, #0]
 8000d3e:	2150      	movs	r1, #80	; 0x50
 8000d40:	430a      	orrs	r2, r1
 8000d42:	701a      	strb	r2, [r3, #0]

    // Prepare EEPROM address for transfer
    EEPROM_Transmitted_address[0] = (EEPROM_address >> 8);
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b37      	ldr	r3, [pc, #220]	; (8000e2c <I2C_EEPROM_Write+0x11c>)
 8000d4e:	801a      	strh	r2, [r3, #0]
    EEPROM_Transmitted_address[1] = (EEPROM_address);
 8000d50:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <I2C_EEPROM_Write+0x11c>)
 8000d52:	1d3a      	adds	r2, r7, #4
 8000d54:	8812      	ldrh	r2, [r2, #0]
 8000d56:	805a      	strh	r2, [r3, #2]

    // Initialize i2c write operation
    i2c_write_successful_flag = 0; // Initialize flag
 8000d58:	4b35      	ldr	r3, [pc, #212]	; (8000e30 <I2C_EEPROM_Write+0x120>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
    no_of_write_attempts = 1; // Tally of current data write attempts
 8000d5e:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <I2C_EEPROM_Write+0x124>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
    send_byte_counter = 0; // Byte number tracker in the EEPROM_send_data array
 8000d64:	4b34      	ldr	r3, [pc, #208]	; (8000e38 <I2C_EEPROM_Write+0x128>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]

    // Initializes the number of bytes to be sent from the EEPROM_send_data array
    I2C1_CR2 &= ~(0xFF << 0); // Clears the SADD[7:1]
 8000d6a:	4b34      	ldr	r3, [pc, #208]	; (8000e3c <I2C_EEPROM_Write+0x12c>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	4b33      	ldr	r3, [pc, #204]	; (8000e3c <I2C_EEPROM_Write+0x12c>)
 8000d70:	21ff      	movs	r1, #255	; 0xff
 8000d72:	438a      	bics	r2, r1
 8000d74:	601a      	str	r2, [r3, #0]
    I2C1_CR2 |= (control_byte << 1); // SADD[7:1] Slave Address for 7-bit addressing
 8000d76:	4b31      	ldr	r3, [pc, #196]	; (8000e3c <I2C_EEPROM_Write+0x12c>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	183b      	adds	r3, r7, r0
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	0019      	movs	r1, r3
 8000d82:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <I2C_EEPROM_Write+0x12c>)
 8000d84:	430a      	orrs	r2, r1
 8000d86:	601a      	str	r2, [r3, #0]
    I2C1_CR2 &= ~(0xFF << 16); // NBYTES=data_size Number of bytes to be sent
 8000d88:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <I2C_EEPROM_Write+0x12c>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b2b      	ldr	r3, [pc, #172]	; (8000e3c <I2C_EEPROM_Write+0x12c>)
 8000d8e:	492c      	ldr	r1, [pc, #176]	; (8000e40 <I2C_EEPROM_Write+0x130>)
 8000d90:	400a      	ands	r2, r1
 8000d92:	601a      	str	r2, [r3, #0]
    I2C1_CR2 |= ((nBytes+0x2) << 16); // NBYTES=data_size Number of bytes to be sent, plus two for the EEPROM_address
 8000d94:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <I2C_EEPROM_Write+0x12c>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	1dbb      	adds	r3, r7, #6
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	041b      	lsls	r3, r3, #16
 8000da0:	0019      	movs	r1, r3
 8000da2:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <I2C_EEPROM_Write+0x12c>)
 8000da4:	430a      	orrs	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
    I2C1_CR2 &= ~(1 << 10); // RD_WRN=0 Master Requests a Write Transfer
 8000da8:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <I2C_EEPROM_Write+0x12c>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <I2C_EEPROM_Write+0x12c>)
 8000dae:	4925      	ldr	r1, [pc, #148]	; (8000e44 <I2C_EEPROM_Write+0x134>)
 8000db0:	400a      	ands	r2, r1
 8000db2:	601a      	str	r2, [r3, #0]
    I2C1_CR2 &= ~(1 << 25); // Clear AUTOEND bit
 8000db4:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <I2C_EEPROM_Write+0x12c>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <I2C_EEPROM_Write+0x12c>)
 8000dba:	4923      	ldr	r1, [pc, #140]	; (8000e48 <I2C_EEPROM_Write+0x138>)
 8000dbc:	400a      	ands	r2, r1
 8000dbe:	601a      	str	r2, [r3, #0]
    I2C1_CR2 |= (generateStop << 25); // AUTOEND Stop Condition is Automatically sent after NBYTES
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <I2C_EEPROM_Write+0x12c>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	1cfb      	adds	r3, r7, #3
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	065b      	lsls	r3, r3, #25
 8000dca:	0019      	movs	r1, r3
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <I2C_EEPROM_Write+0x12c>)
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	601a      	str	r2, [r3, #0]
    I2C1_CR1 &= ~(1 << 6); // Clear TCIE
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <I2C_EEPROM_Write+0x13c>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <I2C_EEPROM_Write+0x13c>)
 8000dd8:	2140      	movs	r1, #64	; 0x40
 8000dda:	438a      	bics	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]
    // When STOP is not generated (AUTOEND = 0), transmission will end after the last ACK
    if (generateStop == 0) {
 8000dde:	1cfb      	adds	r3, r7, #3
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d115      	bne.n	8000e12 <I2C_EEPROM_Write+0x102>
        I2C1_CR1 |= (1 << 6); // TCIE: Transfer Complete interrupt enable
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <I2C_EEPROM_Write+0x13c>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <I2C_EEPROM_Write+0x13c>)
 8000dec:	2140      	movs	r1, #64	; 0x40
 8000dee:	430a      	orrs	r2, r1
 8000df0:	601a      	str	r2, [r3, #0]
    }

    // Start write operation
    while (i2c_write_successful_flag == 0 && (no_of_write_attempts <= I2C_MAX_EEPROM_WRITE_ATTEMPTS)) {
 8000df2:	e00e      	b.n	8000e12 <I2C_EEPROM_Write+0x102>
        I2C1_CR2 |= (1 << 13); // START
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <I2C_EEPROM_Write+0x12c>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <I2C_EEPROM_Write+0x12c>)
 8000dfa:	2180      	movs	r1, #128	; 0x80
 8000dfc:	0189      	lsls	r1, r1, #6
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	601a      	str	r2, [r3, #0]
        i2c_busy = 1;
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <I2C_EEPROM_Write+0x140>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]

        // Wait while I2C is busy before the next write - Blocks its own operation
        while (i2c_busy) {
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <I2C_EEPROM_Write+0x140>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1fb      	bne.n	8000e0a <I2C_EEPROM_Write+0xfa>
    while (i2c_write_successful_flag == 0 && (no_of_write_attempts <= I2C_MAX_EEPROM_WRITE_ATTEMPTS)) {
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <I2C_EEPROM_Write+0x120>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d103      	bne.n	8000e22 <I2C_EEPROM_Write+0x112>
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <I2C_EEPROM_Write+0x124>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b0a      	cmp	r3, #10
 8000e20:	d9e8      	bls.n	8000df4 <I2C_EEPROM_Write+0xe4>
            // Wait
        }
    }
}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b004      	add	sp, #16
 8000e28:	bdb0      	pop	{r4, r5, r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	20000094 	.word	0x20000094
 8000e30:	2000009b 	.word	0x2000009b
 8000e34:	2000009d 	.word	0x2000009d
 8000e38:	20000098 	.word	0x20000098
 8000e3c:	40005404 	.word	0x40005404
 8000e40:	ff00ffff 	.word	0xff00ffff
 8000e44:	fffffbff 	.word	0xfffffbff
 8000e48:	fdffffff 	.word	0xfdffffff
 8000e4c:	40005400 	.word	0x40005400
 8000e50:	2000009a 	.word	0x2000009a

08000e54 <I2C1_IRQHandler>:

void I2C1_IRQHandler(){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	//Detects empty I2C1_TXDR TXIS: Transmit Interrupt Status = 1
	if(I2C1_ISR & (1<<1)){
 8000e58:	4b47      	ldr	r3, [pc, #284]	; (8000f78 <I2C1_IRQHandler+0x124>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d01a      	beq.n	8000e98 <I2C1_IRQHandler+0x44>
		//Interrupt flag cleared automatically
		if (send_byte_counter<2){
 8000e62:	4b46      	ldr	r3, [pc, #280]	; (8000f7c <I2C1_IRQHandler+0x128>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d808      	bhi.n	8000e7c <I2C1_IRQHandler+0x28>
			I2C1_TXDR = *(send_byte_counter+EEPROM_Transmitted_address); //Sends EEPROM address first
 8000e6a:	4b44      	ldr	r3, [pc, #272]	; (8000f7c <I2C1_IRQHandler+0x128>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	005a      	lsls	r2, r3, #1
 8000e70:	4b43      	ldr	r3, [pc, #268]	; (8000f80 <I2C1_IRQHandler+0x12c>)
 8000e72:	18d3      	adds	r3, r2, r3
 8000e74:	881a      	ldrh	r2, [r3, #0]
 8000e76:	4b43      	ldr	r3, [pc, #268]	; (8000f84 <I2C1_IRQHandler+0x130>)
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	e007      	b.n	8000e8c <I2C1_IRQHandler+0x38>
		} else {
			I2C1_TXDR = *((send_byte_counter-2)+EEPROM_send_data); //TXDATA[7:0] 8bit transmit data
 8000e7c:	4b3f      	ldr	r3, [pc, #252]	; (8000f7c <I2C1_IRQHandler+0x128>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	1e9a      	subs	r2, r3, #2
 8000e82:	4b41      	ldr	r3, [pc, #260]	; (8000f88 <I2C1_IRQHandler+0x134>)
 8000e84:	18d3      	adds	r3, r2, r3
 8000e86:	781a      	ldrb	r2, [r3, #0]
 8000e88:	4b3e      	ldr	r3, [pc, #248]	; (8000f84 <I2C1_IRQHandler+0x130>)
 8000e8a:	601a      	str	r2, [r3, #0]
		}
		send_byte_counter=send_byte_counter+1;
 8000e8c:	4b3b      	ldr	r3, [pc, #236]	; (8000f7c <I2C1_IRQHandler+0x128>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	3301      	adds	r3, #1
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	4b39      	ldr	r3, [pc, #228]	; (8000f7c <I2C1_IRQHandler+0x128>)
 8000e96:	701a      	strb	r2, [r3, #0]
	}

	//Detects RXNE=1: Receive data register not empty (receivers)
	if(I2C1_ISR & (1<<2)){
 8000e98:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <I2C1_IRQHandler+0x124>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2204      	movs	r2, #4
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d00e      	beq.n	8000ec0 <I2C1_IRQHandler+0x6c>
		//Interrupt flag cleared automatically
		*(receive_byte_counter+EEPROM_received_data) = I2C1_RXDR; //RXDATA[7:0] 8bit transmit data
 8000ea2:	4b3a      	ldr	r3, [pc, #232]	; (8000f8c <I2C1_IRQHandler+0x138>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4b3a      	ldr	r3, [pc, #232]	; (8000f90 <I2C1_IRQHandler+0x13c>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	0019      	movs	r1, r3
 8000eac:	4b39      	ldr	r3, [pc, #228]	; (8000f94 <I2C1_IRQHandler+0x140>)
 8000eae:	18cb      	adds	r3, r1, r3
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	701a      	strb	r2, [r3, #0]
		receive_byte_counter=receive_byte_counter+1;
 8000eb4:	4b36      	ldr	r3, [pc, #216]	; (8000f90 <I2C1_IRQHandler+0x13c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b34      	ldr	r3, [pc, #208]	; (8000f90 <I2C1_IRQHandler+0x13c>)
 8000ebe:	701a      	strb	r2, [r3, #0]
		nack_counter = nack_counter + 1;
	}*/

	//Detects Bit 6 TC: Transfer Complete (master mode)
	//Memory address is sent to EEPROM (without STOP) - new data read follows
	if(I2C1_ISR & (1<<6)){
 8000ec0:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <I2C1_IRQHandler+0x124>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2240      	movs	r2, #64	; 0x40
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	d00b      	beq.n	8000ee2 <I2C1_IRQHandler+0x8e>
		//It is cleared by software when START bit or STOP bit is set.
		//Will be cleared on START of data read from EEPROM
		i2c_write_successful_flag = 1; //I2C write was successful
 8000eca:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <I2C1_IRQHandler+0x144>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
		I2C1_CR1 &= ~(1 << 6); //Disable TCIE
 8000ed0:	4b32      	ldr	r3, [pc, #200]	; (8000f9c <I2C1_IRQHandler+0x148>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b31      	ldr	r3, [pc, #196]	; (8000f9c <I2C1_IRQHandler+0x148>)
 8000ed6:	2140      	movs	r1, #64	; 0x40
 8000ed8:	438a      	bics	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
		i2c_busy = 0;
 8000edc:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <I2C1_IRQHandler+0x14c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
	}

	//Detects Bit 5 STOPF: Stop detection flag
	//It is cleared by software by setting the STOPCF bit.
	if(I2C1_ISR & (1<<5)){
 8000ee2:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <I2C1_IRQHandler+0x124>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2220      	movs	r2, #32
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d042      	beq.n	8000f72 <I2C1_IRQHandler+0x11e>
		//For EEPROM write (RD_WRN=0)
		if((I2C1_CR2 & (1 << 10))==0) { //Bit 10 RD_WRN: Transfer direction (master mode)
 8000eec:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <I2C1_IRQHandler+0x150>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d11e      	bne.n	8000f36 <I2C1_IRQHandler+0xe2>
			if (I2C1_ISR & (1 << 4)){ //NACKF detected (before the current STOP) - EEPROM is busy writing other data (Not responsive)
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <I2C1_IRQHandler+0x124>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2210      	movs	r2, #16
 8000efe:	4013      	ands	r3, r2
 8000f00:	d00c      	beq.n	8000f1c <I2C1_IRQHandler+0xc8>
				I2C1_ICR |= (1 << 4); //Clears the NACKF flag in I2C1_ISR register.
 8000f02:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <I2C1_IRQHandler+0x154>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <I2C1_IRQHandler+0x154>)
 8000f08:	2110      	movs	r1, #16
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	601a      	str	r2, [r3, #0]
				no_of_write_attempts = no_of_write_attempts + 1;
 8000f0e:	4b27      	ldr	r3, [pc, #156]	; (8000fac <I2C1_IRQHandler+0x158>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	3301      	adds	r3, #1
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b25      	ldr	r3, [pc, #148]	; (8000fac <I2C1_IRQHandler+0x158>)
 8000f18:	701a      	strb	r2, [r3, #0]
 8000f1a:	e002      	b.n	8000f22 <I2C1_IRQHandler+0xce>
			} else {
				i2c_write_successful_flag = 1; //I2C write was successful
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <I2C1_IRQHandler+0x144>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
			}
			I2C1_ICR |= (1 << 5); //Clears the STOPF flag in the I2C1_ISR register.
 8000f22:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <I2C1_IRQHandler+0x154>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <I2C1_IRQHandler+0x154>)
 8000f28:	2120      	movs	r1, #32
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	601a      	str	r2, [r3, #0]
			//I2C1_CR2 |= (1 << 14); //STOP=1 Stop Generation after current byte transfer
			//stop_counter = stop_counter + 1;
			i2c_busy = 0;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <I2C1_IRQHandler+0x14c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
			//I2C1_CR2 |= (1 << 14); //STOP=1 Stop Generation after current byte transfer
			//stop_counter = stop_counter + 1;
			i2c_busy = 0;
		}
	}
}
 8000f34:	e01d      	b.n	8000f72 <I2C1_IRQHandler+0x11e>
		} else if(I2C1_CR2 & (1 << 10)){ //For EEPROM read (RD_WRN=1)
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <I2C1_IRQHandler+0x150>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d017      	beq.n	8000f72 <I2C1_IRQHandler+0x11e>
			if (I2C1_ISR & (1 << 4)){ //NACKF detected (before the current STOP)
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <I2C1_IRQHandler+0x124>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2210      	movs	r2, #16
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d006      	beq.n	8000f5a <I2C1_IRQHandler+0x106>
				I2C1_ICR |= (1 << 4); //Clears the NACKF flag in I2C1_ISR register.
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <I2C1_IRQHandler+0x154>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <I2C1_IRQHandler+0x154>)
 8000f52:	2110      	movs	r1, #16
 8000f54:	430a      	orrs	r2, r1
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	e002      	b.n	8000f60 <I2C1_IRQHandler+0x10c>
				i2c_read_successful_flag = 1; //I2C write was successful
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <I2C1_IRQHandler+0x15c>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
			I2C1_ICR |= (1 << 5); //Clears the STOPF flag in the I2C1_ISR register.
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <I2C1_IRQHandler+0x154>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <I2C1_IRQHandler+0x154>)
 8000f66:	2120      	movs	r1, #32
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	601a      	str	r2, [r3, #0]
			i2c_busy = 0;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <I2C1_IRQHandler+0x14c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40005418 	.word	0x40005418
 8000f7c:	20000098 	.word	0x20000098
 8000f80:	20000094 	.word	0x20000094
 8000f84:	40005428 	.word	0x40005428
 8000f88:	20000074 	.word	0x20000074
 8000f8c:	40005424 	.word	0x40005424
 8000f90:	20000099 	.word	0x20000099
 8000f94:	20000084 	.word	0x20000084
 8000f98:	2000009b 	.word	0x2000009b
 8000f9c:	40005400 	.word	0x40005400
 8000fa0:	2000009a 	.word	0x2000009a
 8000fa4:	40005404 	.word	0x40005404
 8000fa8:	4000541c 	.word	0x4000541c
 8000fac:	2000009d 	.word	0x2000009d
 8000fb0:	2000009c 	.word	0x2000009c

08000fb4 <intialize_GPIO_I2C1>:

void intialize_GPIO_I2C1(){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	//PB7 I2C1 SSDA D4
	//SB16 Connect D5 to A5
	//SB18 Connect D4 to A4

	// Set GPIO registers
	GPIOA_MODER &= ~(0x3 << 10); // 00: Input mode for PA5
 8000fb8:	23a0      	movs	r3, #160	; 0xa0
 8000fba:	05db      	lsls	r3, r3, #23
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	23a0      	movs	r3, #160	; 0xa0
 8000fc0:	05db      	lsls	r3, r3, #23
 8000fc2:	495a      	ldr	r1, [pc, #360]	; (800112c <intialize_GPIO_I2C1+0x178>)
 8000fc4:	400a      	ands	r2, r1
 8000fc6:	601a      	str	r2, [r3, #0]
	GPIOA_MODER &= ~(0x3 << 12); // 00: Input mode for PA6
 8000fc8:	23a0      	movs	r3, #160	; 0xa0
 8000fca:	05db      	lsls	r3, r3, #23
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	23a0      	movs	r3, #160	; 0xa0
 8000fd0:	05db      	lsls	r3, r3, #23
 8000fd2:	4957      	ldr	r1, [pc, #348]	; (8001130 <intialize_GPIO_I2C1+0x17c>)
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	601a      	str	r2, [r3, #0]
	GPIOA_OSPEEDR |= (1 << 11); // 10: High speed mode for PA5
 8000fd8:	4b56      	ldr	r3, [pc, #344]	; (8001134 <intialize_GPIO_I2C1+0x180>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b55      	ldr	r3, [pc, #340]	; (8001134 <intialize_GPIO_I2C1+0x180>)
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	0109      	lsls	r1, r1, #4
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]
	GPIOA_OSPEEDR &= ~(1 << 10);
 8000fe6:	4b53      	ldr	r3, [pc, #332]	; (8001134 <intialize_GPIO_I2C1+0x180>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4b52      	ldr	r3, [pc, #328]	; (8001134 <intialize_GPIO_I2C1+0x180>)
 8000fec:	4952      	ldr	r1, [pc, #328]	; (8001138 <intialize_GPIO_I2C1+0x184>)
 8000fee:	400a      	ands	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]
	GPIOA_OSPEEDR |= (1 << 13); // 10: High speed mode for PA6
 8000ff2:	4b50      	ldr	r3, [pc, #320]	; (8001134 <intialize_GPIO_I2C1+0x180>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	4b4f      	ldr	r3, [pc, #316]	; (8001134 <intialize_GPIO_I2C1+0x180>)
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	0189      	lsls	r1, r1, #6
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]
	GPIOA_OSPEEDR &= ~(1 << 12);
 8001000:	4b4c      	ldr	r3, [pc, #304]	; (8001134 <intialize_GPIO_I2C1+0x180>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b4b      	ldr	r3, [pc, #300]	; (8001134 <intialize_GPIO_I2C1+0x180>)
 8001006:	494d      	ldr	r1, [pc, #308]	; (800113c <intialize_GPIO_I2C1+0x188>)
 8001008:	400a      	ands	r2, r1
 800100a:	601a      	str	r2, [r3, #0]
	GPIOA_OTYPER &= ~(1 << 5); // 0: Output push-pull (reset state)
 800100c:	4b4c      	ldr	r3, [pc, #304]	; (8001140 <intialize_GPIO_I2C1+0x18c>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b4b      	ldr	r3, [pc, #300]	; (8001140 <intialize_GPIO_I2C1+0x18c>)
 8001012:	2120      	movs	r1, #32
 8001014:	438a      	bics	r2, r1
 8001016:	601a      	str	r2, [r3, #0]
	GPIOA_OTYPER &= ~(1 << 6); // 0: Output push-pull (reset state)
 8001018:	4b49      	ldr	r3, [pc, #292]	; (8001140 <intialize_GPIO_I2C1+0x18c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b48      	ldr	r3, [pc, #288]	; (8001140 <intialize_GPIO_I2C1+0x18c>)
 800101e:	2140      	movs	r1, #64	; 0x40
 8001020:	438a      	bics	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
	GPIOA_PUPDR &= ~(0x3 << 10); // 00: No pull-up, pull-down PA5 (floating)
 8001024:	4b47      	ldr	r3, [pc, #284]	; (8001144 <intialize_GPIO_I2C1+0x190>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b46      	ldr	r3, [pc, #280]	; (8001144 <intialize_GPIO_I2C1+0x190>)
 800102a:	4940      	ldr	r1, [pc, #256]	; (800112c <intialize_GPIO_I2C1+0x178>)
 800102c:	400a      	ands	r2, r1
 800102e:	601a      	str	r2, [r3, #0]
	GPIOA_PUPDR &= ~(0x3 << 12); // 00: No pull-up, pull-down PA6 (floating)
 8001030:	4b44      	ldr	r3, [pc, #272]	; (8001144 <intialize_GPIO_I2C1+0x190>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b43      	ldr	r3, [pc, #268]	; (8001144 <intialize_GPIO_I2C1+0x190>)
 8001036:	493e      	ldr	r1, [pc, #248]	; (8001130 <intialize_GPIO_I2C1+0x17c>)
 8001038:	400a      	ands	r2, r1
 800103a:	601a      	str	r2, [r3, #0]

	// Set Port B
	GPIOB_MODER |= (1 << 13); // 10: Alternate function mode for PB6
 800103c:	4b42      	ldr	r3, [pc, #264]	; (8001148 <intialize_GPIO_I2C1+0x194>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b41      	ldr	r3, [pc, #260]	; (8001148 <intialize_GPIO_I2C1+0x194>)
 8001042:	2180      	movs	r1, #128	; 0x80
 8001044:	0189      	lsls	r1, r1, #6
 8001046:	430a      	orrs	r2, r1
 8001048:	601a      	str	r2, [r3, #0]
	GPIOB_MODER &= ~(1 << 12);
 800104a:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <intialize_GPIO_I2C1+0x194>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4b3e      	ldr	r3, [pc, #248]	; (8001148 <intialize_GPIO_I2C1+0x194>)
 8001050:	493a      	ldr	r1, [pc, #232]	; (800113c <intialize_GPIO_I2C1+0x188>)
 8001052:	400a      	ands	r2, r1
 8001054:	601a      	str	r2, [r3, #0]
	GPIOB_MODER |= (1 << 15); // 10: Alternate function mode for PB7
 8001056:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <intialize_GPIO_I2C1+0x194>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <intialize_GPIO_I2C1+0x194>)
 800105c:	2180      	movs	r1, #128	; 0x80
 800105e:	0209      	lsls	r1, r1, #8
 8001060:	430a      	orrs	r2, r1
 8001062:	601a      	str	r2, [r3, #0]
	GPIOB_MODER &= ~(1 << 14);
 8001064:	4b38      	ldr	r3, [pc, #224]	; (8001148 <intialize_GPIO_I2C1+0x194>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b37      	ldr	r3, [pc, #220]	; (8001148 <intialize_GPIO_I2C1+0x194>)
 800106a:	4938      	ldr	r1, [pc, #224]	; (800114c <intialize_GPIO_I2C1+0x198>)
 800106c:	400a      	ands	r2, r1
 800106e:	601a      	str	r2, [r3, #0]
	GPIOB_OSPEEDR |= (1 << 13); // 10: High speed mode for PB6
 8001070:	4b37      	ldr	r3, [pc, #220]	; (8001150 <intialize_GPIO_I2C1+0x19c>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b36      	ldr	r3, [pc, #216]	; (8001150 <intialize_GPIO_I2C1+0x19c>)
 8001076:	2180      	movs	r1, #128	; 0x80
 8001078:	0189      	lsls	r1, r1, #6
 800107a:	430a      	orrs	r2, r1
 800107c:	601a      	str	r2, [r3, #0]
	GPIOB_OSPEEDR &= ~(1 << 12);
 800107e:	4b34      	ldr	r3, [pc, #208]	; (8001150 <intialize_GPIO_I2C1+0x19c>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4b33      	ldr	r3, [pc, #204]	; (8001150 <intialize_GPIO_I2C1+0x19c>)
 8001084:	492d      	ldr	r1, [pc, #180]	; (800113c <intialize_GPIO_I2C1+0x188>)
 8001086:	400a      	ands	r2, r1
 8001088:	601a      	str	r2, [r3, #0]
	GPIOB_OSPEEDR |= (1 << 15); // 10: High speed mode for PB7
 800108a:	4b31      	ldr	r3, [pc, #196]	; (8001150 <intialize_GPIO_I2C1+0x19c>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4b30      	ldr	r3, [pc, #192]	; (8001150 <intialize_GPIO_I2C1+0x19c>)
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	0209      	lsls	r1, r1, #8
 8001094:	430a      	orrs	r2, r1
 8001096:	601a      	str	r2, [r3, #0]
	GPIOB_OSPEEDR &= ~(1 << 14);
 8001098:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <intialize_GPIO_I2C1+0x19c>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <intialize_GPIO_I2C1+0x19c>)
 800109e:	492b      	ldr	r1, [pc, #172]	; (800114c <intialize_GPIO_I2C1+0x198>)
 80010a0:	400a      	ands	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]
	GPIOB_OTYPER |= (1 << 6); // 1: Open Drain (MOSFET) - Line can be released
 80010a4:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <intialize_GPIO_I2C1+0x1a0>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <intialize_GPIO_I2C1+0x1a0>)
 80010aa:	2140      	movs	r1, #64	; 0x40
 80010ac:	430a      	orrs	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
	GPIOB_OTYPER |= (1 << 7); // 1: Open Drain (MOSFET)
 80010b0:	4b28      	ldr	r3, [pc, #160]	; (8001154 <intialize_GPIO_I2C1+0x1a0>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <intialize_GPIO_I2C1+0x1a0>)
 80010b6:	2180      	movs	r1, #128	; 0x80
 80010b8:	430a      	orrs	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]
	GPIOB_PUPDR &= ~(0x3 << 12); // Clear bits 11 and 12 PB6
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <intialize_GPIO_I2C1+0x1a4>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b25      	ldr	r3, [pc, #148]	; (8001158 <intialize_GPIO_I2C1+0x1a4>)
 80010c2:	491b      	ldr	r1, [pc, #108]	; (8001130 <intialize_GPIO_I2C1+0x17c>)
 80010c4:	400a      	ands	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
	GPIOB_PUPDR &= ~(0x3 << 14); // Clear bits 13 and 14 PB7
 80010c8:	4b23      	ldr	r3, [pc, #140]	; (8001158 <intialize_GPIO_I2C1+0x1a4>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <intialize_GPIO_I2C1+0x1a4>)
 80010ce:	4923      	ldr	r1, [pc, #140]	; (800115c <intialize_GPIO_I2C1+0x1a8>)
 80010d0:	400a      	ands	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]
	GPIOB_PUPDR |= (1 << 12); // 01: Pull-up mode for PB6
 80010d4:	4b20      	ldr	r3, [pc, #128]	; (8001158 <intialize_GPIO_I2C1+0x1a4>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <intialize_GPIO_I2C1+0x1a4>)
 80010da:	2180      	movs	r1, #128	; 0x80
 80010dc:	0149      	lsls	r1, r1, #5
 80010de:	430a      	orrs	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]
	GPIOB_PUPDR &= ~(1 << 13);
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <intialize_GPIO_I2C1+0x1a4>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <intialize_GPIO_I2C1+0x1a4>)
 80010e8:	491d      	ldr	r1, [pc, #116]	; (8001160 <intialize_GPIO_I2C1+0x1ac>)
 80010ea:	400a      	ands	r2, r1
 80010ec:	601a      	str	r2, [r3, #0]
	GPIOB_PUPDR |= (1 << 14); // 01: Pull-up mode for PB7
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <intialize_GPIO_I2C1+0x1a4>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <intialize_GPIO_I2C1+0x1a4>)
 80010f4:	2180      	movs	r1, #128	; 0x80
 80010f6:	01c9      	lsls	r1, r1, #7
 80010f8:	430a      	orrs	r2, r1
 80010fa:	601a      	str	r2, [r3, #0]
	GPIOB_PUPDR &= ~(1 << 15);
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <intialize_GPIO_I2C1+0x1a4>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <intialize_GPIO_I2C1+0x1a4>)
 8001102:	4918      	ldr	r1, [pc, #96]	; (8001164 <intialize_GPIO_I2C1+0x1b0>)
 8001104:	400a      	ands	r2, r1
 8001106:	601a      	str	r2, [r3, #0]
	GPIOB_AFRL |= (0x1 << 24); //Alternate function 1 for PB6
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <intialize_GPIO_I2C1+0x1b4>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <intialize_GPIO_I2C1+0x1b4>)
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	0449      	lsls	r1, r1, #17
 8001112:	430a      	orrs	r2, r1
 8001114:	601a      	str	r2, [r3, #0]
	GPIOB_AFRL |= (0x1 << 28); //Alternate function 1 for PB7
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <intialize_GPIO_I2C1+0x1b4>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <intialize_GPIO_I2C1+0x1b4>)
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	0549      	lsls	r1, r1, #21
 8001120:	430a      	orrs	r2, r1
 8001122:	601a      	str	r2, [r3, #0]
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	fffff3ff 	.word	0xfffff3ff
 8001130:	ffffcfff 	.word	0xffffcfff
 8001134:	50000008 	.word	0x50000008
 8001138:	fffffbff 	.word	0xfffffbff
 800113c:	ffffefff 	.word	0xffffefff
 8001140:	50000004 	.word	0x50000004
 8001144:	5000000c 	.word	0x5000000c
 8001148:	50000400 	.word	0x50000400
 800114c:	ffffbfff 	.word	0xffffbfff
 8001150:	50000408 	.word	0x50000408
 8001154:	50000404 	.word	0x50000404
 8001158:	5000040c 	.word	0x5000040c
 800115c:	ffff3fff 	.word	0xffff3fff
 8001160:	ffffdfff 	.word	0xffffdfff
 8001164:	ffff7fff 	.word	0xffff7fff
 8001168:	50000420 	.word	0x50000420

0800116c <initialize_I2C1>:

void initialize_I2C1(){
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	// Set I2C registers
	I2C1_CR1 &= ~(1 << 0); // PE=0 Disable peripheral
 8001170:	4b30      	ldr	r3, [pc, #192]	; (8001234 <initialize_I2C1+0xc8>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <initialize_I2C1+0xc8>)
 8001176:	2101      	movs	r1, #1
 8001178:	438a      	bics	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
	I2C1_CR1 |= (1 << 8); // DNF=0001 Enable digital noise filter
 800117c:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <initialize_I2C1+0xc8>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <initialize_I2C1+0xc8>)
 8001182:	2180      	movs	r1, #128	; 0x80
 8001184:	0049      	lsls	r1, r1, #1
 8001186:	430a      	orrs	r2, r1
 8001188:	601a      	str	r2, [r3, #0]
	I2C1_TIMINGR |= (0x3 << 28); // PRESC=3
 800118a:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <initialize_I2C1+0xcc>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <initialize_I2C1+0xcc>)
 8001190:	21c0      	movs	r1, #192	; 0xc0
 8001192:	0589      	lsls	r1, r1, #22
 8001194:	430a      	orrs	r2, r1
 8001196:	601a      	str	r2, [r3, #0]
	I2C1_TIMINGR |= (0x4 << 20); // SCLDEL=4
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <initialize_I2C1+0xcc>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b26      	ldr	r3, [pc, #152]	; (8001238 <initialize_I2C1+0xcc>)
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	03c9      	lsls	r1, r1, #15
 80011a2:	430a      	orrs	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]
	I2C1_TIMINGR |= (0x2 << 16); // SCLDADEL=2
 80011a6:	4b24      	ldr	r3, [pc, #144]	; (8001238 <initialize_I2C1+0xcc>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4b23      	ldr	r3, [pc, #140]	; (8001238 <initialize_I2C1+0xcc>)
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	0289      	lsls	r1, r1, #10
 80011b0:	430a      	orrs	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]
	I2C1_TIMINGR |= (0xC3 << 8); // SCLH=0xC3 SCL High Period (Master Mode)
 80011b4:	4b20      	ldr	r3, [pc, #128]	; (8001238 <initialize_I2C1+0xcc>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <initialize_I2C1+0xcc>)
 80011ba:	21c3      	movs	r1, #195	; 0xc3
 80011bc:	0209      	lsls	r1, r1, #8
 80011be:	430a      	orrs	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]
	I2C1_TIMINGR |= (0xC7 << 0); // SCLL=0xC7 SCL Low Period (Master Mode)
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <initialize_I2C1+0xcc>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <initialize_I2C1+0xcc>)
 80011c8:	21c7      	movs	r1, #199	; 0xc7
 80011ca:	430a      	orrs	r2, r1
 80011cc:	601a      	str	r2, [r3, #0]
	I2C1_CR1 &= ~(1 << 17); // Clock Stretching Enabled (Default)
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <initialize_I2C1+0xc8>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <initialize_I2C1+0xc8>)
 80011d4:	4919      	ldr	r1, [pc, #100]	; (800123c <initialize_I2C1+0xd0>)
 80011d6:	400a      	ands	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
	I2C1_CR1 |= (1 << 4); // NACKIE=1: Not acknowledge received Interrupt enable
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <initialize_I2C1+0xc8>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <initialize_I2C1+0xc8>)
 80011e0:	2110      	movs	r1, #16
 80011e2:	430a      	orrs	r2, r1
 80011e4:	601a      	str	r2, [r3, #0]
	I2C1_CR1 |= (1 << 5); //STOPIE: Stop detection Interrupt enable
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <initialize_I2C1+0xc8>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <initialize_I2C1+0xc8>)
 80011ec:	2120      	movs	r1, #32
 80011ee:	430a      	orrs	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]
	I2C1_CR1 |= (1 << 0); // PE=1 Peripheral Enable
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <initialize_I2C1+0xc8>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <initialize_I2C1+0xc8>)
 80011f8:	2101      	movs	r1, #1
 80011fa:	430a      	orrs	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
	I2C1_CR2 &= ~(1 << 11); // 7-bit Addressing mode (default)
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <initialize_I2C1+0xd4>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <initialize_I2C1+0xd4>)
 8001204:	490f      	ldr	r1, [pc, #60]	; (8001244 <initialize_I2C1+0xd8>)
 8001206:	400a      	ands	r2, r1
 8001208:	601a      	str	r2, [r3, #0]
	//I2C1_CR2 |= (data_size << 16); //NBYTES=data_size Number of bytes to be sent
	//I2C1_CR2 |= (1 << 14); //STOP=1 Stop Generation after current byte transfer
	//I2C1_CR2 &= ~(1 << 10); //RD_WRN=0 Master Requests a Write Transfer
	//I2C1_CR2 |= (1 << 10); //RD_WRN=1 Master Requests a Read Transfer
	//I2C1_CR2 |= (1 << 25); //AUTOEND=1 Stop Condition is Automatically sent after NBYTES
	I2C1_CR2 |= (0x51 << 1); //SADD[7:1] Slave Address for 7bit addressing
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <initialize_I2C1+0xd4>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <initialize_I2C1+0xd4>)
 8001210:	21a2      	movs	r1, #162	; 0xa2
 8001212:	430a      	orrs	r2, r1
 8001214:	601a      	str	r2, [r3, #0]
	I2C1_CR1 |= (1 << 1); //TXIE: TX Interrupt enable TXDR should be filled
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <initialize_I2C1+0xc8>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <initialize_I2C1+0xc8>)
 800121c:	2102      	movs	r1, #2
 800121e:	430a      	orrs	r2, r1
 8001220:	601a      	str	r2, [r3, #0]
	I2C1_CR1 |= (1 << 2); //RXIE Interrupt enable RXDR should be read
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <initialize_I2C1+0xc8>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4b03      	ldr	r3, [pc, #12]	; (8001234 <initialize_I2C1+0xc8>)
 8001228:	2104      	movs	r1, #4
 800122a:	430a      	orrs	r2, r1
 800122c:	601a      	str	r2, [r3, #0]
	//I2C1_CR1 |= (1 << 15); //RXDMAEN: DMA reception requests enable 1: DMA mode enabled for reception
	//I2C1_CR1 |= (1 << 14); //TXDMAEN: DMA transmission requests enable 1: DMA mode enabled for transmission
	//I2C1_CR2 |= (1 << 13); //START
}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40005400 	.word	0x40005400
 8001238:	40005410 	.word	0x40005410
 800123c:	fffdffff 	.word	0xfffdffff
 8001240:	40005404 	.word	0x40005404
 8001244:	fffff7ff 	.word	0xfffff7ff

08001248 <initialize_LPTIM>:

void LPTIM1_Disable(){
	LPTIM_CR &= ~(1 << 0); //0:LPTIM is disabled
}

void initialize_LPTIM(){
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	//For 1Hz, 128 * 255, With LSE clock LPTIM_ARR = 0x00FF;

	LPTIM_IER |= (1 << 1); //Bit 1 ARRMIE: Autoreload match Interrupt Enable
 800124c:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <initialize_LPTIM+0xb0>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <initialize_LPTIM+0xb0>)
 8001252:	2102      	movs	r1, #2
 8001254:	430a      	orrs	r2, r1
 8001256:	601a      	str	r2, [r3, #0]
	//The LPTIM_CFGR register must only be modified when the LPTIM is disabled (ENABLE bit reset to ‘0’).
	LPTIM_CFGR &= ~(1 << 23); //COUNTMODE: counter mode enabled 0: the counter is incremented following each internal clock pulse
 8001258:	4b28      	ldr	r3, [pc, #160]	; (80012fc <initialize_LPTIM+0xb4>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <initialize_LPTIM+0xb4>)
 800125e:	4928      	ldr	r1, [pc, #160]	; (8001300 <initialize_LPTIM+0xb8>)
 8001260:	400a      	ands	r2, r1
 8001262:	601a      	str	r2, [r3, #0]
	LPTIM_CFGR &= ~(1 << 22); //PRELOAD: Registers update mode 0: Registers are updated after each APB bus write access
 8001264:	4b25      	ldr	r3, [pc, #148]	; (80012fc <initialize_LPTIM+0xb4>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <initialize_LPTIM+0xb4>)
 800126a:	4926      	ldr	r1, [pc, #152]	; (8001304 <initialize_LPTIM+0xbc>)
 800126c:	400a      	ands	r2, r1
 800126e:	601a      	str	r2, [r3, #0]
	LPTIM_CFGR &= ~(1 << 21); //WAVPOL: Waveform shape polarity 0: The LPTIM output reflects the compare results between LPTIM_CNT and LPTIM_CMP registers
 8001270:	4b22      	ldr	r3, [pc, #136]	; (80012fc <initialize_LPTIM+0xb4>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <initialize_LPTIM+0xb4>)
 8001276:	4924      	ldr	r1, [pc, #144]	; (8001308 <initialize_LPTIM+0xc0>)
 8001278:	400a      	ands	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
	LPTIM_CFGR &= ~(1 << 20); //WAVE: Waveform shape WAVE bit to ‘0’ forces the LPTIM to generate either a PWM waveform
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <initialize_LPTIM+0xb4>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <initialize_LPTIM+0xb4>)
 8001282:	4922      	ldr	r1, [pc, #136]	; (800130c <initialize_LPTIM+0xc4>)
 8001284:	400a      	ands	r2, r1
 8001286:	601a      	str	r2, [r3, #0]
	LPTIM_CFGR &= ~(1 << 19); //TIMOUT: Timeout enable 0: A trigger event arriving when the timer is already started will be ignored
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <initialize_LPTIM+0xb4>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <initialize_LPTIM+0xb4>)
 800128e:	4920      	ldr	r1, [pc, #128]	; (8001310 <initialize_LPTIM+0xc8>)
 8001290:	400a      	ands	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
	LPTIM_CFGR &= ~(0x03 << 17); //TRIGEN[1:0]: Trigger enable and polarity 00: software trigger (counting start is initiated by software)
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <initialize_LPTIM+0xb4>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <initialize_LPTIM+0xb4>)
 800129a:	491e      	ldr	r1, [pc, #120]	; (8001314 <initialize_LPTIM+0xcc>)
 800129c:	400a      	ands	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
	LPTIM_CFGR |= (0x07 << 9); //PRESC[2:0]: Clock prescaler, 111: /128
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <initialize_LPTIM+0xb4>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <initialize_LPTIM+0xb4>)
 80012a6:	21e0      	movs	r1, #224	; 0xe0
 80012a8:	0109      	lsls	r1, r1, #4
 80012aa:	430a      	orrs	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]
	//LPTIM_CFGR |= (0x01 << 6); //Bits 7:6 TRGFLT[1:0]: Configurable digital filter for trigger
	//LPTIM_CFGR |= (0x01 << 3); //Bits 4:3 CKFLT[1:0]: Configurable digital filter for external clock
	LPTIM_CFGR &= ~(1 << 0); //CKSEL: Clock selector 0: LPTIM is clocked by internal clock source (APB clock or any of the embedded oscillators)
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <initialize_LPTIM+0xb4>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <initialize_LPTIM+0xb4>)
 80012b4:	2101      	movs	r1, #1
 80012b6:	438a      	bics	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]
	//LPTIM_CR |= (1 << 0); //ENABLE: LPTIM enable 1:LPTIM is enabled
	LPTIM_CR |= BIT2; //CNTSTRT: Timer start in Continuous mode - Set before ENABLE
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <initialize_LPTIM+0xd0>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <initialize_LPTIM+0xd0>)
 80012c0:	2104      	movs	r1, #4
 80012c2:	430a      	orrs	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
	LPTIM_CR |= (1 << 0); //ENABLE: LPTIM enable 1:LPTIM is enabled
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <initialize_LPTIM+0xd0>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <initialize_LPTIM+0xd0>)
 80012cc:	2101      	movs	r1, #1
 80012ce:	430a      	orrs	r2, r1
 80012d0:	601a      	str	r2, [r3, #0]
	//LPTIM_ARR &= (0xFF); //Clear ARR[15:0]: Auto reload value
	LPTIM_ARR = 0x00FF; //RR[15:0]: Auto reload value
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <initialize_LPTIM+0xd4>)
 80012d4:	22ff      	movs	r2, #255	; 0xff
 80012d6:	601a      	str	r2, [r3, #0]
	while ((LPTIM_ISR & (1 << 4))==0); //Bit 4 ARROK: Autoreload register update OK
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <initialize_LPTIM+0xd8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2210      	movs	r2, #16
 80012e0:	4013      	ands	r3, r2
 80012e2:	d0fa      	beq.n	80012da <initialize_LPTIM+0x92>
	LPTIM_ICR |= (1 << 4); //ARROKCF: Autoreload register update OK clear flag. Writing 1 to this bit clears the ARROK flag in the LPTIM_ISR register
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <initialize_LPTIM+0xdc>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <initialize_LPTIM+0xdc>)
 80012ea:	2110      	movs	r1, #16
 80012ec:	430a      	orrs	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]
	//LPTIM_CR |= (1 << 0); //ENABLE: LPTIM enable 1:LPTIM is enabled
	//LPTIM_CR |= (1 << 2); //CNTSTRT: Timer start in Continuous mode This bit can be set only when the LPTIM is enabled. It will be automatically reset by hardware.
}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	40007c08 	.word	0x40007c08
 80012fc:	40007c0c 	.word	0x40007c0c
 8001300:	ff7fffff 	.word	0xff7fffff
 8001304:	ffbfffff 	.word	0xffbfffff
 8001308:	ffdfffff 	.word	0xffdfffff
 800130c:	ffefffff 	.word	0xffefffff
 8001310:	fff7ffff 	.word	0xfff7ffff
 8001314:	fff9ffff 	.word	0xfff9ffff
 8001318:	40007c10 	.word	0x40007c10
 800131c:	40007c18 	.word	0x40007c18
 8001320:	40007c00 	.word	0x40007c00
 8001324:	40007c04 	.word	0x40007c04

08001328 <intialize_EXTI_RTC>:
 */

#include <stdint.h>
#include "NVIC.h"

void intialize_EXTI_RTC(){
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	EXTI_IMR |= BIT17;
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <intialize_EXTI_RTC+0x28>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <intialize_EXTI_RTC+0x28>)
 8001332:	2180      	movs	r1, #128	; 0x80
 8001334:	0289      	lsls	r1, r1, #10
 8001336:	430a      	orrs	r2, r1
 8001338:	601a      	str	r2, [r3, #0]
	EXTI_RTSR |= BIT17;
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <intialize_EXTI_RTC+0x2c>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4b05      	ldr	r3, [pc, #20]	; (8001354 <intialize_EXTI_RTC+0x2c>)
 8001340:	2180      	movs	r1, #128	; 0x80
 8001342:	0289      	lsls	r1, r1, #10
 8001344:	430a      	orrs	r2, r1
 8001346:	601a      	str	r2, [r3, #0]
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	40010400 	.word	0x40010400
 8001354:	40010408 	.word	0x40010408

08001358 <initialize_NVIC_interrupt_priorities>:

void initialize_NVIC_interrupt_priorities(){
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	NVIC_IPR7 |= (0xFF << 8); //PRI29 Sets the AES_RNG_LPUART1 interrupt priority
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <initialize_NVIC_interrupt_priorities+0x34>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <initialize_NVIC_interrupt_priorities+0x34>)
 8001362:	21ff      	movs	r1, #255	; 0xff
 8001364:	0209      	lsls	r1, r1, #8
 8001366:	430a      	orrs	r2, r1
 8001368:	601a      	str	r2, [r3, #0]
	NVIC_IPR5 |= (0xBF << 24); //PRI23 Sets the I2C1 interrupt priority
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <initialize_NVIC_interrupt_priorities+0x38>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <initialize_NVIC_interrupt_priorities+0x38>)
 8001370:	21bf      	movs	r1, #191	; 0xbf
 8001372:	0609      	lsls	r1, r1, #24
 8001374:	430a      	orrs	r2, r1
 8001376:	601a      	str	r2, [r3, #0]
	//NVIC_IPR2 |= (0xBE << 24); //PRI11 Sets the DMA_CH47 interrupt priority
	//NVIC_IPR7 |= (0xBF << 0); //PRI28 Sets the USART2 interrupt priority
	NVIC_IPR0 |= (0x7F << 16); //PRI2 Sets the RTC interrupt priority
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <initialize_NVIC_interrupt_priorities+0x3c>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <initialize_NVIC_interrupt_priorities+0x3c>)
 800137e:	21fe      	movs	r1, #254	; 0xfe
 8001380:	03c9      	lsls	r1, r1, #15
 8001382:	430a      	orrs	r2, r1
 8001384:	601a      	str	r2, [r3, #0]
}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	e000e41c 	.word	0xe000e41c
 8001390:	e000e414 	.word	0xe000e414
 8001394:	e000e400 	.word	0xe000e400

08001398 <initialize_NVIC_LPTIM1>:

void initialize_NVIC_LPTIM1(){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	//Set NVIC interrupt registers
	NVIC_ISER |= (1<<(13%32)); //Enable LPTIM1_IRQHandler
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <initialize_NVIC_LPTIM1+0x18>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <initialize_NVIC_LPTIM1+0x18>)
 80013a2:	2180      	movs	r1, #128	; 0x80
 80013a4:	0189      	lsls	r1, r1, #6
 80013a6:	430a      	orrs	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]
}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <intialize_NVIC_AES_RNG_LPUART1>:
void initialize_NVIC_PendSV(){
	//Set NVIC interrupt registers
	NVIC_ISER |= (1<<(13%32)); //Enable LPTIM1_IRQHandler
}

void intialize_NVIC_AES_RNG_LPUART1(){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	//Set NVIC interrupt registers
	NVIC_ISER |= (1<<(29%32)); //Enable AES_RNG_LPUART1_IRQHandler
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <intialize_NVIC_AES_RNG_LPUART1+0x18>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <intialize_NVIC_AES_RNG_LPUART1+0x18>)
 80013be:	2180      	movs	r1, #128	; 0x80
 80013c0:	0589      	lsls	r1, r1, #22
 80013c2:	430a      	orrs	r2, r1
 80013c4:	601a      	str	r2, [r3, #0]
}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	e000e100 	.word	0xe000e100

080013d0 <Set_Pending_AES_RNG_LPUART1_Interrupt>:

void Set_Pending_AES_RNG_LPUART1_Interrupt(){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	NVIC_ISPR |= (BIT29); //Forces interrupts into the pending state
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <Set_Pending_AES_RNG_LPUART1_Interrupt+0x18>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <Set_Pending_AES_RNG_LPUART1_Interrupt+0x18>)
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	0589      	lsls	r1, r1, #22
 80013de:	430a      	orrs	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]
}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	e000e200 	.word	0xe000e200

080013ec <Clear_Pending_AES_RNG_LPUART1_Interrupt>:

void Clear_Pending_AES_RNG_LPUART1_Interrupt(){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	NVIC_ICPR |= (BIT29); //Removes the pending state from interrupts
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <Clear_Pending_AES_RNG_LPUART1_Interrupt+0x18>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <Clear_Pending_AES_RNG_LPUART1_Interrupt+0x18>)
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	0589      	lsls	r1, r1, #22
 80013fa:	430a      	orrs	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]
}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	e000e280 	.word	0xe000e280

08001408 <PendSv_Clear>:

void PendSv_Set(){
	SCB_ICSR |= BIT28; //PENDSVSET
}

void PendSv_Clear(){
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	SCB_ICSR |= BIT27; //PENDSVSCLR
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <PendSv_Clear+0x18>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <PendSv_Clear+0x18>)
 8001412:	2180      	movs	r1, #128	; 0x80
 8001414:	0509      	lsls	r1, r1, #20
 8001416:	430a      	orrs	r2, r1
 8001418:	601a      	str	r2, [r3, #0]
}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	e000ed04 	.word	0xe000ed04

08001424 <intialize_NVIC_I2C1>:

void intialize_NVIC_I2C1(){
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	//Set NVIC interrupt registers
	NVIC_ISER |= (1<<(23%32)); //Enable I2C1_IRQHandler
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <intialize_NVIC_I2C1+0x18>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <intialize_NVIC_I2C1+0x18>)
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	0409      	lsls	r1, r1, #16
 8001432:	430a      	orrs	r2, r1
 8001434:	601a      	str	r2, [r3, #0]
}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	e000e100 	.word	0xe000e100

08001440 <intialize_NVIC_USART2>:

void intialize_NVIC_USART2(){
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	//Set NVIC interrupt registers
	NVIC_ISER |= (1<<(28%32)); //Enable USART2_IRQHandler - Transmission using DMA, transfer complete: Software waits until TC=1
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <intialize_NVIC_USART2+0x18>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <intialize_NVIC_USART2+0x18>)
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	0549      	lsls	r1, r1, #21
 800144e:	430a      	orrs	r2, r1
 8001450:	601a      	str	r2, [r3, #0]
}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	e000e100 	.word	0xe000e100

0800145c <intialize_NVIC_DMA_CH47>:

void intialize_NVIC_DMA_CH47(){
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	NVIC_ISER |= (1<<(11%32)); //Enable DMA1_Channel4_7_IRQHandler - Reception using DMA transfer complete: TCIF=1 in DMA_ISR
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <intialize_NVIC_DMA_CH47+0x18>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <intialize_NVIC_DMA_CH47+0x18>)
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	0109      	lsls	r1, r1, #4
 800146a:	430a      	orrs	r2, r1
 800146c:	601a      	str	r2, [r3, #0]
}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	e000e100 	.word	0xe000e100

08001478 <intialize_NVIC_RTC>:

void intialize_NVIC_RTC(){
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	//Set NVIC interrupt registers
	NVIC_ISER |= (1<<(2%32)); //Enable RTC_IRQHandler
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <intialize_NVIC_RTC+0x18>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <intialize_NVIC_RTC+0x18>)
 8001482:	2104      	movs	r1, #4
 8001484:	430a      	orrs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]
}
 8001488:	46c0      	nop			; (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	e000e100 	.word	0xe000e100

08001494 <global_message_queue_combine>:
uint8_t EEPROM_read_message_queue[EEPROM_READ_MESSAGE_QUEUE_SIZE] = {0};
uint8_t EEPROM_read_msg_queue_processing_index = 0; //Tracks the position of incoming messages to be processed
uint8_t EEPROM_read_msg_queue_storage_index = 0; //Tracks index where incoming messages are to be stored
uint8_t EEPROM_read_msg_queue_full_flag = 0;

void global_message_queue_combine(){
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	//Move messages from sensor queue to global queue
	while(!sensor_message_queue_is_empty() && (global_msg_queue_full_flag == 0)){
 8001498:	e005      	b.n	80014a6 <global_message_queue_combine+0x12>
		global_message_queue_add(sensor_message_queue_get());
 800149a:	f000 f8cf 	bl	800163c <sensor_message_queue_get>
 800149e:	0003      	movs	r3, r0
 80014a0:	0018      	movs	r0, r3
 80014a2:	f000 f92b 	bl	80016fc <global_message_queue_add>
	while(!sensor_message_queue_is_empty() && (global_msg_queue_full_flag == 0)){
 80014a6:	f000 f851 	bl	800154c <sensor_message_queue_is_empty>
 80014aa:	1e03      	subs	r3, r0, #0
 80014ac:	d10a      	bne.n	80014c4 <global_message_queue_combine+0x30>
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <global_message_queue_combine+0x84>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f1      	beq.n	800149a <global_message_queue_combine+0x6>
	}

	//Move messages from server queue to global queue
	while(!server_message_queue_is_empty() && (global_msg_queue_full_flag == 0)){
 80014b6:	e005      	b.n	80014c4 <global_message_queue_combine+0x30>
		global_message_queue_add(server_message_queue_get());
 80014b8:	f000 f8d8 	bl	800166c <server_message_queue_get>
 80014bc:	0003      	movs	r3, r0
 80014be:	0018      	movs	r0, r3
 80014c0:	f000 f91c 	bl	80016fc <global_message_queue_add>
	while(!server_message_queue_is_empty() && (global_msg_queue_full_flag == 0)){
 80014c4:	f000 f85a 	bl	800157c <server_message_queue_is_empty>
 80014c8:	1e03      	subs	r3, r0, #0
 80014ca:	d10a      	bne.n	80014e2 <global_message_queue_combine+0x4e>
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <global_message_queue_combine+0x84>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f1      	beq.n	80014b8 <global_message_queue_combine+0x24>
	}

	//Move messages from internal queue to global queue
	while(!internal_message_queue_is_empty() && (global_msg_queue_full_flag == 0)){
 80014d4:	e005      	b.n	80014e2 <global_message_queue_combine+0x4e>
		global_message_queue_add(internal_message_queue_get());
 80014d6:	f000 f8e1 	bl	800169c <internal_message_queue_get>
 80014da:	0003      	movs	r3, r0
 80014dc:	0018      	movs	r0, r3
 80014de:	f000 f90d 	bl	80016fc <global_message_queue_add>
	while(!internal_message_queue_is_empty() && (global_msg_queue_full_flag == 0)){
 80014e2:	f000 f863 	bl	80015ac <internal_message_queue_is_empty>
 80014e6:	1e03      	subs	r3, r0, #0
 80014e8:	d10a      	bne.n	8001500 <global_message_queue_combine+0x6c>
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <global_message_queue_combine+0x84>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f1      	beq.n	80014d6 <global_message_queue_combine+0x42>
	}

	//Move messages from EEPROM read queue to global queue
	while(!EEPROM_read_message_queue_is_empty() && (global_msg_queue_full_flag == 0)){
 80014f2:	e005      	b.n	8001500 <global_message_queue_combine+0x6c>
		global_message_queue_add(EEPROM_read_message_queue_get());
 80014f4:	f000 f8ea 	bl	80016cc <EEPROM_read_message_queue_get>
 80014f8:	0003      	movs	r3, r0
 80014fa:	0018      	movs	r0, r3
 80014fc:	f000 f8fe 	bl	80016fc <global_message_queue_add>
	while(!EEPROM_read_message_queue_is_empty() && (global_msg_queue_full_flag == 0)){
 8001500:	f000 f86c 	bl	80015dc <EEPROM_read_message_queue_is_empty>
 8001504:	1e03      	subs	r3, r0, #0
 8001506:	d103      	bne.n	8001510 <global_message_queue_combine+0x7c>
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <global_message_queue_combine+0x84>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f1      	beq.n	80014f4 <global_message_queue_combine+0x60>
	}
}
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	200001be 	.word	0x200001be

0800151c <global_message_queue_is_empty>:

uint8_t global_message_queue_is_empty(){
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	if((global_msg_queue_storage_index == global_msg_queue_processing_index) &&
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <global_message_queue_is_empty+0x24>)
 8001522:	781a      	ldrb	r2, [r3, #0]
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <global_message_queue_is_empty+0x28>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d105      	bne.n	8001538 <global_message_queue_is_empty+0x1c>
			global_msg_queue_full_flag == 0){
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <global_message_queue_is_empty+0x2c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
	if((global_msg_queue_storage_index == global_msg_queue_processing_index) &&
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <global_message_queue_is_empty+0x1c>
		return 1;
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <global_message_queue_is_empty+0x1e>
	} else {
		return 0;
 8001538:	2300      	movs	r3, #0
	}
}
 800153a:	0018      	movs	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200001bd 	.word	0x200001bd
 8001544:	200001bc 	.word	0x200001bc
 8001548:	200001be 	.word	0x200001be

0800154c <sensor_message_queue_is_empty>:

uint8_t sensor_message_queue_is_empty(){
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
    if((sensor_msg_queue_storage_index == sensor_msg_queue_processing_index) &&
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <sensor_message_queue_is_empty+0x24>)
 8001552:	781a      	ldrb	r2, [r3, #0]
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <sensor_message_queue_is_empty+0x28>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d105      	bne.n	8001568 <sensor_message_queue_is_empty+0x1c>
            sensor_msg_queue_full_flag == 0){
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <sensor_message_queue_is_empty+0x2c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
    if((sensor_msg_queue_storage_index == sensor_msg_queue_processing_index) &&
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <sensor_message_queue_is_empty+0x1c>
        return 1;
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <sensor_message_queue_is_empty+0x1e>
    } else {
        return 0;
 8001568:	2300      	movs	r3, #0
    }
}
 800156a:	0018      	movs	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200002d9 	.word	0x200002d9
 8001574:	200002d8 	.word	0x200002d8
 8001578:	200002da 	.word	0x200002da

0800157c <server_message_queue_is_empty>:

uint8_t server_message_queue_is_empty(){
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
    if((server_msg_queue_storage_index == server_msg_queue_processing_index) &&
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <server_message_queue_is_empty+0x24>)
 8001582:	781a      	ldrb	r2, [r3, #0]
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <server_message_queue_is_empty+0x28>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d105      	bne.n	8001598 <server_message_queue_is_empty+0x1c>
            server_msg_queue_full_flag == 0){
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <server_message_queue_is_empty+0x2c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
    if((server_msg_queue_storage_index == server_msg_queue_processing_index) &&
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <server_message_queue_is_empty+0x1c>
        return 1;
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <server_message_queue_is_empty+0x1e>
    } else {
        return 0;
 8001598:	2300      	movs	r3, #0
    }
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200003f5 	.word	0x200003f5
 80015a4:	200003f4 	.word	0x200003f4
 80015a8:	200003f6 	.word	0x200003f6

080015ac <internal_message_queue_is_empty>:

uint8_t internal_message_queue_is_empty(){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
    if((internal_msg_queue_storage_index == internal_msg_queue_processing_index) &&
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <internal_message_queue_is_empty+0x24>)
 80015b2:	781a      	ldrb	r2, [r3, #0]
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <internal_message_queue_is_empty+0x28>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d105      	bne.n	80015c8 <internal_message_queue_is_empty+0x1c>
            internal_msg_queue_full_flag == 0){
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <internal_message_queue_is_empty+0x2c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
    if((internal_msg_queue_storage_index == internal_msg_queue_processing_index) &&
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <internal_message_queue_is_empty+0x1c>
        return 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <internal_message_queue_is_empty+0x1e>
    } else {
        return 0;
 80015c8:	2300      	movs	r3, #0
    }
}
 80015ca:	0018      	movs	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000511 	.word	0x20000511
 80015d4:	20000510 	.word	0x20000510
 80015d8:	20000512 	.word	0x20000512

080015dc <EEPROM_read_message_queue_is_empty>:

uint8_t EEPROM_read_message_queue_is_empty(){
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
    if((EEPROM_read_msg_queue_storage_index == EEPROM_read_msg_queue_processing_index) &&
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <EEPROM_read_message_queue_is_empty+0x24>)
 80015e2:	781a      	ldrb	r2, [r3, #0]
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <EEPROM_read_message_queue_is_empty+0x28>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d105      	bne.n	80015f8 <EEPROM_read_message_queue_is_empty+0x1c>
    		EEPROM_read_msg_queue_full_flag == 0){
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <EEPROM_read_message_queue_is_empty+0x2c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
    if((EEPROM_read_msg_queue_storage_index == EEPROM_read_msg_queue_processing_index) &&
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <EEPROM_read_message_queue_is_empty+0x1c>
        return 1;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <EEPROM_read_message_queue_is_empty+0x1e>
    } else {
        return 0;
 80015f8:	2300      	movs	r3, #0
    }
}
 80015fa:	0018      	movs	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2000062d 	.word	0x2000062d
 8001604:	2000062c 	.word	0x2000062c
 8001608:	2000062e 	.word	0x2000062e

0800160c <global_message_queue_get>:

//Returns pointer to the next unprocessed message and updates processing pointer
uint8_t* global_message_queue_get(){
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
	uint8_t* msg_pointer = global_message_queue + global_msg_queue_processing_index;
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <global_message_queue_get+0x28>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	001a      	movs	r2, r3
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <global_message_queue_get+0x2c>)
 800161a:	18d3      	adds	r3, r2, r3
 800161c:	607b      	str	r3, [r7, #4]

	//Update the processing index
	global_msg_queue_processing_index = global_msg_queue_processing_index + MESSAGE_BLOCK_BYTES; //Places the index at the right spot for next write
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <global_message_queue_get+0x28>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	330e      	adds	r3, #14
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4b03      	ldr	r3, [pc, #12]	; (8001634 <global_message_queue_get+0x28>)
 8001628:	701a      	strb	r2, [r3, #0]
	//Tests if the end of the message_queue has been reached - roll around to the start of the message array
	if(global_msg_queue_processing_index == GLOBAL_MESSAGE_QUEUE_SIZE){
		global_msg_queue_storage_index = 0;
	}

	return msg_pointer;
 800162a:	687b      	ldr	r3, [r7, #4]
}
 800162c:	0018      	movs	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	b002      	add	sp, #8
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200001bc 	.word	0x200001bc
 8001638:	200000a4 	.word	0x200000a4

0800163c <sensor_message_queue_get>:

// Returns pointer to the next unprocessed message and updates processing pointer
uint8_t* sensor_message_queue_get(){
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
    uint8_t* msg_pointer = sensor_message_queue + sensor_msg_queue_processing_index;
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <sensor_message_queue_get+0x28>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	001a      	movs	r2, r3
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <sensor_message_queue_get+0x2c>)
 800164a:	18d3      	adds	r3, r2, r3
 800164c:	607b      	str	r3, [r7, #4]

    // Update the processing index
    sensor_msg_queue_processing_index = sensor_msg_queue_processing_index + MESSAGE_BLOCK_BYTES; // Places the index at the right spot for the next write
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <sensor_message_queue_get+0x28>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	330e      	adds	r3, #14
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4b03      	ldr	r3, [pc, #12]	; (8001664 <sensor_message_queue_get+0x28>)
 8001658:	701a      	strb	r2, [r3, #0]
    // Tests if the end of the message_queue has been reached - roll around to the start of the message array
    if(sensor_msg_queue_processing_index == SENSOR_MESSAGE_QUEUE_SIZE){
        sensor_msg_queue_storage_index = 0;
    }

    return msg_pointer;
 800165a:	687b      	ldr	r3, [r7, #4]
}
 800165c:	0018      	movs	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	b002      	add	sp, #8
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200002d8 	.word	0x200002d8
 8001668:	200001c0 	.word	0x200001c0

0800166c <server_message_queue_get>:

// Returns pointer to the next unprocessed message and updates processing pointer
uint8_t* server_message_queue_get(){
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
    uint8_t* msg_pointer = server_message_queue + server_msg_queue_processing_index;
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <server_message_queue_get+0x28>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	001a      	movs	r2, r3
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <server_message_queue_get+0x2c>)
 800167a:	18d3      	adds	r3, r2, r3
 800167c:	607b      	str	r3, [r7, #4]

    // Update the processing index
    server_msg_queue_processing_index = server_msg_queue_processing_index + MESSAGE_BLOCK_BYTES; // Places the index at the right spot for the next write
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <server_message_queue_get+0x28>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	330e      	adds	r3, #14
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b03      	ldr	r3, [pc, #12]	; (8001694 <server_message_queue_get+0x28>)
 8001688:	701a      	strb	r2, [r3, #0]
    // Tests if the end of the message_queue has been reached - roll around to the start of the message array
    if(server_msg_queue_processing_index == SERVER_MESSAGE_QUEUE_SIZE){
        server_msg_queue_storage_index = 0;
    }

    return msg_pointer;
 800168a:	687b      	ldr	r3, [r7, #4]
}
 800168c:	0018      	movs	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	b002      	add	sp, #8
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200003f4 	.word	0x200003f4
 8001698:	200002dc 	.word	0x200002dc

0800169c <internal_message_queue_get>:

// Returns pointer to the next unprocessed message and updates processing pointer
uint8_t* internal_message_queue_get(){
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
    uint8_t* msg_pointer = internal_message_queue + internal_msg_queue_processing_index;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <internal_message_queue_get+0x28>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	001a      	movs	r2, r3
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <internal_message_queue_get+0x2c>)
 80016aa:	18d3      	adds	r3, r2, r3
 80016ac:	607b      	str	r3, [r7, #4]

    // Update the processing index
    internal_msg_queue_processing_index = internal_msg_queue_processing_index + MESSAGE_BLOCK_BYTES; // Places the index at the right spot for the next write
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <internal_message_queue_get+0x28>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	330e      	adds	r3, #14
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <internal_message_queue_get+0x28>)
 80016b8:	701a      	strb	r2, [r3, #0]
    // Tests if the end of the message_queue has been reached - roll around to the start of the message array
    if(internal_msg_queue_processing_index == INTERNAL_MESSAGE_QUEUE_SIZE){
        internal_msg_queue_storage_index = 0;
    }

    return msg_pointer;
 80016ba:	687b      	ldr	r3, [r7, #4]
}
 80016bc:	0018      	movs	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	b002      	add	sp, #8
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000510 	.word	0x20000510
 80016c8:	200003f8 	.word	0x200003f8

080016cc <EEPROM_read_message_queue_get>:

// Returns pointer to the next unprocessed message and updates processing pointer
uint8_t* EEPROM_read_message_queue_get(){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
    uint8_t* msg_pointer = EEPROM_read_message_queue + EEPROM_read_msg_queue_processing_index;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <EEPROM_read_message_queue_get+0x28>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	001a      	movs	r2, r3
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <EEPROM_read_message_queue_get+0x2c>)
 80016da:	18d3      	adds	r3, r2, r3
 80016dc:	607b      	str	r3, [r7, #4]

    // Update the processing index
    EEPROM_read_msg_queue_processing_index = EEPROM_read_msg_queue_processing_index + MESSAGE_BLOCK_BYTES; // Places the index at the right spot for the next write
 80016de:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <EEPROM_read_message_queue_get+0x28>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	330e      	adds	r3, #14
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <EEPROM_read_message_queue_get+0x28>)
 80016e8:	701a      	strb	r2, [r3, #0]
    // Tests if the end of the message_queue has been reached - roll around to the start of the message array
    if(EEPROM_read_msg_queue_processing_index == EEPROM_READ_MESSAGE_QUEUE_SIZE){
    	EEPROM_read_msg_queue_processing_index = 0;
    }

    return msg_pointer;
 80016ea:	687b      	ldr	r3, [r7, #4]
}
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	2000062c 	.word	0x2000062c
 80016f8:	20000514 	.word	0x20000514

080016fc <global_message_queue_add>:

void global_message_queue_add(uint8_t* message){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	if(global_msg_queue_full_flag == 0){
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <global_message_queue_add+0x84>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d12e      	bne.n	800176a <global_message_queue_add+0x6e>
		//Store received messages in message_queue array and process them later
		for (uint8_t i = 0;i < MESSAGE_BLOCK_BYTES;i++){
 800170c:	230f      	movs	r3, #15
 800170e:	18fb      	adds	r3, r7, r3
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	e012      	b.n	800173c <global_message_queue_add+0x40>
			global_message_queue[global_msg_queue_storage_index+i] = *(message + i);
 8001716:	200f      	movs	r0, #15
 8001718:	183b      	adds	r3, r7, r0
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	18d2      	adds	r2, r2, r3
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <global_message_queue_add+0x88>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	0019      	movs	r1, r3
 8001726:	183b      	adds	r3, r7, r0
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	18cb      	adds	r3, r1, r3
 800172c:	7811      	ldrb	r1, [r2, #0]
 800172e:	4a16      	ldr	r2, [pc, #88]	; (8001788 <global_message_queue_add+0x8c>)
 8001730:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0;i < MESSAGE_BLOCK_BYTES;i++){
 8001732:	183b      	adds	r3, r7, r0
 8001734:	781a      	ldrb	r2, [r3, #0]
 8001736:	183b      	adds	r3, r7, r0
 8001738:	3201      	adds	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	230f      	movs	r3, #15
 800173e:	18fb      	adds	r3, r7, r3
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b0d      	cmp	r3, #13
 8001744:	d9e7      	bls.n	8001716 <global_message_queue_add+0x1a>
		}

		//Update storage index
		global_msg_queue_storage_index = global_msg_queue_storage_index + MESSAGE_BLOCK_BYTES; //Places the index at the right spot for next write
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <global_message_queue_add+0x88>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	330e      	adds	r3, #14
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <global_message_queue_add+0x88>)
 8001750:	701a      	strb	r2, [r3, #0]
		if(global_msg_queue_storage_index == GLOBAL_MESSAGE_QUEUE_SIZE){
			global_msg_queue_storage_index = 0;
		}

		//Check if this operation filled up the message queue
		if(global_msg_queue_storage_index == global_msg_queue_processing_index){
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <global_message_queue_add+0x88>)
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <global_message_queue_add+0x90>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d102      	bne.n	8001764 <global_message_queue_add+0x68>
			global_msg_queue_full_flag = 1;
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <global_message_queue_add+0x84>)
 8001760:	2201      	movs	r2, #1
 8001762:	701a      	strb	r2, [r3, #0]
		}

		Set_Pending_AES_RNG_LPUART1_Interrupt(); //Set PendSV interrupt to process message queues
 8001764:	f7ff fe34 	bl	80013d0 <Set_Pending_AES_RNG_LPUART1_Interrupt>
	} else {
		//Update the device status bit
		device_status |= BIT2;
	}
}
 8001768:	e005      	b.n	8001776 <global_message_queue_add+0x7a>
		device_status |= BIT2;
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <global_message_queue_add+0x94>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2204      	movs	r2, #4
 8001770:	431a      	orrs	r2, r3
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <global_message_queue_add+0x94>)
 8001774:	601a      	str	r2, [r3, #0]
}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	b004      	add	sp, #16
 800177c:	bd80      	pop	{r7, pc}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	200001be 	.word	0x200001be
 8001784:	200001bd 	.word	0x200001bd
 8001788:	200000a4 	.word	0x200000a4
 800178c:	200001bc 	.word	0x200001bc
 8001790:	20000678 	.word	0x20000678

08001794 <sensor_message_queue_add>:

void sensor_message_queue_add(uint8_t* message){
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
    if(sensor_msg_queue_full_flag == 0){
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <sensor_message_queue_add+0x84>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d12e      	bne.n	8001802 <sensor_message_queue_add+0x6e>
        //Store received messages in message_queue array and process them later
        for (uint8_t i = 0; i < MESSAGE_BLOCK_BYTES; i++){
 80017a4:	230f      	movs	r3, #15
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	e012      	b.n	80017d4 <sensor_message_queue_add+0x40>
            sensor_message_queue[sensor_msg_queue_storage_index + i] = *(message + i);
 80017ae:	200f      	movs	r0, #15
 80017b0:	183b      	adds	r3, r7, r0
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	18d2      	adds	r2, r2, r3
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <sensor_message_queue_add+0x88>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	0019      	movs	r1, r3
 80017be:	183b      	adds	r3, r7, r0
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	18cb      	adds	r3, r1, r3
 80017c4:	7811      	ldrb	r1, [r2, #0]
 80017c6:	4a16      	ldr	r2, [pc, #88]	; (8001820 <sensor_message_queue_add+0x8c>)
 80017c8:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 0; i < MESSAGE_BLOCK_BYTES; i++){
 80017ca:	183b      	adds	r3, r7, r0
 80017cc:	781a      	ldrb	r2, [r3, #0]
 80017ce:	183b      	adds	r3, r7, r0
 80017d0:	3201      	adds	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
 80017d4:	230f      	movs	r3, #15
 80017d6:	18fb      	adds	r3, r7, r3
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b0d      	cmp	r3, #13
 80017dc:	d9e7      	bls.n	80017ae <sensor_message_queue_add+0x1a>
        }

        //Update storage index
        sensor_msg_queue_storage_index = sensor_msg_queue_storage_index + MESSAGE_BLOCK_BYTES; //Places the index at the right spot for next write
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <sensor_message_queue_add+0x88>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	330e      	adds	r3, #14
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <sensor_message_queue_add+0x88>)
 80017e8:	701a      	strb	r2, [r3, #0]
        if(sensor_msg_queue_storage_index == SENSOR_MESSAGE_QUEUE_SIZE){
            sensor_msg_queue_storage_index = 0;
        }

        //Check if this operation filled up the message queue
        if(sensor_msg_queue_storage_index == sensor_msg_queue_processing_index){
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <sensor_message_queue_add+0x88>)
 80017ec:	781a      	ldrb	r2, [r3, #0]
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <sensor_message_queue_add+0x90>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d102      	bne.n	80017fc <sensor_message_queue_add+0x68>
            sensor_msg_queue_full_flag = 1;
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <sensor_message_queue_add+0x84>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
        }

        Set_Pending_AES_RNG_LPUART1_Interrupt(); //Set PendSV interrupt to process message queues
 80017fc:	f7ff fde8 	bl	80013d0 <Set_Pending_AES_RNG_LPUART1_Interrupt>
    } else {
        // Update the device status bit
        device_status |= BIT3;
    }
}
 8001800:	e005      	b.n	800180e <sensor_message_queue_add+0x7a>
        device_status |= BIT3;
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <sensor_message_queue_add+0x94>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2208      	movs	r2, #8
 8001808:	431a      	orrs	r2, r3
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <sensor_message_queue_add+0x94>)
 800180c:	601a      	str	r2, [r3, #0]
}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	46bd      	mov	sp, r7
 8001812:	b004      	add	sp, #16
 8001814:	bd80      	pop	{r7, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	200002da 	.word	0x200002da
 800181c:	200002d9 	.word	0x200002d9
 8001820:	200001c0 	.word	0x200001c0
 8001824:	200002d8 	.word	0x200002d8
 8001828:	20000678 	.word	0x20000678

0800182c <server_message_queue_add>:

void server_message_queue_add(uint8_t* message){
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
    if(server_msg_queue_full_flag == 0){
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <server_message_queue_add+0x84>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d12e      	bne.n	800189a <server_message_queue_add+0x6e>
        //Store received messages in message_queue array and process them later
        for (uint8_t i = 0; i < MESSAGE_BLOCK_BYTES; i++){
 800183c:	230f      	movs	r3, #15
 800183e:	18fb      	adds	r3, r7, r3
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
 8001844:	e012      	b.n	800186c <server_message_queue_add+0x40>
            server_message_queue[server_msg_queue_storage_index + i] = *(message + i);
 8001846:	200f      	movs	r0, #15
 8001848:	183b      	adds	r3, r7, r0
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	18d2      	adds	r2, r2, r3
 8001850:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <server_message_queue_add+0x88>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	0019      	movs	r1, r3
 8001856:	183b      	adds	r3, r7, r0
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	18cb      	adds	r3, r1, r3
 800185c:	7811      	ldrb	r1, [r2, #0]
 800185e:	4a16      	ldr	r2, [pc, #88]	; (80018b8 <server_message_queue_add+0x8c>)
 8001860:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 0; i < MESSAGE_BLOCK_BYTES; i++){
 8001862:	183b      	adds	r3, r7, r0
 8001864:	781a      	ldrb	r2, [r3, #0]
 8001866:	183b      	adds	r3, r7, r0
 8001868:	3201      	adds	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	230f      	movs	r3, #15
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b0d      	cmp	r3, #13
 8001874:	d9e7      	bls.n	8001846 <server_message_queue_add+0x1a>
        }

        //Update storage index
        server_msg_queue_storage_index = server_msg_queue_storage_index + MESSAGE_BLOCK_BYTES; //Places the index at the right spot for next write
 8001876:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <server_message_queue_add+0x88>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	330e      	adds	r3, #14
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <server_message_queue_add+0x88>)
 8001880:	701a      	strb	r2, [r3, #0]
        if(server_msg_queue_storage_index == SERVER_MESSAGE_QUEUE_SIZE){
            server_msg_queue_storage_index = 0;
        }

        //Check if this operation filled up the message queue
        if(server_msg_queue_storage_index == server_msg_queue_processing_index){
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <server_message_queue_add+0x88>)
 8001884:	781a      	ldrb	r2, [r3, #0]
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <server_message_queue_add+0x90>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d102      	bne.n	8001894 <server_message_queue_add+0x68>
            server_msg_queue_full_flag = 1;
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <server_message_queue_add+0x84>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
        }

        Set_Pending_AES_RNG_LPUART1_Interrupt(); //Set PendSV interrupt to process message queues
 8001894:	f7ff fd9c 	bl	80013d0 <Set_Pending_AES_RNG_LPUART1_Interrupt>
    } else {
        // Update the device status bit
        device_status |= BIT4;
    }
}
 8001898:	e005      	b.n	80018a6 <server_message_queue_add+0x7a>
        device_status |= BIT4;
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <server_message_queue_add+0x94>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2210      	movs	r2, #16
 80018a0:	431a      	orrs	r2, r3
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <server_message_queue_add+0x94>)
 80018a4:	601a      	str	r2, [r3, #0]
}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b004      	add	sp, #16
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	200003f6 	.word	0x200003f6
 80018b4:	200003f5 	.word	0x200003f5
 80018b8:	200002dc 	.word	0x200002dc
 80018bc:	200003f4 	.word	0x200003f4
 80018c0:	20000678 	.word	0x20000678

080018c4 <internal_message_queue_add>:

void internal_message_queue_add(uint8_t* message){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
    if(internal_msg_queue_full_flag == 0){
 80018cc:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <internal_message_queue_add+0x84>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d12e      	bne.n	8001932 <internal_message_queue_add+0x6e>
        //Store received messages in message_queue array and process them later
        for (uint8_t i = 0; i < MESSAGE_BLOCK_BYTES; i++){
 80018d4:	230f      	movs	r3, #15
 80018d6:	18fb      	adds	r3, r7, r3
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
 80018dc:	e012      	b.n	8001904 <internal_message_queue_add+0x40>
            internal_message_queue[internal_msg_queue_storage_index + i] = *(message + i);
 80018de:	200f      	movs	r0, #15
 80018e0:	183b      	adds	r3, r7, r0
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	18d2      	adds	r2, r2, r3
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <internal_message_queue_add+0x88>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	0019      	movs	r1, r3
 80018ee:	183b      	adds	r3, r7, r0
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	18cb      	adds	r3, r1, r3
 80018f4:	7811      	ldrb	r1, [r2, #0]
 80018f6:	4a16      	ldr	r2, [pc, #88]	; (8001950 <internal_message_queue_add+0x8c>)
 80018f8:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 0; i < MESSAGE_BLOCK_BYTES; i++){
 80018fa:	183b      	adds	r3, r7, r0
 80018fc:	781a      	ldrb	r2, [r3, #0]
 80018fe:	183b      	adds	r3, r7, r0
 8001900:	3201      	adds	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	230f      	movs	r3, #15
 8001906:	18fb      	adds	r3, r7, r3
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b0d      	cmp	r3, #13
 800190c:	d9e7      	bls.n	80018de <internal_message_queue_add+0x1a>
        }

        //Update storage index
        internal_msg_queue_storage_index = internal_msg_queue_storage_index + MESSAGE_BLOCK_BYTES; //Places the index at the right spot for the next write
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <internal_message_queue_add+0x88>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	330e      	adds	r3, #14
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <internal_message_queue_add+0x88>)
 8001918:	701a      	strb	r2, [r3, #0]
        if(internal_msg_queue_storage_index == INTERNAL_MESSAGE_QUEUE_SIZE){
            internal_msg_queue_storage_index = 0;
        }

        //Check if this operation filled up the message queue
        if(internal_msg_queue_storage_index == internal_msg_queue_processing_index){
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <internal_message_queue_add+0x88>)
 800191c:	781a      	ldrb	r2, [r3, #0]
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <internal_message_queue_add+0x90>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d102      	bne.n	800192c <internal_message_queue_add+0x68>
            internal_msg_queue_full_flag = 1;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <internal_message_queue_add+0x84>)
 8001928:	2201      	movs	r2, #1
 800192a:	701a      	strb	r2, [r3, #0]
        }

        Set_Pending_AES_RNG_LPUART1_Interrupt(); //Set PendSV interrupt to process message queues
 800192c:	f7ff fd50 	bl	80013d0 <Set_Pending_AES_RNG_LPUART1_Interrupt>
    } else {
        // Update the device status bit
        device_status |= BIT5;
    }
}
 8001930:	e005      	b.n	800193e <internal_message_queue_add+0x7a>
        device_status |= BIT5;
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <internal_message_queue_add+0x94>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2220      	movs	r2, #32
 8001938:	431a      	orrs	r2, r3
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <internal_message_queue_add+0x94>)
 800193c:	601a      	str	r2, [r3, #0]
}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	46bd      	mov	sp, r7
 8001942:	b004      	add	sp, #16
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	20000512 	.word	0x20000512
 800194c:	20000511 	.word	0x20000511
 8001950:	200003f8 	.word	0x200003f8
 8001954:	20000510 	.word	0x20000510
 8001958:	20000678 	.word	0x20000678

0800195c <EEPROM_read_message_queue_add>:

void EEPROM_read_message_queue_add(uint8_t* message){
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
    if(EEPROM_read_msg_queue_full_flag == 0){
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <EEPROM_read_message_queue_add+0x84>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d12e      	bne.n	80019ca <EEPROM_read_message_queue_add+0x6e>
        //Store received messages in message_queue array and process them later
        for (uint8_t i = 0; i < MESSAGE_BLOCK_BYTES; i++){
 800196c:	230f      	movs	r3, #15
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	e012      	b.n	800199c <EEPROM_read_message_queue_add+0x40>
        	EEPROM_read_message_queue[EEPROM_read_msg_queue_storage_index + i] = *(message + i);
 8001976:	200f      	movs	r0, #15
 8001978:	183b      	adds	r3, r7, r0
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	18d2      	adds	r2, r2, r3
 8001980:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <EEPROM_read_message_queue_add+0x88>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	0019      	movs	r1, r3
 8001986:	183b      	adds	r3, r7, r0
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	18cb      	adds	r3, r1, r3
 800198c:	7811      	ldrb	r1, [r2, #0]
 800198e:	4a16      	ldr	r2, [pc, #88]	; (80019e8 <EEPROM_read_message_queue_add+0x8c>)
 8001990:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 0; i < MESSAGE_BLOCK_BYTES; i++){
 8001992:	183b      	adds	r3, r7, r0
 8001994:	781a      	ldrb	r2, [r3, #0]
 8001996:	183b      	adds	r3, r7, r0
 8001998:	3201      	adds	r2, #1
 800199a:	701a      	strb	r2, [r3, #0]
 800199c:	230f      	movs	r3, #15
 800199e:	18fb      	adds	r3, r7, r3
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b0d      	cmp	r3, #13
 80019a4:	d9e7      	bls.n	8001976 <EEPROM_read_message_queue_add+0x1a>
        }

        //Update storage index
        EEPROM_read_msg_queue_storage_index = EEPROM_read_msg_queue_storage_index + MESSAGE_BLOCK_BYTES; //Places the index at the right spot for the next write
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <EEPROM_read_message_queue_add+0x88>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	330e      	adds	r3, #14
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <EEPROM_read_message_queue_add+0x88>)
 80019b0:	701a      	strb	r2, [r3, #0]
        if(EEPROM_read_msg_queue_storage_index == EEPROM_READ_MESSAGE_QUEUE_SIZE){
        	EEPROM_read_msg_queue_storage_index = 0;
        }

        //Check if this operation filled up the message queue
        if(EEPROM_read_msg_queue_storage_index == EEPROM_read_msg_queue_processing_index){
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <EEPROM_read_message_queue_add+0x88>)
 80019b4:	781a      	ldrb	r2, [r3, #0]
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <EEPROM_read_message_queue_add+0x90>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d102      	bne.n	80019c4 <EEPROM_read_message_queue_add+0x68>
        	EEPROM_read_msg_queue_full_flag = 1;
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <EEPROM_read_message_queue_add+0x84>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
        }

        Set_Pending_AES_RNG_LPUART1_Interrupt(); //Set PendSV interrupt to process message queues
 80019c4:	f7ff fd04 	bl	80013d0 <Set_Pending_AES_RNG_LPUART1_Interrupt>
    } else {
        // Update the device status bit
        device_status |= BIT9;
    }
}
 80019c8:	e006      	b.n	80019d8 <EEPROM_read_message_queue_add+0x7c>
        device_status |= BIT9;
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <EEPROM_read_message_queue_add+0x94>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2280      	movs	r2, #128	; 0x80
 80019d0:	0092      	lsls	r2, r2, #2
 80019d2:	431a      	orrs	r2, r3
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <EEPROM_read_message_queue_add+0x94>)
 80019d6:	601a      	str	r2, [r3, #0]
}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	b004      	add	sp, #16
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	2000062e 	.word	0x2000062e
 80019e4:	2000062d 	.word	0x2000062d
 80019e8:	20000514 	.word	0x20000514
 80019ec:	2000062c 	.word	0x2000062c
 80019f0:	20000678 	.word	0x20000678

080019f4 <intialize_RTC_Clock>:
*/
    /* Loop forever */
	//for(;;);
//}

void intialize_RTC_Clock(){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	//RTC register write protection
	RTC_WPR |= 0xCA; //Bits 7:0 KEY[7:0]: Write protection key
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <intialize_RTC_Clock+0x68>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <intialize_RTC_Clock+0x68>)
 80019fe:	21ca      	movs	r1, #202	; 0xca
 8001a00:	430a      	orrs	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]
	RTC_WPR |= 0x53;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <intialize_RTC_Clock+0x68>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <intialize_RTC_Clock+0x68>)
 8001a0a:	2153      	movs	r1, #83	; 0x53
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]
	//1. Enable the power interface clock by setting the PWREN bits in the RCC_APB1ENR
	//   register.
	//2. Set the DBP bit in the PWR_CR register (see Section 6.4.1).
	//3. Select the RTC clock source through RTCSEL[1:0] bits in RCC_CSR register.
	//4. Enable the RTC clock by programming the RTCEN bit in the RCC_CSR register.
	RCC_APB1ENR |= BIT28; //PWREN: Power interface clock enable bit, 1: Power interface clock enabled
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <intialize_RTC_Clock+0x6c>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <intialize_RTC_Clock+0x6c>)
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	0549      	lsls	r1, r1, #21
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]

	PWR_CR |= (1 << 8); //DBP: Disable backup write protection
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <intialize_RTC_Clock+0x70>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <intialize_RTC_Clock+0x70>)
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	0049      	lsls	r1, r1, #1
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]
	RCC_CSR &= ~BIT19;
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <intialize_RTC_Clock+0x74>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <intialize_RTC_Clock+0x74>)
 8001a32:	490e      	ldr	r1, [pc, #56]	; (8001a6c <intialize_RTC_Clock+0x78>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]
	RCC_CSR |= (0x01 << 16); //RTCSEL[1:0]: RTC clock source selection bits, 01: LSE oscillator clock used as RTC clock
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <intialize_RTC_Clock+0x74>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <intialize_RTC_Clock+0x74>)
 8001a3e:	2180      	movs	r1, #128	; 0x80
 8001a40:	0249      	lsls	r1, r1, #9
 8001a42:	430a      	orrs	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]
	//Once the RTC clock source has been selected it cannot be switched until RTCRST is set or
	//a Power On Reset occurred. The only exception is if the LSE oscillator clock was selected, if
	//the LSE clock stops and it is detected by the CSSLSE, in that case the clock can be switched.
	//RCC_CSR |= BIT19; //RTCRST: RTC software reset bit, 1: Resets the RTC peripheral, its clock source selection and the backup registers.
	RCC_CSR |= BIT18; //RTCEN: RTC clock enable bit, It is reset by setting the RTCRST bit or by a POR.
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <intialize_RTC_Clock+0x74>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <intialize_RTC_Clock+0x74>)
 8001a4c:	2180      	movs	r1, #128	; 0x80
 8001a4e:	02c9      	lsls	r1, r1, #11
 8001a50:	430a      	orrs	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]

	//RTC_CR |= BIT8; //ALRAE: Alarm A enable
	//RTC_CR |= BIT12; //Bit 12 ALRAIE: Alarm A interrupt enable

}
 8001a54:	46c0      	nop			; (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	40002824 	.word	0x40002824
 8001a60:	40021038 	.word	0x40021038
 8001a64:	40007000 	.word	0x40007000
 8001a68:	40021050 	.word	0x40021050
 8001a6c:	fff7ffff 	.word	0xfff7ffff

08001a70 <RTC_AlarmA_Interrupt_Enable>:

void RTC_AlarmA_Interrupt_Enable(){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	RTC_CR |= BIT12; //Bit 12 ALRAIE: Alarm A interrupt enable
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <RTC_AlarmA_Interrupt_Enable+0x18>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <RTC_AlarmA_Interrupt_Enable+0x18>)
 8001a7a:	2180      	movs	r1, #128	; 0x80
 8001a7c:	0149      	lsls	r1, r1, #5
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]
}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40002808 	.word	0x40002808

08001a8c <RTC_AlarmA_Interrupt_Disable>:

void RTC_AlarmA_Interrupt_Disable(){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	RTC_CR &= ~BIT12; //Bit 12 ALRAIE: Alarm A interrupt enable, 0: Alarm A interrupt disabled
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <RTC_AlarmA_Interrupt_Disable+0x18>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <RTC_AlarmA_Interrupt_Disable+0x18>)
 8001a96:	4904      	ldr	r1, [pc, #16]	; (8001aa8 <RTC_AlarmA_Interrupt_Disable+0x1c>)
 8001a98:	400a      	ands	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]
}
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	40002808 	.word	0x40002808
 8001aa8:	ffffefff 	.word	0xffffefff

08001aac <RTC_Set_Date_Time>:

//Inputs formated for RTC_TR and RTC_DR
void RTC_Set_Date_Time(uint8_t* message){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	//The updated time shows up in the RTC_TR and RTC_DR registers only after exit of initiation mode

	//Prepares time and date data
	uint32_t timeRegister = *(message + 1) | ((*(message + 2)) << 8) | ((*(message + 3)) << 16) | ((*(message + 4)) << 24);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	001a      	movs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3302      	adds	r3, #2
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3303      	adds	r3, #3
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	041b      	lsls	r3, r3, #16
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	061b      	lsls	r3, r3, #24
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]
	uint32_t dateRegister = *(message + 5) | ((*(message + 6)) << 8) | ((*(message + 7)) << 16) | ((*(message + 8)) << 24);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3305      	adds	r3, #5
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	001a      	movs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3306      	adds	r3, #6
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	021b      	lsls	r3, r3, #8
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3307      	adds	r3, #7
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	041b      	lsls	r3, r3, #16
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3308      	adds	r3, #8
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	061b      	lsls	r3, r3, #24
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]

	//(RCC_CIER & BIT1) Bit 1 LSERDYIE: LSE ready interrupt flag

	//1. Write ‘0xCA’ into the RTC_WPR register.
	//2. Write ‘0x53’ into the RTC_WPR register.
	RTC_WPR |= 0xCA; //Bits 7:0 KEY[7:0]: Write protection key
 8001b04:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <RTC_Set_Date_Time+0xcc>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <RTC_Set_Date_Time+0xcc>)
 8001b0a:	21ca      	movs	r1, #202	; 0xca
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]
	RTC_WPR |= 0x53;
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <RTC_Set_Date_Time+0xcc>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <RTC_Set_Date_Time+0xcc>)
 8001b16:	2153      	movs	r1, #83	; 0x53
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]

	RTC_ISR |= BIT7; //INIT: Initialization mode
 8001b1c:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <RTC_Set_Date_Time+0xd0>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <RTC_Set_Date_Time+0xd0>)
 8001b22:	2180      	movs	r1, #128	; 0x80
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]
	//1: Initialization mode used to program time and date register (RTC_TR and RTC_DR), and
	//prescaler register (RTC_PRER). Counters are stopped and start counting from the new
	//value when INIT is reset.
	while ((RTC_ISR & BIT6)==0){
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <RTC_Set_Date_Time+0xd0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2240      	movs	r2, #64	; 0x40
 8001b30:	4013      	ands	r3, r2
 8001b32:	d0fa      	beq.n	8001b2a <RTC_Set_Date_Time+0x7e>
	//A 7-bit asynchronous prescaler configured through the PREDIV_A bits of the RTC_PRER register.
	//A 15-bit synchronous prescaler configured through the PREDIV_S bits of the RTC_PRER register.
	//RTC_PRER |= (0x80 << 16); //Bits 22:16 PREDIV_A[6:0]: Asynchronous prescaler factor (Left at reset value 125)
	//RTC_PRER |= (0x100 << 0); //Bits 14:0 PREDIV_S[14:0]: Synchronous prescaler factor (Left at reset value 255)

	RTC_TR = timeRegister;
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <RTC_Set_Date_Time+0xd4>)
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	601a      	str	r2, [r3, #0]
	RTC_DR = dateRegister;
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <RTC_Set_Date_Time+0xd8>)
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	601a      	str	r2, [r3, #0]
	RTC_CR &= ~(BIT6); //FMT: Hour format, 0: 24 hour/day format (Reset value)
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <RTC_Set_Date_Time+0xdc>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <RTC_Set_Date_Time+0xdc>)
 8001b46:	2140      	movs	r1, #64	; 0x40
 8001b48:	438a      	bics	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]

	while ((RTC_ISR & BIT5)!=0){ //Bit 5 RSF: Registers synchronization flag
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <RTC_Set_Date_Time+0xd0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2220      	movs	r2, #32
 8001b54:	4013      	ands	r3, r2
 8001b56:	d1fa      	bne.n	8001b4e <RTC_Set_Date_Time+0xa2>
		(BYPSHAD=1). This bit can also be cleared by software.
		It is cleared either by software or by hardware in initialization mode.
		 */
	}

	RTC_ISR &= ~BIT7; //INIT: Initialization mode, 0: Free running mode
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <RTC_Set_Date_Time+0xd0>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <RTC_Set_Date_Time+0xd0>)
 8001b5e:	2180      	movs	r1, #128	; 0x80
 8001b60:	438a      	bics	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]

	//Update device status
	device_status |= BIT7;
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <RTC_Set_Date_Time+0xe0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2280      	movs	r2, #128	; 0x80
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <RTC_Set_Date_Time+0xe0>)
 8001b6e:	601a      	str	r2, [r3, #0]
}
 8001b70:	46c0      	nop			; (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b004      	add	sp, #16
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40002824 	.word	0x40002824
 8001b7c:	4000280c 	.word	0x4000280c
 8001b80:	40002800 	.word	0x40002800
 8001b84:	40002804 	.word	0x40002804
 8001b88:	40002808 	.word	0x40002808
 8001b8c:	20000678 	.word	0x20000678

08001b90 <RTC_Read_Date_Time>:

//Copies RTC date and time information to message_block_sensor array
void RTC_Read_Date_Time(uint8_t* message){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	//registers. It is possible to make a direct access to the calendar registers by setting the
	//BYPSHAD control bit in the RTC_CR register. By default, this bit is cleared, and the user
	//accesses the shadow registers.

	//Time from RTC_TR register
	for (int i=0;i<4;i++){
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	e00e      	b.n	8001bbc <RTC_Read_Date_Time+0x2c>
		*(message + 1 + i) = (RTC_TR >> (i*8));
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <RTC_Read_Date_Time+0x68>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	40da      	lsrs	r2, r3
 8001ba8:	0011      	movs	r1, r2
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	3301      	adds	r3, #1
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	18d3      	adds	r3, r2, r3
 8001bb2:	b2ca      	uxtb	r2, r1
 8001bb4:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<4;i++){
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	dded      	ble.n	8001b9e <RTC_Read_Date_Time+0xe>
	}

	//Date from RTC_DR register
	for (int i=0;i<4;i++){
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	e00e      	b.n	8001be6 <RTC_Read_Date_Time+0x56>
		*(message + 5 + i) = (RTC_DR >> (i*8));
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <RTC_Read_Date_Time+0x6c>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	40da      	lsrs	r2, r3
 8001bd2:	0011      	movs	r1, r2
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	3305      	adds	r3, #5
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	18d3      	adds	r3, r2, r3
 8001bdc:	b2ca      	uxtb	r2, r1
 8001bde:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<4;i++){
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	3301      	adds	r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	dded      	ble.n	8001bc8 <RTC_Read_Date_Time+0x38>
	}
}
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b004      	add	sp, #16
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	40002800 	.word	0x40002800
 8001bfc:	40002804 	.word	0x40002804

08001c00 <RTC_AlarmA_Init_Sec>:
	RTC_ALRMAR &= ~BIT15; //MSK2: Alarm A minutes mask, 0: Alarm A set if the minutes match
	RTC_ALRMAR |= BIT7; //MSK1: Alarm A seconds mask, 1: Seconds don’t care in Alarm A comparison
}

//Initializes the RTC Alarm A mask to seconds
void RTC_AlarmA_Init_Sec(){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	RTC_ALRMAR &= ~(0xFFFFFFFF); //Clears the alarm values
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <RTC_AlarmA_Init_Sec+0x54>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= BIT31; //MSK4: Alarm A date mask, 1: Date/day don’t care in Alarm A comparison
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <RTC_AlarmA_Init_Sec+0x54>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <RTC_AlarmA_Init_Sec+0x54>)
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	0609      	lsls	r1, r1, #24
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= BIT30; //WDSEL: Week day selection, 1: DU[3:0] represents the week day. DT[1:0] is don’t care.
 8001c18:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <RTC_AlarmA_Init_Sec+0x54>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <RTC_AlarmA_Init_Sec+0x54>)
 8001c1e:	2180      	movs	r1, #128	; 0x80
 8001c20:	05c9      	lsls	r1, r1, #23
 8001c22:	430a      	orrs	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= BIT23; //MSK3: Alarm A hours mask, 1: Hours don’t care in Alarm A comparison
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <RTC_AlarmA_Init_Sec+0x54>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <RTC_AlarmA_Init_Sec+0x54>)
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	0409      	lsls	r1, r1, #16
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= BIT15; //MSK2: Alarm A minutes mask, 1: Minutes don’t care in Alarm A comparison
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <RTC_AlarmA_Init_Sec+0x54>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <RTC_AlarmA_Init_Sec+0x54>)
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	0209      	lsls	r1, r1, #8
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR &= ~BIT7; //MSK1: Alarm A seconds mask, 0: Alarm A set if the seconds match
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <RTC_AlarmA_Init_Sec+0x54>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <RTC_AlarmA_Init_Sec+0x54>)
 8001c48:	2180      	movs	r1, #128	; 0x80
 8001c4a:	438a      	bics	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]
}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	4000281c 	.word	0x4000281c

08001c58 <RTC_AlarmA_Period_Is_Set>:
	RTC_ALRMAR &= ~BIT15; //MSK2: Alarm A minutes mask, 0: Alarm A set if the minutes match
	RTC_ALRMAR &= ~BIT7; //MSK1: Alarm A seconds mask, 0: Alarm A set if the seconds match
}

//Returns one if alarm period has been set
uint8_t RTC_AlarmA_Period_Is_Set(uint32_t device_status){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	if (device_status & BIT6)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2240      	movs	r2, #64	; 0x40
 8001c64:	4013      	ands	r3, r2
 8001c66:	d001      	beq.n	8001c6c <RTC_AlarmA_Period_Is_Set+0x14>
		return 1;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <RTC_AlarmA_Period_Is_Set+0x16>
	else
		return 0;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	0018      	movs	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b002      	add	sp, #8
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <RTC_AlarmA_Disable>:

void RTC_AlarmA_Disable(){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	RTC_CR &= ~BIT8; //Disable Alarm A
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <RTC_AlarmA_Disable+0x18>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <RTC_AlarmA_Disable+0x18>)
 8001c82:	4904      	ldr	r1, [pc, #16]	; (8001c94 <RTC_AlarmA_Disable+0x1c>)
 8001c84:	400a      	ands	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]
}
 8001c88:	46c0      	nop			; (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	40002808 	.word	0x40002808
 8001c94:	fffffeff 	.word	0xfffffeff

08001c98 <RTC_AlarmA_Init>:

//Initializes the RTC Alarm A based on RTC_Alarm_Unit_Status - Called by RTC_AlarmA_Set_Period function
void RTC_AlarmA_Init(uint8_t RTC_Alarm_Unit_Status){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	1dfb      	adds	r3, r7, #7
 8001ca2:	701a      	strb	r2, [r3, #0]
	RTC_WPR |= 0xCA; //Bits 7:0 KEY[7:0]: Write protection key
 8001ca4:	4b2c      	ldr	r3, [pc, #176]	; (8001d58 <RTC_AlarmA_Init+0xc0>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <RTC_AlarmA_Init+0xc0>)
 8001caa:	21ca      	movs	r1, #202	; 0xca
 8001cac:	430a      	orrs	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]
	RTC_WPR |= 0x53;
 8001cb0:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <RTC_AlarmA_Init+0xc0>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <RTC_AlarmA_Init+0xc0>)
 8001cb6:	2153      	movs	r1, #83	; 0x53
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]

	//1. Clear ALRAE in RTC_CR to disable Alarm A.
	RTC_CR &= ~BIT8; //ALRAE: Alarm A enable, 0: Alarm A disabled
 8001cbc:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <RTC_AlarmA_Init+0xc4>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b26      	ldr	r3, [pc, #152]	; (8001d5c <RTC_AlarmA_Init+0xc4>)
 8001cc2:	4927      	ldr	r1, [pc, #156]	; (8001d60 <RTC_AlarmA_Init+0xc8>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

	//Bit 0 ALRAWF: Alarm A write flag, 1: Alarm A update allowed
	while ((RTC_ISR & BIT0)==0){
 8001cc8:	46c0      	nop			; (mov r8, r8)
 8001cca:	4b26      	ldr	r3, [pc, #152]	; (8001d64 <RTC_AlarmA_Init+0xcc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d0fa      	beq.n	8001cca <RTC_AlarmA_Init+0x32>
		//This bit is set by hardware when Alarm A values can be changed, after the ALRAE bit has been set to 0 in RTC_CR.
		//It is cleared by hardware in initialization mode.
	}

	//2. Program the Alarm A registers (RTC_ALRMASSR/RTC_ALRMAR).
	RTC_ALRMAR &= ~(0xFFFFFFFF); //Clears the alarm values
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <RTC_AlarmA_Init+0xd0>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= BIT31; //MSK4: Alarm A date mask, 1: Date/day don’t care in Alarm A comparison
 8001cda:	4b23      	ldr	r3, [pc, #140]	; (8001d68 <RTC_AlarmA_Init+0xd0>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <RTC_AlarmA_Init+0xd0>)
 8001ce0:	2180      	movs	r1, #128	; 0x80
 8001ce2:	0609      	lsls	r1, r1, #24
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= BIT30; //WDSEL: Week day selection, 1: DU[3:0] represents the week day. DT[1:0] is don’t care.
 8001ce8:	4b1f      	ldr	r3, [pc, #124]	; (8001d68 <RTC_AlarmA_Init+0xd0>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <RTC_AlarmA_Init+0xd0>)
 8001cee:	2180      	movs	r1, #128	; 0x80
 8001cf0:	05c9      	lsls	r1, r1, #23
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= (((RTC_Alarm_Unit_Status >> 2) & 0x01) << 23); //MSK3: Alarm A hours mask
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <RTC_AlarmA_Init+0xd0>)
 8001cf8:	6819      	ldr	r1, [r3, #0]
 8001cfa:	1dfb      	adds	r3, r7, #7
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	05db      	lsls	r3, r3, #23
 8001d04:	001a      	movs	r2, r3
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	041b      	lsls	r3, r3, #16
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <RTC_AlarmA_Init+0xd0>)
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= (((RTC_Alarm_Unit_Status >> 1) & 0x01) << 15); //MSK2: Alarm A minutes mask
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <RTC_AlarmA_Init+0xd0>)
 8001d14:	6819      	ldr	r1, [r3, #0]
 8001d16:	1dfb      	adds	r3, r7, #7
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	085b      	lsrs	r3, r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	03db      	lsls	r3, r3, #15
 8001d20:	041b      	lsls	r3, r3, #16
 8001d22:	0c1a      	lsrs	r2, r3, #16
 8001d24:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <RTC_AlarmA_Init+0xd0>)
 8001d26:	430a      	orrs	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= (((RTC_Alarm_Unit_Status >> 0) & 0x01) << 7);; //MSK1: Alarm A seconds mask
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <RTC_AlarmA_Init+0xd0>)
 8001d2c:	6819      	ldr	r1, [r3, #0]
 8001d2e:	1dfb      	adds	r3, r7, #7
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	01db      	lsls	r3, r3, #7
 8001d34:	001a      	movs	r2, r3
 8001d36:	23ff      	movs	r3, #255	; 0xff
 8001d38:	401a      	ands	r2, r3
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <RTC_AlarmA_Init+0xd0>)
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

	//3. Set ALRAE in the RTC_CR register to enable Alarm A again.
	RTC_CR |= BIT8; //ALRAE: Alarm A enable, 1: Alarm A enabled
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <RTC_AlarmA_Init+0xc4>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <RTC_AlarmA_Init+0xc4>)
 8001d46:	2180      	movs	r1, #128	; 0x80
 8001d48:	0049      	lsls	r1, r1, #1
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b002      	add	sp, #8
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	40002824 	.word	0x40002824
 8001d5c:	40002808 	.word	0x40002808
 8001d60:	fffffeff 	.word	0xfffffeff
 8001d64:	4000280c 	.word	0x4000280c
 8001d68:	4000281c 	.word	0x4000281c

08001d6c <RTC_AlarmA_Set_First_Alarm>:

//First alarm is set as the next integer multiple of second, minute, or hour
void RTC_AlarmA_Set_First_Alarm(uint8_t* message){
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	//Parses message for parameters
	uint8_t integer = *(message + 1);
 8001d74:	2317      	movs	r3, #23
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	7852      	ldrb	r2, [r2, #1]
 8001d7c:	701a      	strb	r2, [r3, #0]
	uint8_t time_unit = *(message + 2);
 8001d7e:	2116      	movs	r1, #22
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	7892      	ldrb	r2, [r2, #2]
 8001d86:	701a      	strb	r2, [r3, #0]

	//time_unit - 0: Second, 1: Minute, 2: Hour
	uint8_t hour_tens = 0;
 8001d88:	2315      	movs	r3, #21
 8001d8a:	18fb      	adds	r3, r7, r3
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
	uint8_t hour_uints = 0;
 8001d90:	2314      	movs	r3, #20
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
	uint8_t minute_tens = 0;
 8001d98:	2313      	movs	r3, #19
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	701a      	strb	r2, [r3, #0]
	uint8_t minute_units = 0;
 8001da0:	2312      	movs	r3, #18
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
	uint8_t second_tens = 0;
 8001da8:	2311      	movs	r3, #17
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
	uint8_t second_units = 0;
 8001db0:	2310      	movs	r3, #16
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
	uint32_t time = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
	uint16_t multiple = 0;
 8001dbc:	230a      	movs	r3, #10
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	801a      	strh	r2, [r3, #0]

	switch (time_unit){
 8001dc4:	187b      	adds	r3, r7, r1
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d06d      	beq.n	8001ea8 <RTC_AlarmA_Set_First_Alarm+0x13c>
 8001dcc:	dd00      	ble.n	8001dd0 <RTC_AlarmA_Set_First_Alarm+0x64>
 8001dce:	e09f      	b.n	8001f10 <RTC_AlarmA_Set_First_Alarm+0x1a4>
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <RTC_AlarmA_Set_First_Alarm+0x6e>
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d033      	beq.n	8001e40 <RTC_AlarmA_Set_First_Alarm+0xd4>
			time = hour_uints + hour_tens*10;
			multiple = time/integer;
			RTC_AlarmA_Set_Hr((multiple+1)*integer);
			break;
	}
}
 8001dd8:	e09a      	b.n	8001f10 <RTC_AlarmA_Set_First_Alarm+0x1a4>
			second_units = ((RTC_TR >> 0) & 0x0F); //Sets SU[3:0]
 8001dda:	4b4f      	ldr	r3, [pc, #316]	; (8001f18 <RTC_AlarmA_Set_First_Alarm+0x1ac>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	2010      	movs	r0, #16
 8001de2:	183b      	adds	r3, r7, r0
 8001de4:	210f      	movs	r1, #15
 8001de6:	400a      	ands	r2, r1
 8001de8:	701a      	strb	r2, [r3, #0]
			second_tens = ((RTC_TR >> 4) & 0x07); //Sets ST[2:0]
 8001dea:	4b4b      	ldr	r3, [pc, #300]	; (8001f18 <RTC_AlarmA_Set_First_Alarm+0x1ac>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	2411      	movs	r4, #17
 8001df4:	193b      	adds	r3, r7, r4
 8001df6:	2107      	movs	r1, #7
 8001df8:	400a      	ands	r2, r1
 8001dfa:	701a      	strb	r2, [r3, #0]
			time = second_units + second_tens*10;
 8001dfc:	183b      	adds	r3, r7, r0
 8001dfe:	7819      	ldrb	r1, [r3, #0]
 8001e00:	193b      	adds	r3, r7, r4
 8001e02:	781a      	ldrb	r2, [r3, #0]
 8001e04:	0013      	movs	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	189b      	adds	r3, r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	18cb      	adds	r3, r1, r3
 8001e0e:	60fb      	str	r3, [r7, #12]
			multiple = time/integer;
 8001e10:	2417      	movs	r4, #23
 8001e12:	193b      	adds	r3, r7, r4
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	0019      	movs	r1, r3
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f7fe f971 	bl	8000100 <__udivsi3>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	001a      	movs	r2, r3
 8001e22:	210a      	movs	r1, #10
 8001e24:	187b      	adds	r3, r7, r1
 8001e26:	801a      	strh	r2, [r3, #0]
			RTC_AlarmA_Set_Sec((multiple+1)*integer); //Sets alarm A to the next integer multiple
 8001e28:	187b      	adds	r3, r7, r1
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	193a      	adds	r2, r7, r4
 8001e32:	7812      	ldrb	r2, [r2, #0]
 8001e34:	4353      	muls	r3, r2
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f000 f883 	bl	8001f44 <RTC_AlarmA_Set_Sec>
			break;
 8001e3e:	e067      	b.n	8001f10 <RTC_AlarmA_Set_First_Alarm+0x1a4>
			minute_units = ((RTC_TR >> 8) & 0x0F); //Sets MNU[3:0]
 8001e40:	4b35      	ldr	r3, [pc, #212]	; (8001f18 <RTC_AlarmA_Set_First_Alarm+0x1ac>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	2012      	movs	r0, #18
 8001e4a:	183b      	adds	r3, r7, r0
 8001e4c:	210f      	movs	r1, #15
 8001e4e:	400a      	ands	r2, r1
 8001e50:	701a      	strb	r2, [r3, #0]
			minute_tens = ((RTC_TR >> 12) & 0x07); //Sets MNT[2:0]
 8001e52:	4b31      	ldr	r3, [pc, #196]	; (8001f18 <RTC_AlarmA_Set_First_Alarm+0x1ac>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	0b1b      	lsrs	r3, r3, #12
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	2413      	movs	r4, #19
 8001e5c:	193b      	adds	r3, r7, r4
 8001e5e:	2107      	movs	r1, #7
 8001e60:	400a      	ands	r2, r1
 8001e62:	701a      	strb	r2, [r3, #0]
			time = minute_units + minute_tens*10;
 8001e64:	183b      	adds	r3, r7, r0
 8001e66:	7819      	ldrb	r1, [r3, #0]
 8001e68:	193b      	adds	r3, r7, r4
 8001e6a:	781a      	ldrb	r2, [r3, #0]
 8001e6c:	0013      	movs	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	189b      	adds	r3, r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	18cb      	adds	r3, r1, r3
 8001e76:	60fb      	str	r3, [r7, #12]
			multiple = time/integer;
 8001e78:	2417      	movs	r4, #23
 8001e7a:	193b      	adds	r3, r7, r4
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	0019      	movs	r1, r3
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f7fe f93d 	bl	8000100 <__udivsi3>
 8001e86:	0003      	movs	r3, r0
 8001e88:	001a      	movs	r2, r3
 8001e8a:	210a      	movs	r1, #10
 8001e8c:	187b      	adds	r3, r7, r1
 8001e8e:	801a      	strh	r2, [r3, #0]
			RTC_AlarmA_Set_Min((multiple+1)*integer); //Sets alarm A to the next integer multiple
 8001e90:	187b      	adds	r3, r7, r1
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	193a      	adds	r2, r7, r4
 8001e9a:	7812      	ldrb	r2, [r2, #0]
 8001e9c:	4353      	muls	r3, r2
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f000 fa69 	bl	8002378 <RTC_AlarmA_Set_Min>
			break;
 8001ea6:	e033      	b.n	8001f10 <RTC_AlarmA_Set_First_Alarm+0x1a4>
			hour_uints = ((RTC_TR >> 16) & 0x0F); //Sets HU[3:0]
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <RTC_AlarmA_Set_First_Alarm+0x1ac>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	0c1b      	lsrs	r3, r3, #16
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	2014      	movs	r0, #20
 8001eb2:	183b      	adds	r3, r7, r0
 8001eb4:	210f      	movs	r1, #15
 8001eb6:	400a      	ands	r2, r1
 8001eb8:	701a      	strb	r2, [r3, #0]
			hour_tens = ((RTC_TR >> 20) & 0x03); //Sets HT[1:0]
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <RTC_AlarmA_Set_First_Alarm+0x1ac>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	0d1b      	lsrs	r3, r3, #20
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	2415      	movs	r4, #21
 8001ec4:	193b      	adds	r3, r7, r4
 8001ec6:	2103      	movs	r1, #3
 8001ec8:	400a      	ands	r2, r1
 8001eca:	701a      	strb	r2, [r3, #0]
			time = hour_uints + hour_tens*10;
 8001ecc:	183b      	adds	r3, r7, r0
 8001ece:	7819      	ldrb	r1, [r3, #0]
 8001ed0:	193b      	adds	r3, r7, r4
 8001ed2:	781a      	ldrb	r2, [r3, #0]
 8001ed4:	0013      	movs	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	189b      	adds	r3, r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	18cb      	adds	r3, r1, r3
 8001ede:	60fb      	str	r3, [r7, #12]
			multiple = time/integer;
 8001ee0:	2417      	movs	r4, #23
 8001ee2:	193b      	adds	r3, r7, r4
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f7fe f909 	bl	8000100 <__udivsi3>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	001a      	movs	r2, r3
 8001ef2:	210a      	movs	r1, #10
 8001ef4:	187b      	adds	r3, r7, r1
 8001ef6:	801a      	strh	r2, [r3, #0]
			RTC_AlarmA_Set_Hr((multiple+1)*integer);
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	193a      	adds	r2, r7, r4
 8001f02:	7812      	ldrb	r2, [r2, #0]
 8001f04:	4353      	muls	r3, r2
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f000 fa8d 	bl	8002428 <RTC_AlarmA_Set_Hr>
			break;
 8001f0e:	46c0      	nop			; (mov r8, r8)
}
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b007      	add	sp, #28
 8001f16:	bd90      	pop	{r4, r7, pc}
 8001f18:	40002800 	.word	0x40002800

08001f1c <RTC_Write_Protection_Disable>:

void RTC_Write_Protection_Disable(){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	//RTC register write protection
	RTC_WPR |= 0xCA; //Bits 7:0 KEY[7:0]: Write protection key
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <RTC_Write_Protection_Disable+0x24>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <RTC_Write_Protection_Disable+0x24>)
 8001f26:	21ca      	movs	r1, #202	; 0xca
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]
	RTC_WPR |= 0x53;
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <RTC_Write_Protection_Disable+0x24>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <RTC_Write_Protection_Disable+0x24>)
 8001f32:	2153      	movs	r1, #83	; 0x53
 8001f34:	430a      	orrs	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]
}
 8001f38:	46c0      	nop			; (mov r8, r8)
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	40002824 	.word	0x40002824

08001f44 <RTC_AlarmA_Set_Sec>:

void RTC_Write_Protection_Enable(){
	RTC_WPR |= 0xFFU;
}

void RTC_AlarmA_Set_Sec(uint8_t seconds){
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	0002      	movs	r2, r0
 8001f4c:	1dfb      	adds	r3, r7, #7
 8001f4e:	701a      	strb	r2, [r3, #0]
	RTC_Write_Protection_Disable();
 8001f50:	f7ff ffe4 	bl	8001f1c <RTC_Write_Protection_Disable>
	RTC_AlarmA_Interrupt_Disable();
 8001f54:	f7ff fd9a 	bl	8001a8c <RTC_AlarmA_Interrupt_Disable>

	//1. Clear ALRAE in RTC_CR to disable Alarm A.
	RTC_CR &= ~BIT8; //ALRAE: Alarm A enable, 0: Alarm A disabled
 8001f58:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <RTC_AlarmA_Set_Sec+0x8c>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <RTC_AlarmA_Set_Sec+0x8c>)
 8001f5e:	491d      	ldr	r1, [pc, #116]	; (8001fd4 <RTC_AlarmA_Set_Sec+0x90>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]

	//Bit 0 ALRAWF: Alarm A write flag, 1: Alarm A update allowed
	while ((RTC_ISR & BIT0)==0){
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <RTC_AlarmA_Set_Sec+0x94>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d0fa      	beq.n	8001f66 <RTC_AlarmA_Set_Sec+0x22>
		//This bit is set by hardware when Alarm A values can be changed, after the ALRAE bit has been set to 0 in RTC_CR.
		//It is cleared by hardware in initialization mode.
	}

	//2. Program the Alarm A registers (RTC_ALRMASSR/RTC_ALRMAR).
	RTC_ALRMAR &= ~(0x7F << 0); //Clears ST[2:0] and SU[3:0]
 8001f70:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <RTC_AlarmA_Set_Sec+0x98>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <RTC_AlarmA_Set_Sec+0x98>)
 8001f76:	217f      	movs	r1, #127	; 0x7f
 8001f78:	438a      	bics	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= ((seconds%10) << 0); //Sets SU[3:0]
 8001f7c:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <RTC_AlarmA_Set_Sec+0x98>)
 8001f7e:	681c      	ldr	r4, [r3, #0]
 8001f80:	1dfb      	adds	r3, r7, #7
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	210a      	movs	r1, #10
 8001f86:	0018      	movs	r0, r3
 8001f88:	f7fe f940 	bl	800020c <__aeabi_uidivmod>
 8001f8c:	000b      	movs	r3, r1
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	001a      	movs	r2, r3
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <RTC_AlarmA_Set_Sec+0x98>)
 8001f94:	4322      	orrs	r2, r4
 8001f96:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= ((seconds/10) << 4); //Sets ST[2:0]
 8001f98:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <RTC_AlarmA_Set_Sec+0x98>)
 8001f9a:	681c      	ldr	r4, [r3, #0]
 8001f9c:	1dfb      	adds	r3, r7, #7
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	210a      	movs	r1, #10
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f7fe f8ac 	bl	8000100 <__udivsi3>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	001a      	movs	r2, r3
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <RTC_AlarmA_Set_Sec+0x98>)
 8001fb2:	4322      	orrs	r2, r4
 8001fb4:	601a      	str	r2, [r3, #0]

	RTC_AlarmA_Interrupt_Enable();
 8001fb6:	f7ff fd5b 	bl	8001a70 <RTC_AlarmA_Interrupt_Enable>

	//3. Set ALRAE in the RTC_CR register to enable Alarm A again.
	RTC_CR |= BIT8; //ALRAE: Alarm A enable, 1: Alarm A enabled
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <RTC_AlarmA_Set_Sec+0x8c>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <RTC_AlarmA_Set_Sec+0x8c>)
 8001fc0:	2180      	movs	r1, #128	; 0x80
 8001fc2:	0049      	lsls	r1, r1, #1
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
}
 8001fc8:	46c0      	nop			; (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b003      	add	sp, #12
 8001fce:	bd90      	pop	{r4, r7, pc}
 8001fd0:	40002808 	.word	0x40002808
 8001fd4:	fffffeff 	.word	0xfffffeff
 8001fd8:	4000280c 	.word	0x4000280c
 8001fdc:	4000281c 	.word	0x4000281c

08001fe0 <RTC_Get_AlarmA_Period>:

//Loads RTC_AlarmA_Period into message_block_internal
void RTC_Get_AlarmA_Period(uint8_t* message_block_internal){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	*(message_block_internal + 1) = RTC_AlarmA_Period;
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <RTC_Get_AlarmA_Period+0x48>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	701a      	strb	r2, [r3, #0]
	*(message_block_internal + 2) = (RTC_AlarmA_Period >> 8);
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <RTC_Get_AlarmA_Period+0x48>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	0a1a      	lsrs	r2, r3, #8
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]
	*(message_block_internal + 3) = (RTC_AlarmA_Period >> 16);
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <RTC_Get_AlarmA_Period+0x48>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0c1a      	lsrs	r2, r3, #16
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3303      	adds	r3, #3
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]
	*(message_block_internal + 4) = (RTC_AlarmA_Period >> 24);
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <RTC_Get_AlarmA_Period+0x48>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0e1a      	lsrs	r2, r3, #24
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3304      	adds	r3, #4
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]
}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	46bd      	mov	sp, r7
 8002022:	b002      	add	sp, #8
 8002024:	bd80      	pop	{r7, pc}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	20000630 	.word	0x20000630

0800202c <RTC_Get_AlarmA_Current>:

void RTC_Get_AlarmA_Current(uint8_t* message_block_internal){
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	*(message_block_internal + 1) = RTC_ALRMAR;
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <RTC_Get_AlarmA_Current+0x48>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3301      	adds	r3, #1
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	701a      	strb	r2, [r3, #0]
	*(message_block_internal + 2) = (RTC_ALRMAR >> 8);
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <RTC_Get_AlarmA_Current+0x48>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	0a1a      	lsrs	r2, r3, #8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3302      	adds	r3, #2
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	701a      	strb	r2, [r3, #0]
	*(message_block_internal + 3) = (RTC_ALRMAR >> 16);
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <RTC_Get_AlarmA_Current+0x48>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	0c1a      	lsrs	r2, r3, #16
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3303      	adds	r3, #3
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	701a      	strb	r2, [r3, #0]
	*(message_block_internal + 4) = (RTC_ALRMAR >> 24);
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <RTC_Get_AlarmA_Current+0x48>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	0e1a      	lsrs	r2, r3, #24
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3304      	adds	r3, #4
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	701a      	strb	r2, [r3, #0]
}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	46bd      	mov	sp, r7
 800206e:	b002      	add	sp, #8
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	4000281c 	.word	0x4000281c

08002078 <RTC_AlarmA_Set_Period>:

//Automatically readjusts the Alarm A mask based on the size of increment in seconds
void RTC_AlarmA_Set_Period(uint8_t* message, uint8_t* RTC_Alarm_Unit_Status){
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
	uint32_t sampling_Period = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]

	//Gets sampling period from message
	sampling_Period = *(message + 1) | (*(message + 2) << 8) | (*(message + 3) << 16) | (*(message + 4) << 24);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3301      	adds	r3, #1
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	001a      	movs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3302      	adds	r3, #2
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3303      	adds	r3, #3
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	041b      	lsls	r3, r3, #16
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3304      	adds	r3, #4
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	061b      	lsls	r3, r3, #24
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

	RTC_AlarmA_Period = sampling_Period; //Global RTC alarm parameter
 80020ae:	4b18      	ldr	r3, [pc, #96]	; (8002110 <RTC_AlarmA_Set_Period+0x98>)
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	601a      	str	r2, [r3, #0]

	//Adjusts Alarm A mask
	if (sampling_Period <= 60){
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b3c      	cmp	r3, #60	; 0x3c
 80020b8:	d803      	bhi.n	80020c2 <RTC_AlarmA_Set_Period+0x4a>
		*RTC_Alarm_Unit_Status = 0x06; //BIT0: Seconds
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2206      	movs	r2, #6
 80020be:	701a      	strb	r2, [r3, #0]
 80020c0:	e017      	b.n	80020f2 <RTC_AlarmA_Set_Period+0x7a>
	} else if (sampling_Period > 60 && sampling_Period <= 3600){
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b3c      	cmp	r3, #60	; 0x3c
 80020c6:	d908      	bls.n	80020da <RTC_AlarmA_Set_Period+0x62>
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	23e1      	movs	r3, #225	; 0xe1
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d803      	bhi.n	80020da <RTC_AlarmA_Set_Period+0x62>
		*RTC_Alarm_Unit_Status = 0x04; //BIT0: Seconds, BIT1: Minutes
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2204      	movs	r2, #4
 80020d6:	701a      	strb	r2, [r3, #0]
 80020d8:	e00b      	b.n	80020f2 <RTC_AlarmA_Set_Period+0x7a>
	} else if (sampling_Period > 3600 && sampling_Period <= 86400){
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	23e1      	movs	r3, #225	; 0xe1
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d906      	bls.n	80020f2 <RTC_AlarmA_Set_Period+0x7a>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4a0b      	ldr	r2, [pc, #44]	; (8002114 <RTC_AlarmA_Set_Period+0x9c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d802      	bhi.n	80020f2 <RTC_AlarmA_Set_Period+0x7a>
		*RTC_Alarm_Unit_Status = 0x00; //BIT0: Seconds, BIT1: Minutes, BIT2: Hours
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
	}

	//Reinitializes the Alarm A mask - Selects the relevant time units for the time increase
	RTC_AlarmA_Init(*RTC_Alarm_Unit_Status);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	0018      	movs	r0, r3
 80020f8:	f7ff fdce 	bl	8001c98 <RTC_AlarmA_Init>

	//Update device status register
	device_status |= BIT6;
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <RTC_AlarmA_Set_Period+0xa0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2240      	movs	r2, #64	; 0x40
 8002102:	431a      	orrs	r2, r3
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <RTC_AlarmA_Set_Period+0xa0>)
 8002106:	601a      	str	r2, [r3, #0]
}
 8002108:	46c0      	nop			; (mov r8, r8)
 800210a:	46bd      	mov	sp, r7
 800210c:	b004      	add	sp, #16
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000630 	.word	0x20000630
 8002114:	00015180 	.word	0x00015180
 8002118:	20000678 	.word	0x20000678

0800211c <RTC_Increment_AlarmA>:

void RTC_Increment_AlarmA(uint32_t sampling_Period){
 800211c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	uint8_t hour_tens = 0;
 8002124:	2417      	movs	r4, #23
 8002126:	193b      	adds	r3, r7, r4
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
	uint8_t hour_uints = 0;
 800212c:	2516      	movs	r5, #22
 800212e:	197b      	adds	r3, r7, r5
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
	uint8_t minute_tens = 0;
 8002134:	2015      	movs	r0, #21
 8002136:	183b      	adds	r3, r7, r0
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
	uint8_t minute_units = 0;
 800213c:	2614      	movs	r6, #20
 800213e:	19bb      	adds	r3, r7, r6
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
	uint8_t second_tens = 0;
 8002144:	2313      	movs	r3, #19
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
	uint8_t second_units = 0;
 800214c:	2212      	movs	r2, #18
 800214e:	18bb      	adds	r3, r7, r2
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
	uint32_t timeSeconds = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]

	//Get old alarm A values
	hour_uints = ((RTC_ALRMAR >> 16) & 0x0F); //Sets HU[3:0]
 8002158:	4b80      	ldr	r3, [pc, #512]	; (800235c <RTC_Increment_AlarmA+0x240>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0c1b      	lsrs	r3, r3, #16
 800215e:	b2da      	uxtb	r2, r3
 8002160:	197b      	adds	r3, r7, r5
 8002162:	210f      	movs	r1, #15
 8002164:	400a      	ands	r2, r1
 8002166:	701a      	strb	r2, [r3, #0]
	hour_tens = ((RTC_ALRMAR >> 20) & 0x03); //Sets HT[1:0]
 8002168:	4b7c      	ldr	r3, [pc, #496]	; (800235c <RTC_Increment_AlarmA+0x240>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	0d1b      	lsrs	r3, r3, #20
 800216e:	b2da      	uxtb	r2, r3
 8002170:	193b      	adds	r3, r7, r4
 8002172:	2103      	movs	r1, #3
 8002174:	400a      	ands	r2, r1
 8002176:	701a      	strb	r2, [r3, #0]
	minute_units = ((RTC_ALRMAR >> 8) & 0x0F); //Sets MNU[3:0]
 8002178:	4b78      	ldr	r3, [pc, #480]	; (800235c <RTC_Increment_AlarmA+0x240>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	b2da      	uxtb	r2, r3
 8002180:	19bb      	adds	r3, r7, r6
 8002182:	210f      	movs	r1, #15
 8002184:	400a      	ands	r2, r1
 8002186:	701a      	strb	r2, [r3, #0]
	minute_tens = ((RTC_ALRMAR >> 12) & 0x07); //Sets MNT[2:0]
 8002188:	4b74      	ldr	r3, [pc, #464]	; (800235c <RTC_Increment_AlarmA+0x240>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0b1b      	lsrs	r3, r3, #12
 800218e:	b2da      	uxtb	r2, r3
 8002190:	0006      	movs	r6, r0
 8002192:	183b      	adds	r3, r7, r0
 8002194:	2107      	movs	r1, #7
 8002196:	400a      	ands	r2, r1
 8002198:	701a      	strb	r2, [r3, #0]
	second_units = ((RTC_ALRMAR >> 0) & 0x0F); //Sets SU[3:0]
 800219a:	4b70      	ldr	r3, [pc, #448]	; (800235c <RTC_Increment_AlarmA+0x240>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	2112      	movs	r1, #18
 80021a2:	187b      	adds	r3, r7, r1
 80021a4:	210f      	movs	r1, #15
 80021a6:	400a      	ands	r2, r1
 80021a8:	701a      	strb	r2, [r3, #0]
	second_tens = ((RTC_ALRMAR >> 4) & 0x07); //Sets ST[2:0]
 80021aa:	4b6c      	ldr	r3, [pc, #432]	; (800235c <RTC_Increment_AlarmA+0x240>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	091b      	lsrs	r3, r3, #4
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	2013      	movs	r0, #19
 80021b4:	183b      	adds	r3, r7, r0
 80021b6:	2107      	movs	r1, #7
 80021b8:	400a      	ands	r2, r1
 80021ba:	701a      	strb	r2, [r3, #0]

	//Calculate alarm time in seconds
	timeSeconds = second_units + second_tens*10 + (minute_units + minute_tens*10)*60 + (hour_uints + hour_tens*10)*3600;
 80021bc:	2112      	movs	r1, #18
 80021be:	187b      	adds	r3, r7, r1
 80021c0:	7819      	ldrb	r1, [r3, #0]
 80021c2:	183b      	adds	r3, r7, r0
 80021c4:	781a      	ldrb	r2, [r3, #0]
 80021c6:	0013      	movs	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	189b      	adds	r3, r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	18c9      	adds	r1, r1, r3
 80021d0:	2314      	movs	r3, #20
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	7818      	ldrb	r0, [r3, #0]
 80021d6:	19bb      	adds	r3, r7, r6
 80021d8:	781a      	ldrb	r2, [r3, #0]
 80021da:	0013      	movs	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	189b      	adds	r3, r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	18c2      	adds	r2, r0, r3
 80021e4:	0013      	movs	r3, r2
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	18c9      	adds	r1, r1, r3
 80021ee:	197b      	adds	r3, r7, r5
 80021f0:	7818      	ldrb	r0, [r3, #0]
 80021f2:	193b      	adds	r3, r7, r4
 80021f4:	781a      	ldrb	r2, [r3, #0]
 80021f6:	0013      	movs	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	189b      	adds	r3, r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	18c2      	adds	r2, r0, r3
 8002200:	0013      	movs	r3, r2
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	011a      	lsls	r2, r3, #4
 8002208:	1ad2      	subs	r2, r2, r3
 800220a:	0113      	lsls	r3, r2, #4
 800220c:	001a      	movs	r2, r3
 800220e:	0013      	movs	r3, r2
 8002210:	18cb      	adds	r3, r1, r3
 8002212:	60fb      	str	r3, [r7, #12]

	//Increment the latest alarm
	timeSeconds = (timeSeconds + sampling_Period)%86400; //86400 seconds in a day
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	18d3      	adds	r3, r2, r3
 800221a:	4951      	ldr	r1, [pc, #324]	; (8002360 <RTC_Increment_AlarmA+0x244>)
 800221c:	0018      	movs	r0, r3
 800221e:	f7fd fff5 	bl	800020c <__aeabi_uidivmod>
 8002222:	000b      	movs	r3, r1
 8002224:	60fb      	str	r3, [r7, #12]

	RTC_Write_Protection_Disable();
 8002226:	f7ff fe79 	bl	8001f1c <RTC_Write_Protection_Disable>
	RTC_AlarmA_Interrupt_Disable();
 800222a:	f7ff fc2f 	bl	8001a8c <RTC_AlarmA_Interrupt_Disable>

	//Modify the alarm A mask
	//1. Clear ALRAE in RTC_CR to disable Alarm A.
	RTC_CR &= ~BIT8; //ALRAE: Alarm A enable, 0: Alarm A disabled
 800222e:	4b4d      	ldr	r3, [pc, #308]	; (8002364 <RTC_Increment_AlarmA+0x248>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4b4c      	ldr	r3, [pc, #304]	; (8002364 <RTC_Increment_AlarmA+0x248>)
 8002234:	494c      	ldr	r1, [pc, #304]	; (8002368 <RTC_Increment_AlarmA+0x24c>)
 8002236:	400a      	ands	r2, r1
 8002238:	601a      	str	r2, [r3, #0]

	//Bit 0 ALRAWF: Alarm A write flag, 1: Alarm A update allowed
	while ((RTC_ISR & BIT0)==0){
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	4b4b      	ldr	r3, [pc, #300]	; (800236c <RTC_Increment_AlarmA+0x250>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2201      	movs	r2, #1
 8002242:	4013      	ands	r3, r2
 8002244:	d0fa      	beq.n	800223c <RTC_Increment_AlarmA+0x120>
	}

	//2. Program the Alarm A registers (RTC_ALRMASSR/RTC_ALRMAR).
	//-----------
	//What if the alarm gets set to a time that has passed by the time it gets set-----
	RTC_ALRMAR &= ~(0x3F7F7F7F); //Clears the Alarm A register
 8002246:	4b45      	ldr	r3, [pc, #276]	; (800235c <RTC_Increment_AlarmA+0x240>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4b44      	ldr	r3, [pc, #272]	; (800235c <RTC_Increment_AlarmA+0x240>)
 800224c:	4948      	ldr	r1, [pc, #288]	; (8002370 <RTC_Increment_AlarmA+0x254>)
 800224e:	400a      	ands	r2, r1
 8002250:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= (((timeSeconds/3600)/10) << 20); //Sets HT[2:0]
 8002252:	4b42      	ldr	r3, [pc, #264]	; (800235c <RTC_Increment_AlarmA+0x240>)
 8002254:	681c      	ldr	r4, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4946      	ldr	r1, [pc, #280]	; (8002374 <RTC_Increment_AlarmA+0x258>)
 800225a:	0018      	movs	r0, r3
 800225c:	f7fd ff50 	bl	8000100 <__udivsi3>
 8002260:	0003      	movs	r3, r0
 8002262:	051a      	lsls	r2, r3, #20
 8002264:	4b3d      	ldr	r3, [pc, #244]	; (800235c <RTC_Increment_AlarmA+0x240>)
 8002266:	4322      	orrs	r2, r4
 8002268:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= (((timeSeconds/3600)%10) << 16); //Sets HU[3:0]
 800226a:	4b3c      	ldr	r3, [pc, #240]	; (800235c <RTC_Increment_AlarmA+0x240>)
 800226c:	681c      	ldr	r4, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	22e1      	movs	r2, #225	; 0xe1
 8002272:	0111      	lsls	r1, r2, #4
 8002274:	0018      	movs	r0, r3
 8002276:	f7fd ff43 	bl	8000100 <__udivsi3>
 800227a:	0003      	movs	r3, r0
 800227c:	210a      	movs	r1, #10
 800227e:	0018      	movs	r0, r3
 8002280:	f7fd ffc4 	bl	800020c <__aeabi_uidivmod>
 8002284:	000b      	movs	r3, r1
 8002286:	041a      	lsls	r2, r3, #16
 8002288:	4b34      	ldr	r3, [pc, #208]	; (800235c <RTC_Increment_AlarmA+0x240>)
 800228a:	4322      	orrs	r2, r4
 800228c:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= (((timeSeconds%3600)/60)/10 << 12); //Sets MNT[2:0]
 800228e:	4b33      	ldr	r3, [pc, #204]	; (800235c <RTC_Increment_AlarmA+0x240>)
 8002290:	681c      	ldr	r4, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	22e1      	movs	r2, #225	; 0xe1
 8002296:	0111      	lsls	r1, r2, #4
 8002298:	0018      	movs	r0, r3
 800229a:	f7fd ffb7 	bl	800020c <__aeabi_uidivmod>
 800229e:	000b      	movs	r3, r1
 80022a0:	001a      	movs	r2, r3
 80022a2:	2396      	movs	r3, #150	; 0x96
 80022a4:	0099      	lsls	r1, r3, #2
 80022a6:	0010      	movs	r0, r2
 80022a8:	f7fd ff2a 	bl	8000100 <__udivsi3>
 80022ac:	0003      	movs	r3, r0
 80022ae:	031a      	lsls	r2, r3, #12
 80022b0:	4b2a      	ldr	r3, [pc, #168]	; (800235c <RTC_Increment_AlarmA+0x240>)
 80022b2:	4322      	orrs	r2, r4
 80022b4:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= (((timeSeconds%3600)/60)%10 << 8); //Sets MNU[3:0]
 80022b6:	4b29      	ldr	r3, [pc, #164]	; (800235c <RTC_Increment_AlarmA+0x240>)
 80022b8:	681c      	ldr	r4, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	22e1      	movs	r2, #225	; 0xe1
 80022be:	0111      	lsls	r1, r2, #4
 80022c0:	0018      	movs	r0, r3
 80022c2:	f7fd ffa3 	bl	800020c <__aeabi_uidivmod>
 80022c6:	000b      	movs	r3, r1
 80022c8:	213c      	movs	r1, #60	; 0x3c
 80022ca:	0018      	movs	r0, r3
 80022cc:	f7fd ff18 	bl	8000100 <__udivsi3>
 80022d0:	0003      	movs	r3, r0
 80022d2:	210a      	movs	r1, #10
 80022d4:	0018      	movs	r0, r3
 80022d6:	f7fd ff99 	bl	800020c <__aeabi_uidivmod>
 80022da:	000b      	movs	r3, r1
 80022dc:	021a      	lsls	r2, r3, #8
 80022de:	4b1f      	ldr	r3, [pc, #124]	; (800235c <RTC_Increment_AlarmA+0x240>)
 80022e0:	4322      	orrs	r2, r4
 80022e2:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= (((timeSeconds%3600)%60)/10 << 4); //Sets ST[2:0]
 80022e4:	4b1d      	ldr	r3, [pc, #116]	; (800235c <RTC_Increment_AlarmA+0x240>)
 80022e6:	681c      	ldr	r4, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	22e1      	movs	r2, #225	; 0xe1
 80022ec:	0111      	lsls	r1, r2, #4
 80022ee:	0018      	movs	r0, r3
 80022f0:	f7fd ff8c 	bl	800020c <__aeabi_uidivmod>
 80022f4:	000b      	movs	r3, r1
 80022f6:	213c      	movs	r1, #60	; 0x3c
 80022f8:	0018      	movs	r0, r3
 80022fa:	f7fd ff87 	bl	800020c <__aeabi_uidivmod>
 80022fe:	000b      	movs	r3, r1
 8002300:	210a      	movs	r1, #10
 8002302:	0018      	movs	r0, r3
 8002304:	f7fd fefc 	bl	8000100 <__udivsi3>
 8002308:	0003      	movs	r3, r0
 800230a:	011a      	lsls	r2, r3, #4
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <RTC_Increment_AlarmA+0x240>)
 800230e:	4322      	orrs	r2, r4
 8002310:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= (((timeSeconds%3600)%60)%10 << 0); //Sets SU[3:0]
 8002312:	4b12      	ldr	r3, [pc, #72]	; (800235c <RTC_Increment_AlarmA+0x240>)
 8002314:	681c      	ldr	r4, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	22e1      	movs	r2, #225	; 0xe1
 800231a:	0111      	lsls	r1, r2, #4
 800231c:	0018      	movs	r0, r3
 800231e:	f7fd ff75 	bl	800020c <__aeabi_uidivmod>
 8002322:	000b      	movs	r3, r1
 8002324:	213c      	movs	r1, #60	; 0x3c
 8002326:	0018      	movs	r0, r3
 8002328:	f7fd ff70 	bl	800020c <__aeabi_uidivmod>
 800232c:	000b      	movs	r3, r1
 800232e:	210a      	movs	r1, #10
 8002330:	0018      	movs	r0, r3
 8002332:	f7fd ff6b 	bl	800020c <__aeabi_uidivmod>
 8002336:	000b      	movs	r3, r1
 8002338:	001a      	movs	r2, r3
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <RTC_Increment_AlarmA+0x240>)
 800233c:	4322      	orrs	r2, r4
 800233e:	601a      	str	r2, [r3, #0]

	RTC_AlarmA_Interrupt_Enable();
 8002340:	f7ff fb96 	bl	8001a70 <RTC_AlarmA_Interrupt_Enable>

	//3. Set ALRAE in the RTC_CR register to enable Alarm A again.
	RTC_CR |= BIT8; //ALRAE: Alarm A enable, 1: Alarm A enabled
 8002344:	4b07      	ldr	r3, [pc, #28]	; (8002364 <RTC_Increment_AlarmA+0x248>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <RTC_Increment_AlarmA+0x248>)
 800234a:	2180      	movs	r1, #128	; 0x80
 800234c:	0049      	lsls	r1, r1, #1
 800234e:	430a      	orrs	r2, r1
 8002350:	601a      	str	r2, [r3, #0]
}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b007      	add	sp, #28
 8002358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	4000281c 	.word	0x4000281c
 8002360:	00015180 	.word	0x00015180
 8002364:	40002808 	.word	0x40002808
 8002368:	fffffeff 	.word	0xfffffeff
 800236c:	4000280c 	.word	0x4000280c
 8002370:	c0808080 	.word	0xc0808080
 8002374:	00008ca0 	.word	0x00008ca0

08002378 <RTC_AlarmA_Set_Min>:

//Sets minutes fields to zero
void RTC_AlarmA_Set_Min(uint8_t minute){
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	0002      	movs	r2, r0
 8002380:	1dfb      	adds	r3, r7, #7
 8002382:	701a      	strb	r2, [r3, #0]
	RTC_Write_Protection_Disable();
 8002384:	f7ff fdca 	bl	8001f1c <RTC_Write_Protection_Disable>
	RTC_AlarmA_Interrupt_Disable();
 8002388:	f7ff fb80 	bl	8001a8c <RTC_AlarmA_Interrupt_Disable>

	//1. Clear ALRAE in RTC_CR to disable Alarm A.
	RTC_CR &= ~BIT8; //ALRAE: Alarm A enable, 0: Alarm A disabled
 800238c:	4b21      	ldr	r3, [pc, #132]	; (8002414 <RTC_AlarmA_Set_Min+0x9c>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b20      	ldr	r3, [pc, #128]	; (8002414 <RTC_AlarmA_Set_Min+0x9c>)
 8002392:	4921      	ldr	r1, [pc, #132]	; (8002418 <RTC_AlarmA_Set_Min+0xa0>)
 8002394:	400a      	ands	r2, r1
 8002396:	601a      	str	r2, [r3, #0]

	//Bit 0 ALRAWF: Alarm A write flag, 1: Alarm A update allowed
	while ((RTC_ISR & BIT0)==0){
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	4b20      	ldr	r3, [pc, #128]	; (800241c <RTC_AlarmA_Set_Min+0xa4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2201      	movs	r2, #1
 80023a0:	4013      	ands	r3, r2
 80023a2:	d0fa      	beq.n	800239a <RTC_AlarmA_Set_Min+0x22>
		//This bit is set by hardware when Alarm A values can be changed, after the ALRAE bit has been set to 0 in RTC_CR.
		//It is cleared by hardware in initialization mode.
	}

	//2. Program the Alarm A registers (RTC_ALRMASSR/RTC_ALRMAR).
	RTC_ALRMAR &= ~(0x7F << 8); //Clears MNT[2:0] and MNU[3:0]
 80023a4:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <RTC_AlarmA_Set_Min+0xa8>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <RTC_AlarmA_Set_Min+0xa8>)
 80023aa:	491e      	ldr	r1, [pc, #120]	; (8002424 <RTC_AlarmA_Set_Min+0xac>)
 80023ac:	400a      	ands	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR &= ~(0x7F << 0); //Clears ST[2:0] and SU[3:0]
 80023b0:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <RTC_AlarmA_Set_Min+0xa8>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <RTC_AlarmA_Set_Min+0xa8>)
 80023b6:	217f      	movs	r1, #127	; 0x7f
 80023b8:	438a      	bics	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= ((minute%10) << 8); //Sets MNU[3:0]
 80023bc:	4b18      	ldr	r3, [pc, #96]	; (8002420 <RTC_AlarmA_Set_Min+0xa8>)
 80023be:	681c      	ldr	r4, [r3, #0]
 80023c0:	1dfb      	adds	r3, r7, #7
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	210a      	movs	r1, #10
 80023c6:	0018      	movs	r0, r3
 80023c8:	f7fd ff20 	bl	800020c <__aeabi_uidivmod>
 80023cc:	000b      	movs	r3, r1
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	001a      	movs	r2, r3
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <RTC_AlarmA_Set_Min+0xa8>)
 80023d6:	4322      	orrs	r2, r4
 80023d8:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= ((minute/10) << 12); //Sets MNT[2:0]
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <RTC_AlarmA_Set_Min+0xa8>)
 80023dc:	681c      	ldr	r4, [r3, #0]
 80023de:	1dfb      	adds	r3, r7, #7
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	210a      	movs	r1, #10
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7fd fe8b 	bl	8000100 <__udivsi3>
 80023ea:	0003      	movs	r3, r0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	031b      	lsls	r3, r3, #12
 80023f0:	001a      	movs	r2, r3
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <RTC_AlarmA_Set_Min+0xa8>)
 80023f4:	4322      	orrs	r2, r4
 80023f6:	601a      	str	r2, [r3, #0]

	RTC_AlarmA_Interrupt_Enable();
 80023f8:	f7ff fb3a 	bl	8001a70 <RTC_AlarmA_Interrupt_Enable>

	//3. Set ALRAE in the RTC_CR register to enable Alarm A again.
	RTC_CR |= BIT8; //ALRAE: Alarm A enable, 1: Alarm A enabled
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <RTC_AlarmA_Set_Min+0x9c>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4b04      	ldr	r3, [pc, #16]	; (8002414 <RTC_AlarmA_Set_Min+0x9c>)
 8002402:	2180      	movs	r1, #128	; 0x80
 8002404:	0049      	lsls	r1, r1, #1
 8002406:	430a      	orrs	r2, r1
 8002408:	601a      	str	r2, [r3, #0]
}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	46bd      	mov	sp, r7
 800240e:	b003      	add	sp, #12
 8002410:	bd90      	pop	{r4, r7, pc}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	40002808 	.word	0x40002808
 8002418:	fffffeff 	.word	0xfffffeff
 800241c:	4000280c 	.word	0x4000280c
 8002420:	4000281c 	.word	0x4000281c
 8002424:	ffff80ff 	.word	0xffff80ff

08002428 <RTC_AlarmA_Set_Hr>:

//Sets hours fields to zero
void RTC_AlarmA_Set_Hr(uint8_t hour){
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	0002      	movs	r2, r0
 8002430:	1dfb      	adds	r3, r7, #7
 8002432:	701a      	strb	r2, [r3, #0]
	RTC_Write_Protection_Disable();
 8002434:	f7ff fd72 	bl	8001f1c <RTC_Write_Protection_Disable>
	RTC_AlarmA_Interrupt_Disable();
 8002438:	f7ff fb28 	bl	8001a8c <RTC_AlarmA_Interrupt_Disable>

	//1. Clear ALRAE in RTC_CR to disable Alarm A.
	RTC_CR &= ~BIT8; //ALRAE: Alarm A enable, 0: Alarm A disabled
 800243c:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <RTC_AlarmA_Set_Hr+0xa8>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <RTC_AlarmA_Set_Hr+0xa8>)
 8002442:	4924      	ldr	r1, [pc, #144]	; (80024d4 <RTC_AlarmA_Set_Hr+0xac>)
 8002444:	400a      	ands	r2, r1
 8002446:	601a      	str	r2, [r3, #0]

	//Bit 0 ALRAWF: Alarm A write flag, 1: Alarm A update allowed
	while ((RTC_ISR & BIT0)==0){
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <RTC_AlarmA_Set_Hr+0xb0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2201      	movs	r2, #1
 8002450:	4013      	ands	r3, r2
 8002452:	d0fa      	beq.n	800244a <RTC_AlarmA_Set_Hr+0x22>
		//This bit is set by hardware when Alarm A values can be changed, after the ALRAE bit has been set to 0 in RTC_CR.
		//It is cleared by hardware in initialization mode.
	}

	//2. Program the Alarm A registers (RTC_ALRMASSR/RTC_ALRMAR).
	RTC_ALRMAR &= ~(0x7F << 16); //Clears HT[1:0] and HU[3:0]
 8002454:	4b21      	ldr	r3, [pc, #132]	; (80024dc <RTC_AlarmA_Set_Hr+0xb4>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b20      	ldr	r3, [pc, #128]	; (80024dc <RTC_AlarmA_Set_Hr+0xb4>)
 800245a:	4921      	ldr	r1, [pc, #132]	; (80024e0 <RTC_AlarmA_Set_Hr+0xb8>)
 800245c:	400a      	ands	r2, r1
 800245e:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR &= ~(0x7F << 8); //Clears MNT[2:0] and MNU[3:0]
 8002460:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <RTC_AlarmA_Set_Hr+0xb4>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <RTC_AlarmA_Set_Hr+0xb4>)
 8002466:	491f      	ldr	r1, [pc, #124]	; (80024e4 <RTC_AlarmA_Set_Hr+0xbc>)
 8002468:	400a      	ands	r2, r1
 800246a:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR &= ~(0x7F << 0); //Clears ST[2:0] and SU[3:0]
 800246c:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <RTC_AlarmA_Set_Hr+0xb4>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <RTC_AlarmA_Set_Hr+0xb4>)
 8002472:	217f      	movs	r1, #127	; 0x7f
 8002474:	438a      	bics	r2, r1
 8002476:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= ((hour%10) << 16); //Sets HU[3:0]
 8002478:	4b18      	ldr	r3, [pc, #96]	; (80024dc <RTC_AlarmA_Set_Hr+0xb4>)
 800247a:	681c      	ldr	r4, [r3, #0]
 800247c:	1dfb      	adds	r3, r7, #7
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	210a      	movs	r1, #10
 8002482:	0018      	movs	r0, r3
 8002484:	f7fd fec2 	bl	800020c <__aeabi_uidivmod>
 8002488:	000b      	movs	r3, r1
 800248a:	b2db      	uxtb	r3, r3
 800248c:	041b      	lsls	r3, r3, #16
 800248e:	001a      	movs	r2, r3
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <RTC_AlarmA_Set_Hr+0xb4>)
 8002492:	4322      	orrs	r2, r4
 8002494:	601a      	str	r2, [r3, #0]
	RTC_ALRMAR |= ((hour/10) << 20); //Sets HT[1:0]
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <RTC_AlarmA_Set_Hr+0xb4>)
 8002498:	681c      	ldr	r4, [r3, #0]
 800249a:	1dfb      	adds	r3, r7, #7
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	210a      	movs	r1, #10
 80024a0:	0018      	movs	r0, r3
 80024a2:	f7fd fe2d 	bl	8000100 <__udivsi3>
 80024a6:	0003      	movs	r3, r0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	051b      	lsls	r3, r3, #20
 80024ac:	001a      	movs	r2, r3
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <RTC_AlarmA_Set_Hr+0xb4>)
 80024b0:	4322      	orrs	r2, r4
 80024b2:	601a      	str	r2, [r3, #0]

	RTC_AlarmA_Interrupt_Enable();
 80024b4:	f7ff fadc 	bl	8001a70 <RTC_AlarmA_Interrupt_Enable>

	//3. Set ALRAE in the RTC_CR register to enable Alarm A again.
	RTC_CR |= BIT8; //ALRAE: Alarm A enable, 1: Alarm A enabled
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <RTC_AlarmA_Set_Hr+0xa8>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <RTC_AlarmA_Set_Hr+0xa8>)
 80024be:	2180      	movs	r1, #128	; 0x80
 80024c0:	0049      	lsls	r1, r1, #1
 80024c2:	430a      	orrs	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]
}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b003      	add	sp, #12
 80024cc:	bd90      	pop	{r4, r7, pc}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	40002808 	.word	0x40002808
 80024d4:	fffffeff 	.word	0xfffffeff
 80024d8:	4000280c 	.word	0x4000280c
 80024dc:	4000281c 	.word	0x4000281c
 80024e0:	ff80ffff 	.word	0xff80ffff
 80024e4:	ffff80ff 	.word	0xffff80ff

080024e8 <Usart2_Copy_Into_TX_Buffer>:
*/
    /* Loop forever */
	//for(;;);
//}

void Usart2_Copy_Into_TX_Buffer(uint8_t* message){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	for(int i=0;i < MESSAGE_BLOCK_BYTES;i++){
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	e00a      	b.n	800250c <Usart2_Copy_Into_TX_Buffer+0x24>
		*(usart2_TX_buffer + i) = *(message + i);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	18d2      	adds	r2, r2, r3
 80024fc:	68f9      	ldr	r1, [r7, #12]
 80024fe:	4b07      	ldr	r3, [pc, #28]	; (800251c <Usart2_Copy_Into_TX_Buffer+0x34>)
 8002500:	18cb      	adds	r3, r1, r3
 8002502:	7812      	ldrb	r2, [r2, #0]
 8002504:	701a      	strb	r2, [r3, #0]
	for(int i=0;i < MESSAGE_BLOCK_BYTES;i++){
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	3301      	adds	r3, #1
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b0d      	cmp	r3, #13
 8002510:	ddf1      	ble.n	80024f6 <Usart2_Copy_Into_TX_Buffer+0xe>
	}
}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	b004      	add	sp, #16
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000634 	.word	0x20000634

08002520 <Usart2_Process_RX_Buffer>:

void Usart2_Process_RX_Buffer(){
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
	//Checks if the message array is full
	if(server_msg_queue_full_flag == 0){
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <Usart2_Process_RX_Buffer+0x1c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d103      	bne.n	8002534 <Usart2_Process_RX_Buffer+0x14>
		//Store received messages in message_queue array and process them later
		//DMA_Set_Ch1_Destination();
		//DMA_Start_Ch1_Transfer();
		server_message_queue_add(usart2_RX_buffer);
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <Usart2_Process_RX_Buffer+0x20>)
 800252e:	0018      	movs	r0, r3
 8002530:	f7ff f97c 	bl	800182c <server_message_queue_add>
	} else {
		//Do something when the array is full
		//Maybe go into error state
	}
}
 8002534:	46c0      	nop			; (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	200003f6 	.word	0x200003f6
 8002540:	20000644 	.word	0x20000644

08002544 <USART2_Send_Data>:

void USART2_Send_Data(uint16_t noDataBlocks){ //DMA Transmission
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	0002      	movs	r2, r0
 800254c:	1dbb      	adds	r3, r7, #6
 800254e:	801a      	strh	r2, [r3, #0]

	//BUSY: Busy flag, It is active when a communication is ongoing on the RX line
	while (USART_ISR & BIT16);
 8002550:	46c0      	nop			; (mov r8, r8)
 8002552:	4b12      	ldr	r3, [pc, #72]	; (800259c <USART2_Send_Data+0x58>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	025b      	lsls	r3, r3, #9
 800255a:	4013      	ands	r3, r2
 800255c:	d1f9      	bne.n	8002552 <USART2_Send_Data+0xe>

	//Waits for any ongoing transmission to complete
	while (USART_transmission_in_progress_flag == 1){
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <USART2_Send_Data+0x5c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d0fb      	beq.n	8002560 <USART2_Send_Data+0x1c>
		//Transmission in progress
	}

	USART_transmission_in_progress_flag = 1; //Set transmission in progress flag
 8002568:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <USART2_Send_Data+0x5c>)
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]

	//Clear the TC flag in the USART_ISR register by setting the TCCF bit in the USART_ICR register.
	USART_ICR |= BIT6; //Bit 6 TCCF: Transmission complete clear flag. Writing 1 to this bit clears the TC flag in the USART_ISR register.
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <USART2_Send_Data+0x60>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <USART2_Send_Data+0x60>)
 8002574:	2140      	movs	r1, #64	; 0x40
 8002576:	430a      	orrs	r2, r1
 8002578:	601a      	str	r2, [r3, #0]

	USART_CR1 |= BIT6; //TCIE: Transmission complete interrupt enable, 1: A USART interrupt is generated whenever TC=1 in the USART_ISR register
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <USART2_Send_Data+0x64>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <USART2_Send_Data+0x64>)
 8002580:	2140      	movs	r1, #64	; 0x40
 8002582:	430a      	orrs	r2, r1
 8002584:	601a      	str	r2, [r3, #0]
	USART2_Transmission_Enable(); // TE: Transmitter enable
 8002586:	f000 f957 	bl	8002838 <USART2_Transmission_Enable>

	//Setting the number of transmission data blocks with everything enabled should start the transmission
	USART2_Set_Transmission_Blocks(noDataBlocks);
 800258a:	1dbb      	adds	r3, r7, #6
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	0018      	movs	r0, r3
 8002590:	f000 f960 	bl	8002854 <USART2_Set_Transmission_Blocks>

	//DMA Transmission starts - Completed through interrupt
}
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b002      	add	sp, #8
 800259a:	bd80      	pop	{r7, pc}
 800259c:	4000441c 	.word	0x4000441c
 80025a0:	20000652 	.word	0x20000652
 80025a4:	40004420 	.word	0x40004420
 80025a8:	40004400 	.word	0x40004400

080025ac <initialize_USART2>:

void initialize_USART2(){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
	that the transmission of the last frame is complete. This is required for instance when
	the USART is disabled or enters the Halt mode to avoid corrupting the last
	transmission.*/

	// USART Registers
	USART_CR1 &= ~(1 << 0); // UE: USART enable 0: USART prescaler and outputs disabled, low-power mode
 80025b0:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <initialize_USART2+0x78>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <initialize_USART2+0x78>)
 80025b6:	2101      	movs	r1, #1
 80025b8:	438a      	bics	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]
	USART_CR1 &= ~(1 << 28); // Bit 28 M1: Word length M[1:0] = 00: 1 Start bit, 8 data bits, n stop bits
 80025bc:	4b19      	ldr	r3, [pc, #100]	; (8002624 <initialize_USART2+0x78>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b18      	ldr	r3, [pc, #96]	; (8002624 <initialize_USART2+0x78>)
 80025c2:	4919      	ldr	r1, [pc, #100]	; (8002628 <initialize_USART2+0x7c>)
 80025c4:	400a      	ands	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]
	USART_CR1 &= ~(1 << 12); // Bit 12 M0: Word length (both M1 and M0 = M[1:0])
 80025c8:	4b16      	ldr	r3, [pc, #88]	; (8002624 <initialize_USART2+0x78>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b15      	ldr	r3, [pc, #84]	; (8002624 <initialize_USART2+0x78>)
 80025ce:	4917      	ldr	r1, [pc, #92]	; (800262c <initialize_USART2+0x80>)
 80025d0:	400a      	ands	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]
	//USART_CR1 |= (1 << 7); //TXEIE: interrupt enable 1: A USART interrupt is generated whenever TXE=1 in the USART_ISR register
	//USART_CR1 |= (1 << 5); //RXNEIE: RXNE interrupt enable 1: A USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_ISR register
	//--USART_ICR |= BIT6; //Bit 6 TCCF: Transmission complete clear flag. Writing 1 to this bit clears the TC flag in the USART_ISR register.
	//--USART_CR1 |= BIT6; //TCIE: Transmission complete interrupt enable, 1: A USART interrupt is generated whenever TC=1 in the USART_ISR register
	USART_BRR |= (0x683 << 0); // BRR[15:4] = USARTDIV[15:4] = 0683h and When OVER8 = 0, BRR[3:0] = USARTDIV[3:0].
 80025d4:	4b16      	ldr	r3, [pc, #88]	; (8002630 <initialize_USART2+0x84>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b15      	ldr	r3, [pc, #84]	; (8002630 <initialize_USART2+0x84>)
 80025da:	4916      	ldr	r1, [pc, #88]	; (8002634 <initialize_USART2+0x88>)
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
	USART_CR2 &= ~(0x3 << 12); // STOP[1:0]: STOP bits 00: 1 stop bit (default)
 80025e0:	4b15      	ldr	r3, [pc, #84]	; (8002638 <initialize_USART2+0x8c>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <initialize_USART2+0x8c>)
 80025e6:	4915      	ldr	r1, [pc, #84]	; (800263c <initialize_USART2+0x90>)
 80025e8:	400a      	ands	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]
	//USART_CR3 |= BIT8; //RTSE: RTS enable, 1: RTS output enabled, data is only requested when there is space in the receive buffer.
	//USART_CR3 |= BIT9; //CTSE: CTS enable, 1: CTS mode enabled, data is only transmitted when the CTS input is deasserted (tied to 0).
	USART_CR1 |= (1 << 0); // UE: USART enable 1: USART enabled
 80025ec:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <initialize_USART2+0x78>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <initialize_USART2+0x78>)
 80025f2:	2101      	movs	r1, #1
 80025f4:	430a      	orrs	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]
	USART_CR3 |= (1 << 7); //DMAT: DMA enable transmitter 1: DMA mode is enabled for transmission
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <initialize_USART2+0x94>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b10      	ldr	r3, [pc, #64]	; (8002640 <initialize_USART2+0x94>)
 80025fe:	2180      	movs	r1, #128	; 0x80
 8002600:	430a      	orrs	r2, r1
 8002602:	601a      	str	r2, [r3, #0]
	USART_CR3 |= (1 << 6); //DMAR: DMA enable receiver 1: DMA mode is enabled for reception
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <initialize_USART2+0x94>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <initialize_USART2+0x94>)
 800260a:	2140      	movs	r1, #64	; 0x40
 800260c:	430a      	orrs	r2, r1
 800260e:	601a      	str	r2, [r3, #0]
	USART_CR1 |= (1 << 2); //RE: Receiver enable 1: Receiver is enabled and begins searching for a start bit
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <initialize_USART2+0x78>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b03      	ldr	r3, [pc, #12]	; (8002624 <initialize_USART2+0x78>)
 8002616:	2104      	movs	r1, #4
 8002618:	430a      	orrs	r2, r1
 800261a:	601a      	str	r2, [r3, #0]

	// PA0 USART2_CTS AF4, PA1 USART2_RTS/USART2_DE AF4
	//USART2_Transmission_Enable(); // TE: Transmitter enable

	//The TE bit must be set before writing the data to be transmitted to the USART_TDR.
}
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	40004400 	.word	0x40004400
 8002628:	efffffff 	.word	0xefffffff
 800262c:	ffffefff 	.word	0xffffefff
 8002630:	4000440c 	.word	0x4000440c
 8002634:	00000683 	.word	0x00000683
 8002638:	40004404 	.word	0x40004404
 800263c:	ffffcfff 	.word	0xffffcfff
 8002640:	40004408 	.word	0x40004408

08002644 <initialize_USART2_DMA>:

void initialize_USART2_DMA(){
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
	//Reception using DMA, transfer complete: TCIF=1 in DMA_ISR
	//Transmission using DMA, transfer complete: Software waits until TC=1 (Not DMA interrupt)
	//Reception size is always UART_RECEIVE_BUFFER_SIZE

	//Set DMA Registers
	DMA_CSELR |= (0x4 << 12); //USART2_TX on ch4
 8002648:	4b61      	ldr	r3, [pc, #388]	; (80027d0 <initialize_USART2_DMA+0x18c>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b60      	ldr	r3, [pc, #384]	; (80027d0 <initialize_USART2_DMA+0x18c>)
 800264e:	2180      	movs	r1, #128	; 0x80
 8002650:	01c9      	lsls	r1, r1, #7
 8002652:	430a      	orrs	r2, r1
 8002654:	601a      	str	r2, [r3, #0]
	DMA_CSELR |= (0x4 << 16); //USART2_RX on ch5
 8002656:	4b5e      	ldr	r3, [pc, #376]	; (80027d0 <initialize_USART2_DMA+0x18c>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4b5d      	ldr	r3, [pc, #372]	; (80027d0 <initialize_USART2_DMA+0x18c>)
 800265c:	2180      	movs	r1, #128	; 0x80
 800265e:	02c9      	lsls	r1, r1, #11
 8002660:	430a      	orrs	r2, r1
 8002662:	601a      	str	r2, [r3, #0]
	DMA_CPAR4 = &USART_TDR; //It contains the base address of the peripheral data register from/to which the data will be read/written.
 8002664:	4b5b      	ldr	r3, [pc, #364]	; (80027d4 <initialize_USART2_DMA+0x190>)
 8002666:	4a5c      	ldr	r2, [pc, #368]	; (80027d8 <initialize_USART2_DMA+0x194>)
 8002668:	601a      	str	r2, [r3, #0]
	DMA_CPAR5 = &USART_RDR;
 800266a:	4b5c      	ldr	r3, [pc, #368]	; (80027dc <initialize_USART2_DMA+0x198>)
 800266c:	4a5c      	ldr	r2, [pc, #368]	; (80027e0 <initialize_USART2_DMA+0x19c>)
 800266e:	601a      	str	r2, [r3, #0]
	DMA_CMAR4 |= (uint32_t)usart2_TX_buffer; //It contains the base address of the memory from/to which the data will be read/written.
 8002670:	4b5c      	ldr	r3, [pc, #368]	; (80027e4 <initialize_USART2_DMA+0x1a0>)
 8002672:	6819      	ldr	r1, [r3, #0]
 8002674:	4a5c      	ldr	r2, [pc, #368]	; (80027e8 <initialize_USART2_DMA+0x1a4>)
 8002676:	4b5b      	ldr	r3, [pc, #364]	; (80027e4 <initialize_USART2_DMA+0x1a0>)
 8002678:	430a      	orrs	r2, r1
 800267a:	601a      	str	r2, [r3, #0]
	DMA_CMAR5 |= (uint32_t)usart2_RX_buffer;
 800267c:	4b5b      	ldr	r3, [pc, #364]	; (80027ec <initialize_USART2_DMA+0x1a8>)
 800267e:	6819      	ldr	r1, [r3, #0]
 8002680:	4a5b      	ldr	r2, [pc, #364]	; (80027f0 <initialize_USART2_DMA+0x1ac>)
 8002682:	4b5a      	ldr	r3, [pc, #360]	; (80027ec <initialize_USART2_DMA+0x1a8>)
 8002684:	430a      	orrs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]
	//DMA_CNDTR4 = UART_TRANSFER_BUFFER_SIZE; //NDT[15:0]: number of data to transfer ch4 (send)
	DMA_CNDTR5 = MESSAGE_BLOCK_BYTES; //NDT[15:0]: number of data to transfer ch5 (receive)
 8002688:	4b5a      	ldr	r3, [pc, #360]	; (80027f4 <initialize_USART2_DMA+0x1b0>)
 800268a:	220e      	movs	r2, #14
 800268c:	601a      	str	r2, [r3, #0]
	DMA_CCR4 |= (0x2 << 12); //PL[1:0]: priority level - High
 800268e:	4b5a      	ldr	r3, [pc, #360]	; (80027f8 <initialize_USART2_DMA+0x1b4>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4b59      	ldr	r3, [pc, #356]	; (80027f8 <initialize_USART2_DMA+0x1b4>)
 8002694:	2180      	movs	r1, #128	; 0x80
 8002696:	0189      	lsls	r1, r1, #6
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]
	DMA_CCR5 |= (0x3 << 12); //PL[1:0]: priority level - Very high (Receive with highest priority)
 800269c:	4b57      	ldr	r3, [pc, #348]	; (80027fc <initialize_USART2_DMA+0x1b8>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b56      	ldr	r3, [pc, #344]	; (80027fc <initialize_USART2_DMA+0x1b8>)
 80026a2:	21c0      	movs	r1, #192	; 0xc0
 80026a4:	0189      	lsls	r1, r1, #6
 80026a6:	430a      	orrs	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
	DMA_CCR4 |= (0x1 << 4); //DIR: data transfer direction 1: read from memory
 80026aa:	4b53      	ldr	r3, [pc, #332]	; (80027f8 <initialize_USART2_DMA+0x1b4>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4b52      	ldr	r3, [pc, #328]	; (80027f8 <initialize_USART2_DMA+0x1b4>)
 80026b0:	2110      	movs	r1, #16
 80026b2:	430a      	orrs	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]
	DMA_CCR5 &= ~(1 << 4); //DIR: data transfer direction 0: read from peripheral
 80026b6:	4b51      	ldr	r3, [pc, #324]	; (80027fc <initialize_USART2_DMA+0x1b8>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b50      	ldr	r3, [pc, #320]	; (80027fc <initialize_USART2_DMA+0x1b8>)
 80026bc:	2110      	movs	r1, #16
 80026be:	438a      	bics	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]
	DMA_CCR4 &= ~(1 << 6); //PINC: peripheral increment mode - Automatic increment for the next block transfer
 80026c2:	4b4d      	ldr	r3, [pc, #308]	; (80027f8 <initialize_USART2_DMA+0x1b4>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	4b4c      	ldr	r3, [pc, #304]	; (80027f8 <initialize_USART2_DMA+0x1b4>)
 80026c8:	2140      	movs	r1, #64	; 0x40
 80026ca:	438a      	bics	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]
	DMA_CCR5 &= ~(1 << 6); //PINC: peripheral increment mode
 80026ce:	4b4b      	ldr	r3, [pc, #300]	; (80027fc <initialize_USART2_DMA+0x1b8>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	4b4a      	ldr	r3, [pc, #296]	; (80027fc <initialize_USART2_DMA+0x1b8>)
 80026d4:	2140      	movs	r1, #64	; 0x40
 80026d6:	438a      	bics	r2, r1
 80026d8:	601a      	str	r2, [r3, #0]
	DMA_CCR4 |= (1 << 7); //MINC: memory increment mode - Automatic increment for the next block transfer
 80026da:	4b47      	ldr	r3, [pc, #284]	; (80027f8 <initialize_USART2_DMA+0x1b4>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4b46      	ldr	r3, [pc, #280]	; (80027f8 <initialize_USART2_DMA+0x1b4>)
 80026e0:	2180      	movs	r1, #128	; 0x80
 80026e2:	430a      	orrs	r2, r1
 80026e4:	601a      	str	r2, [r3, #0]
	DMA_CCR5 |= (1 << 7); //MINC: memory increment mode - Otherwise only sends the first term
 80026e6:	4b45      	ldr	r3, [pc, #276]	; (80027fc <initialize_USART2_DMA+0x1b8>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4b44      	ldr	r3, [pc, #272]	; (80027fc <initialize_USART2_DMA+0x1b8>)
 80026ec:	2180      	movs	r1, #128	; 0x80
 80026ee:	430a      	orrs	r2, r1
 80026f0:	601a      	str	r2, [r3, #0]
	DMA_CCR4 &= ~(0x2 << 8); //PSIZE[1:0]: peripheral size 00: 8 bits
 80026f2:	4b41      	ldr	r3, [pc, #260]	; (80027f8 <initialize_USART2_DMA+0x1b4>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	4b40      	ldr	r3, [pc, #256]	; (80027f8 <initialize_USART2_DMA+0x1b4>)
 80026f8:	4941      	ldr	r1, [pc, #260]	; (8002800 <initialize_USART2_DMA+0x1bc>)
 80026fa:	400a      	ands	r2, r1
 80026fc:	601a      	str	r2, [r3, #0]
	DMA_CCR5 &= ~(0x2 << 8); //PSIZE[1:0]: peripheral size 00: 8 bits
 80026fe:	4b3f      	ldr	r3, [pc, #252]	; (80027fc <initialize_USART2_DMA+0x1b8>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	4b3e      	ldr	r3, [pc, #248]	; (80027fc <initialize_USART2_DMA+0x1b8>)
 8002704:	493e      	ldr	r1, [pc, #248]	; (8002800 <initialize_USART2_DMA+0x1bc>)
 8002706:	400a      	ands	r2, r1
 8002708:	601a      	str	r2, [r3, #0]
	DMA_CCR4 &= ~(0x2 << 10); //MSIZE[1:0]: memory size 00: 8 bits
 800270a:	4b3b      	ldr	r3, [pc, #236]	; (80027f8 <initialize_USART2_DMA+0x1b4>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4b3a      	ldr	r3, [pc, #232]	; (80027f8 <initialize_USART2_DMA+0x1b4>)
 8002710:	493c      	ldr	r1, [pc, #240]	; (8002804 <initialize_USART2_DMA+0x1c0>)
 8002712:	400a      	ands	r2, r1
 8002714:	601a      	str	r2, [r3, #0]
	DMA_CCR5 &= ~(0x2 << 10); //MSIZE[1:0]: memory size 00: 8 bits
 8002716:	4b39      	ldr	r3, [pc, #228]	; (80027fc <initialize_USART2_DMA+0x1b8>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4b38      	ldr	r3, [pc, #224]	; (80027fc <initialize_USART2_DMA+0x1b8>)
 800271c:	4939      	ldr	r1, [pc, #228]	; (8002804 <initialize_USART2_DMA+0x1c0>)
 800271e:	400a      	ands	r2, r1
 8002720:	601a      	str	r2, [r3, #0]
	//DMA_CCR4 |= (0x1 << 1); //TCIE: transfer complete interrupt enable
	DMA_CCR5 |= (0x1 << 1); //TCIE: transfer complete interrupt enable. Reception using DMA transfer complete: TCIF=1 in DMA_ISR
 8002722:	4b36      	ldr	r3, [pc, #216]	; (80027fc <initialize_USART2_DMA+0x1b8>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b35      	ldr	r3, [pc, #212]	; (80027fc <initialize_USART2_DMA+0x1b8>)
 8002728:	2102      	movs	r1, #2
 800272a:	430a      	orrs	r2, r1
 800272c:	601a      	str	r2, [r3, #0]
	DMA_CCR4 |= (1 << 0); //EN: channel enable
 800272e:	4b32      	ldr	r3, [pc, #200]	; (80027f8 <initialize_USART2_DMA+0x1b4>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <initialize_USART2_DMA+0x1b4>)
 8002734:	2101      	movs	r1, #1
 8002736:	430a      	orrs	r2, r1
 8002738:	601a      	str	r2, [r3, #0]
	DMA_CCR5 |= (1 << 0); //EN: channel enable
 800273a:	4b30      	ldr	r3, [pc, #192]	; (80027fc <initialize_USART2_DMA+0x1b8>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4b2f      	ldr	r3, [pc, #188]	; (80027fc <initialize_USART2_DMA+0x1b8>)
 8002740:	2101      	movs	r1, #1
 8002742:	430a      	orrs	r2, r1
 8002744:	601a      	str	r2, [r3, #0]
	transfers. The transfer stops once the DMA_CNDTRx register reaches zero.
	Note: The memory-to-memory mode must not be used in circular mode. Before enabling a
	channel in memory-to-memory mode (MEM2MEM = 1), the software must clear the CIRC
	bit of the DMA_CCRx register.
	 */
	DMA_CCR1 &= ~BIT5; //CIRC: circular mode, 0: disabled, It must not be written when the channel is enabled (EN = 1).
 8002746:	4b30      	ldr	r3, [pc, #192]	; (8002808 <initialize_USART2_DMA+0x1c4>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4b2f      	ldr	r3, [pc, #188]	; (8002808 <initialize_USART2_DMA+0x1c4>)
 800274c:	2120      	movs	r1, #32
 800274e:	438a      	bics	r2, r1
 8002750:	601a      	str	r2, [r3, #0]
	DMA_CCR1 |= (0x03 << 12);//PL[1:0]: priority level, 11: very high
 8002752:	4b2d      	ldr	r3, [pc, #180]	; (8002808 <initialize_USART2_DMA+0x1c4>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4b2c      	ldr	r3, [pc, #176]	; (8002808 <initialize_USART2_DMA+0x1c4>)
 8002758:	21c0      	movs	r1, #192	; 0xc0
 800275a:	0189      	lsls	r1, r1, #6
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]
	DMA_CCR1 &= ~(0x03 << 10); //MSIZE[1:0]: memory size, 00: 8 bits
 8002760:	4b29      	ldr	r3, [pc, #164]	; (8002808 <initialize_USART2_DMA+0x1c4>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b28      	ldr	r3, [pc, #160]	; (8002808 <initialize_USART2_DMA+0x1c4>)
 8002766:	4929      	ldr	r1, [pc, #164]	; (800280c <initialize_USART2_DMA+0x1c8>)
 8002768:	400a      	ands	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
	DMA_CCR1 &= ~(0x03 << 8); //PSIZE[1:0]: peripheral size, 00: 8 bits
 800276c:	4b26      	ldr	r3, [pc, #152]	; (8002808 <initialize_USART2_DMA+0x1c4>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b25      	ldr	r3, [pc, #148]	; (8002808 <initialize_USART2_DMA+0x1c4>)
 8002772:	4927      	ldr	r1, [pc, #156]	; (8002810 <initialize_USART2_DMA+0x1cc>)
 8002774:	400a      	ands	r2, r1
 8002776:	601a      	str	r2, [r3, #0]
	DMA_CCR1 |= BIT7; //MINC: memory increment mode, 1: enabled, It must not be written when the channel is enabled (EN = 1).
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <initialize_USART2_DMA+0x1c4>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b22      	ldr	r3, [pc, #136]	; (8002808 <initialize_USART2_DMA+0x1c4>)
 800277e:	2180      	movs	r1, #128	; 0x80
 8002780:	430a      	orrs	r2, r1
 8002782:	601a      	str	r2, [r3, #0]
	DMA_CCR1 |= BIT6; //PINC: peripheral increment mode, 1: enabled, It must not be written when the channel is enabled (EN = 1).
 8002784:	4b20      	ldr	r3, [pc, #128]	; (8002808 <initialize_USART2_DMA+0x1c4>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <initialize_USART2_DMA+0x1c4>)
 800278a:	2140      	movs	r1, #64	; 0x40
 800278c:	430a      	orrs	r2, r1
 800278e:	601a      	str	r2, [r3, #0]
	DMA_CCR1 |= BIT14; //MEM2MEM: memory-to-memory mode, 1: enabled, It must not be written when the channel is enabled (EN = 1).
 8002790:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <initialize_USART2_DMA+0x1c4>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <initialize_USART2_DMA+0x1c4>)
 8002796:	2180      	movs	r1, #128	; 0x80
 8002798:	01c9      	lsls	r1, r1, #7
 800279a:	430a      	orrs	r2, r1
 800279c:	601a      	str	r2, [r3, #0]
	DMA_CCR1 |= BIT4; //DIR: data transfer direction, 1: read from memory
 800279e:	4b1a      	ldr	r3, [pc, #104]	; (8002808 <initialize_USART2_DMA+0x1c4>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4b19      	ldr	r3, [pc, #100]	; (8002808 <initialize_USART2_DMA+0x1c4>)
 80027a4:	2110      	movs	r1, #16
 80027a6:	430a      	orrs	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]
	DMA_CCR1 |= BIT3; //TEIE: transfer error interrupt enable, 1: enabled
 80027aa:	4b17      	ldr	r3, [pc, #92]	; (8002808 <initialize_USART2_DMA+0x1c4>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4b16      	ldr	r3, [pc, #88]	; (8002808 <initialize_USART2_DMA+0x1c4>)
 80027b0:	2108      	movs	r1, #8
 80027b2:	430a      	orrs	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]
	DMA_CNDTR1 = MESSAGE_BLOCK_BYTES; //NDT[15:0]: number of data to transfer
 80027b6:	4b17      	ldr	r3, [pc, #92]	; (8002814 <initialize_USART2_DMA+0x1d0>)
 80027b8:	220e      	movs	r2, #14
 80027ba:	601a      	str	r2, [r3, #0]
	//DMA_CPAR1 = message_queue; //PA[31:0]: peripheral address - Destination set at run time
	DMA_CMAR1 |= (uint32_t)usart2_RX_buffer; //MA[31:0]: peripheral address
 80027bc:	4b16      	ldr	r3, [pc, #88]	; (8002818 <initialize_USART2_DMA+0x1d4>)
 80027be:	6819      	ldr	r1, [r3, #0]
 80027c0:	4a0b      	ldr	r2, [pc, #44]	; (80027f0 <initialize_USART2_DMA+0x1ac>)
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <initialize_USART2_DMA+0x1d4>)
 80027c4:	430a      	orrs	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]

	//DMA_CCR1 |= BIT0; //EN: channel enable, Starts channel transfer
}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	400200a8 	.word	0x400200a8
 80027d4:	4002004c 	.word	0x4002004c
 80027d8:	40004428 	.word	0x40004428
 80027dc:	40020060 	.word	0x40020060
 80027e0:	40004424 	.word	0x40004424
 80027e4:	40020050 	.word	0x40020050
 80027e8:	20000634 	.word	0x20000634
 80027ec:	40020064 	.word	0x40020064
 80027f0:	20000644 	.word	0x20000644
 80027f4:	4002005c 	.word	0x4002005c
 80027f8:	40020044 	.word	0x40020044
 80027fc:	40020058 	.word	0x40020058
 8002800:	fffffdff 	.word	0xfffffdff
 8002804:	fffff7ff 	.word	0xfffff7ff
 8002808:	40020008 	.word	0x40020008
 800280c:	fffff3ff 	.word	0xfffff3ff
 8002810:	fffffcff 	.word	0xfffffcff
 8002814:	4002000c 	.word	0x4002000c
 8002818:	40020014 	.word	0x40020014

0800281c <USART2_Transmission_Disable>:

void USART2_Reception_Enable(){
	USART_CR1 |= BIT2; //RE: Receiver enable 1: Receiver is enabled and begins searching for a start bit
}

void USART2_Transmission_Disable(){
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
	USART_CR1 &= ~BIT3; //TE: Transmitter enable 0: Transmitter is disabled
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <USART2_Transmission_Disable+0x18>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <USART2_Transmission_Disable+0x18>)
 8002826:	2108      	movs	r1, #8
 8002828:	438a      	bics	r2, r1
 800282a:	601a      	str	r2, [r3, #0]
}
 800282c:	46c0      	nop			; (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	40004400 	.word	0x40004400

08002838 <USART2_Transmission_Enable>:

void USART2_Transmission_Enable(){
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
	USART_CR1 |= BIT3; // TE: Transmitter enable, 1: Transmitter is enabled
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <USART2_Transmission_Enable+0x18>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <USART2_Transmission_Enable+0x18>)
 8002842:	2108      	movs	r1, #8
 8002844:	430a      	orrs	r2, r1
 8002846:	601a      	str	r2, [r3, #0]
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	40004400 	.word	0x40004400

08002854 <USART2_Set_Transmission_Blocks>:

//Sets the number of transmitted data blocks that cause transmission complete interrupt
void USART2_Set_Transmission_Blocks(uint16_t noDataBlocks){
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	0002      	movs	r2, r0
 800285c:	1dbb      	adds	r3, r7, #6
 800285e:	801a      	strh	r2, [r3, #0]
	//Number of receive data blocks is set when DMA channel is disabled
	DMA_CCR4 &= ~BIT0; //EN: channel enable, 0: disabled
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <USART2_Set_Transmission_Blocks+0x34>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <USART2_Set_Transmission_Blocks+0x34>)
 8002866:	2101      	movs	r1, #1
 8002868:	438a      	bics	r2, r1
 800286a:	601a      	str	r2, [r3, #0]
	DMA_CNDTR4 = noDataBlocks; //NDT[15:0]: number of data to transfer ch5 (receive)
 800286c:	4b07      	ldr	r3, [pc, #28]	; (800288c <USART2_Set_Transmission_Blocks+0x38>)
 800286e:	1dba      	adds	r2, r7, #6
 8002870:	8812      	ldrh	r2, [r2, #0]
 8002872:	601a      	str	r2, [r3, #0]
	DMA_CCR4 |= BIT0; //EN: channel enable, 1: enabled
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <USART2_Set_Transmission_Blocks+0x34>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <USART2_Set_Transmission_Blocks+0x34>)
 800287a:	2101      	movs	r1, #1
 800287c:	430a      	orrs	r2, r1
 800287e:	601a      	str	r2, [r3, #0]
}
 8002880:	46c0      	nop			; (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b002      	add	sp, #8
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40020044 	.word	0x40020044
 800288c:	40020048 	.word	0x40020048

08002890 <USART2_Set_Reception_Blocks>:

//Sets the number of received data blocks that cause reception complete interrupt
void USART2_Set_Reception_Blocks(uint16_t noDataBlocks){
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	0002      	movs	r2, r0
 8002898:	1dbb      	adds	r3, r7, #6
 800289a:	801a      	strh	r2, [r3, #0]
	//Number of receive data blocks is set when DMA channel is disabled
	DMA_CCR5 &= ~BIT0; //EN: channel enable, 0: disabled
 800289c:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <USART2_Set_Reception_Blocks+0x34>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <USART2_Set_Reception_Blocks+0x34>)
 80028a2:	2101      	movs	r1, #1
 80028a4:	438a      	bics	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]
	DMA_CNDTR5 = noDataBlocks; //NDT[15:0]: number of data to transfer ch5 (receive)
 80028a8:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <USART2_Set_Reception_Blocks+0x38>)
 80028aa:	1dba      	adds	r2, r7, #6
 80028ac:	8812      	ldrh	r2, [r2, #0]
 80028ae:	601a      	str	r2, [r3, #0]
	DMA_CCR5 |= BIT0; //EN: channel enable, 1: enabled
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <USART2_Set_Reception_Blocks+0x34>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <USART2_Set_Reception_Blocks+0x34>)
 80028b6:	2101      	movs	r1, #1
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]
}
 80028bc:	46c0      	nop			; (mov r8, r8)
 80028be:	46bd      	mov	sp, r7
 80028c0:	b002      	add	sp, #8
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40020058 	.word	0x40020058
 80028c8:	4002005c 	.word	0x4002005c

080028cc <USART2_IRQHandler>:

//For transmission
void USART2_IRQHandler(){
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	//Transmission using DMA, transfer complete: Software waits until TC=1 (USART)
	if (USART_ISR & BIT6){ //Transmission Completed
 80028d0:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <USART2_IRQHandler+0x44>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2240      	movs	r2, #64	; 0x40
 80028d6:	4013      	ands	r3, r2
 80028d8:	d017      	beq.n	800290a <USART2_IRQHandler+0x3e>
		USART_ICR |= BIT6; //Bit 6 TCCF: Transmission complete clear flag. Writing 1 to this bit clears the TC flag in the USART_ISR register.
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <USART2_IRQHandler+0x48>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <USART2_IRQHandler+0x48>)
 80028e0:	2140      	movs	r1, #64	; 0x40
 80028e2:	430a      	orrs	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
		DMA_IFCR |= (1 << 13); //Bit 13 CTCIF4: transfer complete flag clear for channel 4
 80028e6:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <USART2_IRQHandler+0x4c>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <USART2_IRQHandler+0x4c>)
 80028ec:	2180      	movs	r1, #128	; 0x80
 80028ee:	0189      	lsls	r1, r1, #6
 80028f0:	430a      	orrs	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]
		USART2_Transmission_Disable(); // TE: Transmitter enable, 0: Transmitter is disabled
 80028f4:	f7ff ff92 	bl	800281c <USART2_Transmission_Disable>
		USART_CR1 &= ~BIT6; //TCIE: Transmission complete interrupt enable, 0: Interrupt is inhibited
 80028f8:	4b08      	ldr	r3, [pc, #32]	; (800291c <USART2_IRQHandler+0x50>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b07      	ldr	r3, [pc, #28]	; (800291c <USART2_IRQHandler+0x50>)
 80028fe:	2140      	movs	r1, #64	; 0x40
 8002900:	438a      	bics	r2, r1
 8002902:	601a      	str	r2, [r3, #0]
		USART_transmission_in_progress_flag = 0; //Transmission complete
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <USART2_IRQHandler+0x54>)
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
	}
}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	4000441c 	.word	0x4000441c
 8002914:	40004420 	.word	0x40004420
 8002918:	40020004 	.word	0x40020004
 800291c:	40004400 	.word	0x40004400
 8002920:	20000652 	.word	0x20000652

08002924 <DMA1_Channel4_7_IRQHandler>:

//For reception
void DMA1_Channel4_7_IRQHandler(){
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
	//Reception using DMA transfer complete: TCIF=1 in DMA_ISR
	//Signals when specified number of data blocks has been transfered
	if(DMA_ISR & (1 << 17)){ //Bit 17 TCIF5: transfer complete (TC) flag for channel 5, 1: a TC event occurred
 8002928:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <DMA1_Channel4_7_IRQHandler+0x3c>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	029b      	lsls	r3, r3, #10
 8002930:	4013      	ands	r3, r2
 8002932:	d011      	beq.n	8002958 <DMA1_Channel4_7_IRQHandler+0x34>
		DMA_IFCR |= (1 << 17); //Bit 17 CTCIF5: transfer complete flag clear for channel 5
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <DMA1_Channel4_7_IRQHandler+0x40>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <DMA1_Channel4_7_IRQHandler+0x40>)
 800293a:	2180      	movs	r1, #128	; 0x80
 800293c:	0289      	lsls	r1, r1, #10
 800293e:	430a      	orrs	r2, r1
 8002940:	601a      	str	r2, [r3, #0]
		USART_ICR |= BIT6; //Bit 6 TCCF: Transmission complete clear flag. Writing 1 to this bit clears the TC flag in the USART_ISR register.
 8002942:	4b09      	ldr	r3, [pc, #36]	; (8002968 <DMA1_Channel4_7_IRQHandler+0x44>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <DMA1_Channel4_7_IRQHandler+0x44>)
 8002948:	2140      	movs	r1, #64	; 0x40
 800294a:	430a      	orrs	r2, r1
 800294c:	601a      	str	r2, [r3, #0]
		//NDT[15:0]: number of data to transfer ch5 (receive) is reset
		USART2_Set_Reception_Blocks(MESSAGE_BLOCK_BYTES); //Must set this to receive another UART message
 800294e:	200e      	movs	r0, #14
 8002950:	f7ff ff9e 	bl	8002890 <USART2_Set_Reception_Blocks>
		Usart2_Process_RX_Buffer();
 8002954:	f7ff fde4 	bl	8002520 <Usart2_Process_RX_Buffer>
		//First clear the TEIFx bit of the DMA_ISR register
	}

	//Deal with DMA transfer error interrupts - Error interrupts have been enabled
	//Put the device into error state
}
 8002958:	46c0      	nop			; (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	40020000 	.word	0x40020000
 8002964:	40020004 	.word	0x40020004
 8002968:	40004420 	.word	0x40004420

0800296c <main>:

//Device Status
uint32_t device_status = 0;

int main(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
	//Ch1 On message reception from server usart2_RX_buffer to message_queue
	//Ch4 USART2_TX to usart2_TX_buffer
	//Ch5 USART2_RX to usart2_RX_buffer

	//Initialize Clock
	intialize_Clock_HSI16();
 8002972:	f7fd fdc5 	bl	8000500 <intialize_Clock_HSI16>
	set_system_clock();
 8002976:	f7fd fdd1 	bl	800051c <set_system_clock>
	initialize_LSE_Clock();
 800297a:	f7fd fe19 	bl	80005b0 <initialize_LSE_Clock>

	//Initialize GPIO_Clock
	initialize_GPIOA_Clock();
 800297e:	f7fd fdfb 	bl	8000578 <initialize_GPIOA_Clock>
	initialize_GPIOB_Clock();
 8002982:	f7fd fe07 	bl	8000594 <initialize_GPIOB_Clock>

	//Initialize Peripheral Clock
	initialize_I2C1_Clock();
 8002986:	f7fd fdd7 	bl	8000538 <initialize_I2C1_Clock>
	initialize_LPTIM1_Clock();
 800298a:	f7fd fe4f 	bl	800062c <initialize_LPTIM1_Clock>
	initialize_USART2_Clock();
 800298e:	f7fd fe73 	bl	8000678 <initialize_USART2_Clock>
	initialize_DMA_Clock();
 8002992:	f7fd fe63 	bl	800065c <initialize_DMA_Clock>

	//Initialize EXTI
	intialize_EXTI_RTC();
 8002996:	f7fe fcc7 	bl	8001328 <intialize_EXTI_RTC>

	//Initialize NVIC
	intialize_NVIC_I2C1();
 800299a:	f7fe fd43 	bl	8001424 <intialize_NVIC_I2C1>
	initialize_NVIC_LPTIM1();
 800299e:	f7fe fcfb 	bl	8001398 <initialize_NVIC_LPTIM1>
	intialize_NVIC_USART2();
 80029a2:	f7fe fd4d 	bl	8001440 <intialize_NVIC_USART2>
	intialize_NVIC_DMA_CH47();
 80029a6:	f7fe fd59 	bl	800145c <intialize_NVIC_DMA_CH47>
	intialize_NVIC_RTC();
 80029aa:	f7fe fd65 	bl	8001478 <intialize_NVIC_RTC>
	intialize_NVIC_AES_RNG_LPUART1(); //Global queue processing interrupt
 80029ae:	f7fe fd01 	bl	80013b4 <intialize_NVIC_AES_RNG_LPUART1>
	initialize_NVIC_interrupt_priorities(); //Sets interrupt priorities
 80029b2:	f7fe fcd1 	bl	8001358 <initialize_NVIC_interrupt_priorities>

	//Initialize GPIO Pins
	intialize_GPIO_I2C1();
 80029b6:	f7fe fafd 	bl	8000fb4 <intialize_GPIO_I2C1>
	initialize_GPIOA_GPO_PP(7); //For LPTIM calibration - erase later
 80029ba:	2007      	movs	r0, #7
 80029bc:	f7fd fedc 	bl	8000778 <initialize_GPIOA_GPO_PP>
	intialize_GPIO_USART2();
 80029c0:	f7fd ff70 	bl	80008a4 <intialize_GPIO_USART2>
	initialize_GPIO_AM2302();
 80029c4:	f7fd ff62 	bl	800088c <initialize_GPIO_AM2302>

	//Initialize Peripherals
	initialize_I2C1();
 80029c8:	f7fe fbd0 	bl	800116c <initialize_I2C1>
	initialize_LPTIM();
 80029cc:	f7fe fc3c 	bl	8001248 <initialize_LPTIM>
	initialize_USART2_DMA();
 80029d0:	f7ff fe38 	bl	8002644 <initialize_USART2_DMA>
	initialize_USART2();
 80029d4:	f7ff fdea 	bl	80025ac <initialize_USART2>
	intialize_RTC_Clock();
 80029d8:	f7ff f80c 	bl	80019f4 <intialize_RTC_Clock>

	//Initialize RTC variables
	RTC_AlarmA_Init_Sec(); //Mask: Alarm A will look for seconds match only
 80029dc:	f7ff f910 	bl	8001c00 <RTC_AlarmA_Init_Sec>

	//Initialize EEPROM variables
	EEPROM_Reset_Data_Pointers(EEPROM_CHIP1_ADDRESS); //Reset EEPROM write pointer and data block count (pointer on the EEPROM chip)
 80029e0:	2001      	movs	r0, #1
 80029e2:	f7fe f85b 	bl	8000a9c <EEPROM_Reset_Data_Pointers>
	EEPROM_Reset_Data_Pointers(EEPROM_CHIP2_ADDRESS); //Reset EEPROM write pointer and data block count (pointer on the EEPROM chip)
 80029e6:	2002      	movs	r0, #2
 80029e8:	f7fe f858 	bl	8000a9c <EEPROM_Reset_Data_Pointers>

	//-----------Debug
	//Prepare data to be sent
	for(int i=0;i<DATA_BLOCK_BYTES;i++){
 80029ec:	2300      	movs	r3, #0
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	e00b      	b.n	8002a0a <main+0x9e>
		EEPROM_send_data[i]=i+30;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	331e      	adds	r3, #30
 80029f8:	b2d9      	uxtb	r1, r3
 80029fa:	4a0f      	ldr	r2, [pc, #60]	; (8002a38 <main+0xcc>)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	18d3      	adds	r3, r2, r3
 8002a00:	1c0a      	adds	r2, r1, #0
 8002a02:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<DATA_BLOCK_BYTES;i++){
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3301      	adds	r3, #1
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b0c      	cmp	r3, #12
 8002a0e:	ddf0      	ble.n	80029f2 <main+0x86>
	//I2C_EEPROM_Write(0x01, 0x0001, 63, 0x1);
	//I2C_EEPROM_Write(0x0003, 0x04);
	//EEPROM_Store_Data_Block(EEPROM_CHIP1_ADDRESS); //Uses EEPROM_send_data (global variable)

	//Prepare data to be sent
	for(int i=0;i<DATA_BLOCK_BYTES;i++){
 8002a10:	2300      	movs	r3, #0
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	e00b      	b.n	8002a2e <main+0xc2>
		EEPROM_send_data[i]=i+40;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	3328      	adds	r3, #40	; 0x28
 8002a1c:	b2d9      	uxtb	r1, r3
 8002a1e:	4a06      	ldr	r2, [pc, #24]	; (8002a38 <main+0xcc>)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	18d3      	adds	r3, r2, r3
 8002a24:	1c0a      	adds	r2, r1, #0
 8002a26:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<DATA_BLOCK_BYTES;i++){
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	603b      	str	r3, [r7, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b0c      	cmp	r3, #12
 8002a32:	ddf0      	ble.n	8002a16 <main+0xaa>

	//EEPROM_Store_Data_Block(EEPROM_CHIP1_ADDRESS); //Uses EEPROM_send_data (global variable)
	//I2C_EEPROM_Read(0x01, 0x0000, (DATA_BLOCK_BYTES*2+4));

    /* Loop forever */
 	for(;;);
 8002a34:	e7fe      	b.n	8002a34 <main+0xc8>
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	20000074 	.word	0x20000074

08002a3c <get_mcu_serial>:
}

//Parameter is the first data byte pointer
void get_mcu_serial(uint8_t* target){
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	//DEVICE_ID1
	*target = DEVICE_ID1;
 8002a44:	4b29      	ldr	r3, [pc, #164]	; (8002aec <get_mcu_serial+0xb0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	701a      	strb	r2, [r3, #0]
	*(target + 1) = (DEVICE_ID1 >> 8);
 8002a4e:	4b27      	ldr	r3, [pc, #156]	; (8002aec <get_mcu_serial+0xb0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	0a1a      	lsrs	r2, r3, #8
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3301      	adds	r3, #1
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	701a      	strb	r2, [r3, #0]
	*(target + 2) = (DEVICE_ID1 >> 16);
 8002a5c:	4b23      	ldr	r3, [pc, #140]	; (8002aec <get_mcu_serial+0xb0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	0c1a      	lsrs	r2, r3, #16
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3302      	adds	r3, #2
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]
	*(target + 3) = (DEVICE_ID1 >> 24);
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <get_mcu_serial+0xb0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	0e1a      	lsrs	r2, r3, #24
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3303      	adds	r3, #3
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	701a      	strb	r2, [r3, #0]

	//DEVICE_ID2
	*(target + 4) = DEVICE_ID2;
 8002a78:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <get_mcu_serial+0xb4>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	701a      	strb	r2, [r3, #0]
	*(target + 5) = (DEVICE_ID2 >> 8);
 8002a84:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <get_mcu_serial+0xb4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0a1a      	lsrs	r2, r3, #8
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3305      	adds	r3, #5
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]
	*(target + 6) = (DEVICE_ID2 >> 16);
 8002a92:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <get_mcu_serial+0xb4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	0c1a      	lsrs	r2, r3, #16
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3306      	adds	r3, #6
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	701a      	strb	r2, [r3, #0]
	*(target + 7) = (DEVICE_ID2 >> 24);
 8002aa0:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <get_mcu_serial+0xb4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	0e1a      	lsrs	r2, r3, #24
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3307      	adds	r3, #7
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	701a      	strb	r2, [r3, #0]

	//DEVICE_ID3
	*(target + 8) = DEVICE_ID3;
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <get_mcu_serial+0xb8>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3308      	adds	r3, #8
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]
	*(target + 9) = (DEVICE_ID3 >> 8);
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <get_mcu_serial+0xb8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	0a1a      	lsrs	r2, r3, #8
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3309      	adds	r3, #9
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]
	*(target + 10) = (DEVICE_ID3 >> 16);
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <get_mcu_serial+0xb8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0c1a      	lsrs	r2, r3, #16
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	330a      	adds	r3, #10
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]
	*(target + 11) = (DEVICE_ID3 >> 24);
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <get_mcu_serial+0xb8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	0e1a      	lsrs	r2, r3, #24
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	330b      	adds	r3, #11
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	701a      	strb	r2, [r3, #0]
}
 8002ae4:	46c0      	nop			; (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b002      	add	sp, #8
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	1ff80050 	.word	0x1ff80050
 8002af0:	1ff80054 	.word	0x1ff80054
 8002af4:	1ff80064 	.word	0x1ff80064

08002af8 <label_message_type>:

//Adds message label to a specified byte in the message array
void label_message_type(uint8_t byteNumber, uint8_t label, uint8_t* message){
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	603a      	str	r2, [r7, #0]
 8002b00:	1dfb      	adds	r3, r7, #7
 8002b02:	1c02      	adds	r2, r0, #0
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	1dbb      	adds	r3, r7, #6
 8002b08:	1c0a      	adds	r2, r1, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
	*(message + byteNumber) = label;
 8002b0c:	1dfb      	adds	r3, r7, #7
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	18d3      	adds	r3, r2, r3
 8002b14:	1dba      	adds	r2, r7, #6
 8002b16:	7812      	ldrb	r2, [r2, #0]
 8002b18:	701a      	strb	r2, [r3, #0]
}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b002      	add	sp, #8
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <Get_Data_From_Sensors>:

void Get_Data_From_Sensors(uint8_t* message){
 8002b24:	b590      	push	{r4, r7, lr}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
	//If there is an error in transmission try again until max tries
	uint8_t c = 1;
 8002b2c:	230f      	movs	r3, #15
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
	uint8_t noTries = 0;
 8002b34:	230e      	movs	r3, #14
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
	while (c != 0 && noTries <= SENSORS_MAX_GET_DATA_TRIES){
 8002b3c:	e009      	b.n	8002b52 <Get_Data_From_Sensors+0x2e>
		c = AM2302_Request_Data(&RH_data, &temperature_data); //Updates global variables: RH_data, Temperature_data
 8002b3e:	230f      	movs	r3, #15
 8002b40:	18fc      	adds	r4, r7, r3
 8002b42:	4a26      	ldr	r2, [pc, #152]	; (8002bdc <Get_Data_From_Sensors+0xb8>)
 8002b44:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <Get_Data_From_Sensors+0xbc>)
 8002b46:	0011      	movs	r1, r2
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f7fd fb65 	bl	8000218 <AM2302_Request_Data>
 8002b4e:	0003      	movs	r3, r0
 8002b50:	7023      	strb	r3, [r4, #0]
	while (c != 0 && noTries <= SENSORS_MAX_GET_DATA_TRIES){
 8002b52:	230f      	movs	r3, #15
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d004      	beq.n	8002b66 <Get_Data_From_Sensors+0x42>
 8002b5c:	230e      	movs	r3, #14
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b0a      	cmp	r3, #10
 8002b64:	d9eb      	bls.n	8002b3e <Get_Data_From_Sensors+0x1a>
	}

	//In case the max number of tries have been reached (Error in communication)
	if (noTries == SENSORS_MAX_GET_DATA_TRIES){
 8002b66:	230e      	movs	r3, #14
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b0a      	cmp	r3, #10
 8002b6e:	d115      	bne.n	8002b9c <Get_Data_From_Sensors+0x78>
		switch (c) {
 8002b70:	230f      	movs	r3, #15
 8002b72:	18fb      	adds	r3, r7, r3
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d002      	beq.n	8002b80 <Get_Data_From_Sensors+0x5c>
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d007      	beq.n	8002b8e <Get_Data_From_Sensors+0x6a>
 8002b7e:	e00d      	b.n	8002b9c <Get_Data_From_Sensors+0x78>
			case 1:
				device_status |= BIT1; //AM2302 Counter timed out
 8002b80:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <Get_Data_From_Sensors+0xc0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2202      	movs	r2, #2
 8002b86:	431a      	orrs	r2, r3
 8002b88:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <Get_Data_From_Sensors+0xc0>)
 8002b8a:	601a      	str	r2, [r3, #0]
				break;
 8002b8c:	e006      	b.n	8002b9c <Get_Data_From_Sensors+0x78>
			case 2:
				device_status |= BIT2; //AM2302 Check_sum failed
 8002b8e:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <Get_Data_From_Sensors+0xc0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2204      	movs	r2, #4
 8002b94:	431a      	orrs	r2, r3
 8002b96:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <Get_Data_From_Sensors+0xc0>)
 8002b98:	601a      	str	r2, [r3, #0]
				break;
 8002b9a:	46c0      	nop			; (mov r8, r8)
		}
	}

	//Add the data on message_block array
	*(message + 9) = RH_data;
 8002b9c:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <Get_Data_From_Sensors+0xbc>)
 8002b9e:	881a      	ldrh	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3309      	adds	r3, #9
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]
	*(message + 10) = (RH_data >> 8);
 8002ba8:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <Get_Data_From_Sensors+0xbc>)
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	0a1b      	lsrs	r3, r3, #8
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	330a      	adds	r3, #10
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	701a      	strb	r2, [r3, #0]
	*(message + 11) = temperature_data;
 8002bb8:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <Get_Data_From_Sensors+0xb8>)
 8002bba:	881a      	ldrh	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	330b      	adds	r3, #11
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	701a      	strb	r2, [r3, #0]
	*(message + 12) = (temperature_data >> 8);
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <Get_Data_From_Sensors+0xb8>)
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	0a1b      	lsrs	r3, r3, #8
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	330c      	adds	r3, #12
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	701a      	strb	r2, [r3, #0]
}
 8002bd4:	46c0      	nop			; (mov r8, r8)
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b005      	add	sp, #20
 8002bda:	bd90      	pop	{r4, r7, pc}
 8002bdc:	20000656 	.word	0x20000656
 8002be0:	20000654 	.word	0x20000654
 8002be4:	20000678 	.word	0x20000678

08002be8 <LPTIM1_IRQHandler>:

void LPTIM1_IRQHandler(){
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
	//MUST CLEAR THIS FLAG
	LPTIM_ICR |= (1 << 1); //ARRMCF: Autoreload match clear flag Writing 1 to this bit clears the ARRM flag in the LPTIM_ISR register
 8002bec:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <LPTIM1_IRQHandler+0x18>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4b03      	ldr	r3, [pc, #12]	; (8002c00 <LPTIM1_IRQHandler+0x18>)
 8002bf2:	2102      	movs	r1, #2
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]
	if (minutes >= 99){
		minutes = 0;
	}

	LED_Update();*/
}
 8002bf8:	46c0      	nop			; (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	40007c04 	.word	0x40007c04

08002c04 <Process_Global_Message_Queue>:

//The global_msg_queue_processing_index is updated during global_message_queue_get()
void Process_Global_Message_Queue(){
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
	//Triggered by PendSV interrupt
	while(!global_message_queue_is_empty()){
 8002c0a:	e131      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
		//The first byte determines the message type
		uint8_t* pCurrentMessage = global_message_queue_get(); //Gets the pointer to oldest message in global message queue - updates global_msg_queue_processing_index
 8002c0c:	f7fe fcfe 	bl	800160c <global_message_queue_get>
 8002c10:	0003      	movs	r3, r0
 8002c12:	607b      	str	r3, [r7, #4]
		switch (*(pCurrentMessage)) {
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b70      	cmp	r3, #112	; 0x70
 8002c1a:	d900      	bls.n	8002c1e <Process_Global_Message_Queue+0x1a>
 8002c1c:	e121      	b.n	8002e62 <Process_Global_Message_Queue+0x25e>
 8002c1e:	009a      	lsls	r2, r3, #2
 8002c20:	4b98      	ldr	r3, [pc, #608]	; (8002e84 <Process_Global_Message_Queue+0x280>)
 8002c22:	18d3      	adds	r3, r2, r3
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	469f      	mov	pc, r3
			case 0x01:
				//Server requests unprocessed messages stored on an EEPROM chip
				if(!EEPROM_Get_FIFO_Data_Block(*(pCurrentMessage + 1))){
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f7fd ffda 	bl	8000be8 <EEPROM_Get_FIFO_Data_Block>
 8002c34:	1e03      	subs	r3, r0, #0
 8002c36:	d000      	beq.n	8002c3a <Process_Global_Message_Queue+0x36>
 8002c38:	e11a      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
					//There are not unprocessed messages stored on the specified chip - Lets server know
					label_message_type(0x00, 0x02, message_block_internal); //Label message type
 8002c3a:	4b93      	ldr	r3, [pc, #588]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002c3c:	001a      	movs	r2, r3
 8002c3e:	2102      	movs	r1, #2
 8002c40:	2000      	movs	r0, #0
 8002c42:	f7ff ff59 	bl	8002af8 <label_message_type>
					label_message_type(0x01, *(pCurrentMessage + 1), message_block_internal); //Add the requested chip address
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	4a8e      	ldr	r2, [pc, #568]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002c4e:	0019      	movs	r1, r3
 8002c50:	2001      	movs	r0, #1
 8002c52:	f7ff ff51 	bl	8002af8 <label_message_type>
					internal_message_queue_add(message_block_internal); //Add this message to queue
 8002c56:	4b8c      	ldr	r3, [pc, #560]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f7fe fe33 	bl	80018c4 <internal_message_queue_add>
				}
				break;
 8002c5e:	e107      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 0x02:
				//No unprocessed data on chip message to be sent to server
				Usart2_Copy_Into_TX_Buffer(pCurrentMessage); //Copies message data into UART TX Buffer
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	0018      	movs	r0, r3
 8002c64:	f7ff fc40 	bl	80024e8 <Usart2_Copy_Into_TX_Buffer>
				USART2_Send_Data(MESSAGE_BLOCK_BYTES); //UART Sends data to server
 8002c68:	200e      	movs	r0, #14
 8002c6a:	f7ff fc6b 	bl	8002544 <USART2_Send_Data>
				break;
 8002c6e:	e0ff      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 0x03:
				//EEPROM message block to be sent to server
				Usart2_Copy_Into_TX_Buffer(pCurrentMessage); //Copies message data into UART TX Buffer
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	0018      	movs	r0, r3
 8002c74:	f7ff fc38 	bl	80024e8 <Usart2_Copy_Into_TX_Buffer>
				USART2_Send_Data(MESSAGE_BLOCK_BYTES); //UART Sends data to server
 8002c78:	200e      	movs	r0, #14
 8002c7a:	f7ff fc63 	bl	8002544 <USART2_Send_Data>
				break;
 8002c7e:	e0f7      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 0x04:
				//EEPROM chip serial number message to be sent to server
				Usart2_Copy_Into_TX_Buffer(pCurrentMessage); //Copies message data into UART TX Buffer
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	0018      	movs	r0, r3
 8002c84:	f7ff fc30 	bl	80024e8 <Usart2_Copy_Into_TX_Buffer>
				USART2_Send_Data(MESSAGE_BLOCK_BYTES); //UART Sends data to server
 8002c88:	200e      	movs	r0, #14
 8002c8a:	f7ff fc5b 	bl	8002544 <USART2_Send_Data>
				break;
 8002c8e:	e0ef      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 0x05:
				//Message includes RTC update message confirmation to be sent to server
				Usart2_Copy_Into_TX_Buffer(pCurrentMessage); //Copies message data into UART TX Buffer
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	0018      	movs	r0, r3
 8002c94:	f7ff fc28 	bl	80024e8 <Usart2_Copy_Into_TX_Buffer>
				USART2_Send_Data(MESSAGE_BLOCK_BYTES); //UART Sends data to server
 8002c98:	200e      	movs	r0, #14
 8002c9a:	f7ff fc53 	bl	8002544 <USART2_Send_Data>
				break;
 8002c9e:	e0e7      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 0x06:
				//Message includes EEPROM chip serial number to be sent to server
				Usart2_Copy_Into_TX_Buffer(pCurrentMessage); //Copies message data into UART TX Buffer
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f7ff fc20 	bl	80024e8 <Usart2_Copy_Into_TX_Buffer>
				USART2_Send_Data(MESSAGE_BLOCK_BYTES); //UART Sends data to server
 8002ca8:	200e      	movs	r0, #14
 8002caa:	f7ff fc4b 	bl	8002544 <USART2_Send_Data>
				break;
 8002cae:	e0df      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 0x07:
				//Message includes notification that sampling period set request was received to be sent to server
				Usart2_Copy_Into_TX_Buffer(pCurrentMessage); //Copies message data into UART TX Buffer
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f7ff fc18 	bl	80024e8 <Usart2_Copy_Into_TX_Buffer>
				USART2_Send_Data(MESSAGE_BLOCK_BYTES); //UART Sends data to server
 8002cb8:	200e      	movs	r0, #14
 8002cba:	f7ff fc43 	bl	8002544 <USART2_Send_Data>
				break;
 8002cbe:	e0d7      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 0x08:
				//Message includes notification that sampling period set request was received to be sent to server
				Usart2_Copy_Into_TX_Buffer(pCurrentMessage); //Copies message data into UART TX Buffer
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f7ff fc10 	bl	80024e8 <Usart2_Copy_Into_TX_Buffer>
				USART2_Send_Data(MESSAGE_BLOCK_BYTES); //UART Sends data to server
 8002cc8:	200e      	movs	r0, #14
 8002cca:	f7ff fc3b 	bl	8002544 <USART2_Send_Data>
				break;
 8002cce:	e0cf      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 'a':
				//Message includes sensor data to be sent to server
				Usart2_Copy_Into_TX_Buffer(pCurrentMessage); //Copies message data into UART TX Buffer
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f7ff fc08 	bl	80024e8 <Usart2_Copy_Into_TX_Buffer>
				USART2_Send_Data(MESSAGE_BLOCK_BYTES); //UART Sends data to server
 8002cd8:	200e      	movs	r0, #14
 8002cda:	f7ff fc33 	bl	8002544 <USART2_Send_Data>
				break;
 8002cde:	e0c7      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 'b':
				//Clock data from server - Set RTC clock (time then date)
				RTC_Set_Date_Time(pCurrentMessage);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f7fe fee2 	bl	8001aac <RTC_Set_Date_Time>
				label_message_type(0x00, 0x05, message_block_internal);
 8002ce8:	4b67      	ldr	r3, [pc, #412]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002cea:	001a      	movs	r2, r3
 8002cec:	2105      	movs	r1, #5
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f7ff ff02 	bl	8002af8 <label_message_type>
				internal_message_queue_add(message_block_internal); //Add this message to queue
 8002cf4:	4b64      	ldr	r3, [pc, #400]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f7fe fde4 	bl	80018c4 <internal_message_queue_add>
				break;
 8002cfc:	e0b8      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 'c':
				//Server requests RTC clock data (c and all zeros) - Generate new message to be sent to server
				RTC_Read_Date_Time(message_block_internal); //Updates date and time on message_block
 8002cfe:	4b62      	ldr	r3, [pc, #392]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002d00:	0018      	movs	r0, r3
 8002d02:	f7fe ff45 	bl	8001b90 <RTC_Read_Date_Time>
				label_message_type(0x00, 'd', message_block_internal);
 8002d06:	4b60      	ldr	r3, [pc, #384]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002d08:	001a      	movs	r2, r3
 8002d0a:	2164      	movs	r1, #100	; 0x64
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7ff fef3 	bl	8002af8 <label_message_type>
				internal_message_queue_add(message_block_internal); //Add this message to queue
 8002d12:	4b5d      	ldr	r3, [pc, #372]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002d14:	0018      	movs	r0, r3
 8002d16:	f7fe fdd5 	bl	80018c4 <internal_message_queue_add>
				break;
 8002d1a:	e0a9      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 'd':
				//RTC time and date message to be sent to server
				Usart2_Copy_Into_TX_Buffer(pCurrentMessage); //Copies message data into UART TX Buffer
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f7ff fbe2 	bl	80024e8 <Usart2_Copy_Into_TX_Buffer>
				USART2_Send_Data(MESSAGE_BLOCK_BYTES); //UART Sends data to server
 8002d24:	200e      	movs	r0, #14
 8002d26:	f7ff fc0d 	bl	8002544 <USART2_Send_Data>
				break;
 8002d2a:	e0a1      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 'e':
				//Server requests device component information
				get_mcu_serial((message_block_internal + 1));
 8002d2c:	4b57      	ldr	r3, [pc, #348]	; (8002e8c <Process_Global_Message_Queue+0x288>)
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f7ff fe84 	bl	8002a3c <get_mcu_serial>
				label_message_type(0x00, 'f', message_block_internal);
 8002d34:	4b54      	ldr	r3, [pc, #336]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002d36:	001a      	movs	r2, r3
 8002d38:	2166      	movs	r1, #102	; 0x66
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	f7ff fedc 	bl	8002af8 <label_message_type>
				internal_message_queue_add(message_block_internal); //Add this message to queue
 8002d40:	4b51      	ldr	r3, [pc, #324]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002d42:	0018      	movs	r0, r3
 8002d44:	f7fe fdbe 	bl	80018c4 <internal_message_queue_add>
				EEPROM_Get_Serial_Number(EEPROM_CHIP1_ADDRESS); //Message automatically added to the EEPROM receive queue
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f7fd fe5f 	bl	8000a0c <EEPROM_Get_Serial_Number>
				EEPROM_Get_Serial_Number(EEPROM_CHIP2_ADDRESS); //Message automatically added to the EEPROM receive queue
 8002d4e:	2002      	movs	r0, #2
 8002d50:	f7fd fe5c 	bl	8000a0c <EEPROM_Get_Serial_Number>
				break;
 8002d54:	e08c      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 'f':
				//Message includes device serial information to be sent to server
				Usart2_Copy_Into_TX_Buffer(pCurrentMessage); //Copies message data into UART TX Buffer
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f7ff fbc5 	bl	80024e8 <Usart2_Copy_Into_TX_Buffer>
				USART2_Send_Data(MESSAGE_BLOCK_BYTES); //UART Sends data to server
 8002d5e:	200e      	movs	r0, #14
 8002d60:	f7ff fbf0 	bl	8002544 <USART2_Send_Data>
				break;
 8002d64:	e084      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 'g':
				//Server sets the RTC_AlarmA_Period
				RTC_AlarmA_Set_Period(pCurrentMessage, &RTC_Alarm_Unit_Status);
 8002d66:	4a4a      	ldr	r2, [pc, #296]	; (8002e90 <Process_Global_Message_Queue+0x28c>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	0011      	movs	r1, r2
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f7ff f983 	bl	8002078 <RTC_AlarmA_Set_Period>
				label_message_type(0x00, 0x07, message_block_internal);
 8002d72:	4b45      	ldr	r3, [pc, #276]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002d74:	001a      	movs	r2, r3
 8002d76:	2107      	movs	r1, #7
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f7ff febd 	bl	8002af8 <label_message_type>
				internal_message_queue_add(message_block_internal); //Add this message to queue
 8002d7e:	4b42      	ldr	r3, [pc, #264]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002d80:	0018      	movs	r0, r3
 8002d82:	f7fe fd9f 	bl	80018c4 <internal_message_queue_add>
				break;
 8002d86:	e073      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 'h':
				//Server requests Alarm A sampling period
				RTC_Get_AlarmA_Period(message_block_internal);
 8002d88:	4b3f      	ldr	r3, [pc, #252]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f7ff f928 	bl	8001fe0 <RTC_Get_AlarmA_Period>
				label_message_type(0x00, 'i', message_block_internal);
 8002d90:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002d92:	001a      	movs	r2, r3
 8002d94:	2169      	movs	r1, #105	; 0x69
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7ff feae 	bl	8002af8 <label_message_type>
				internal_message_queue_add(message_block_internal); //Add this message to queue
 8002d9c:	4b3a      	ldr	r3, [pc, #232]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f7fe fd90 	bl	80018c4 <internal_message_queue_add>
				break;
 8002da4:	e064      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 'i':
				//Message includes Alarm A sampling period to be sent to server
				Usart2_Copy_Into_TX_Buffer(pCurrentMessage); //Copies message data into UART TX Buffer
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7ff fb9d 	bl	80024e8 <Usart2_Copy_Into_TX_Buffer>
				USART2_Send_Data(MESSAGE_BLOCK_BYTES); //UART Sends data to server
 8002dae:	200e      	movs	r0, #14
 8002db0:	f7ff fbc8 	bl	8002544 <USART2_Send_Data>
				break;
 8002db4:	e05c      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 'j':
				//Server wants to set the first alarm for Alarm A - The sampling period must be set first
				if (RTC_AlarmA_Period_Is_Set(device_status)){
 8002db6:	4b37      	ldr	r3, [pc, #220]	; (8002e94 <Process_Global_Message_Queue+0x290>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f7fe ff4c 	bl	8001c58 <RTC_AlarmA_Period_Is_Set>
 8002dc0:	1e03      	subs	r3, r0, #0
 8002dc2:	d00e      	beq.n	8002de2 <Process_Global_Message_Queue+0x1de>
					//Set the first Alarm A
					RTC_AlarmA_Set_First_Alarm(pCurrentMessage);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f7fe ffd0 	bl	8001d6c <RTC_AlarmA_Set_First_Alarm>
					label_message_type(0x00, 0x08, message_block_internal);
 8002dcc:	4b2e      	ldr	r3, [pc, #184]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002dce:	001a      	movs	r2, r3
 8002dd0:	2108      	movs	r1, #8
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f7ff fe90 	bl	8002af8 <label_message_type>
					internal_message_queue_add(message_block_internal); //Add this message to queue
 8002dd8:	4b2b      	ldr	r3, [pc, #172]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f7fe fd72 	bl	80018c4 <internal_message_queue_add>
 8002de0:	e046      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
				} else {
					//Notify server that sampling period has not been set
					label_message_type(0x00, 'k', message_block_internal);
 8002de2:	4b29      	ldr	r3, [pc, #164]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002de4:	001a      	movs	r2, r3
 8002de6:	216b      	movs	r1, #107	; 0x6b
 8002de8:	2000      	movs	r0, #0
 8002dea:	f7ff fe85 	bl	8002af8 <label_message_type>
					internal_message_queue_add(message_block_internal); //Add this message to queue
 8002dee:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002df0:	0018      	movs	r0, r3
 8002df2:	f7fe fd67 	bl	80018c4 <internal_message_queue_add>
				}
				break;
 8002df6:	e03b      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 'k':
				//Message includes server notification that sampling period has not been set
				Usart2_Copy_Into_TX_Buffer(pCurrentMessage); //Copies message data into UART TX Buffer
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f7ff fb74 	bl	80024e8 <Usart2_Copy_Into_TX_Buffer>
				USART2_Send_Data(MESSAGE_BLOCK_BYTES); //UART Sends data to server
 8002e00:	200e      	movs	r0, #14
 8002e02:	f7ff fb9f 	bl	8002544 <USART2_Send_Data>
				break;
 8002e06:	e033      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 'l':
				//Server requests current Alarm A
				RTC_Get_AlarmA_Current(message_block_internal);
 8002e08:	4b1f      	ldr	r3, [pc, #124]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f7ff f90e 	bl	800202c <RTC_Get_AlarmA_Current>
				label_message_type(0x00, 'm', message_block_internal);
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002e12:	001a      	movs	r2, r3
 8002e14:	216d      	movs	r1, #109	; 0x6d
 8002e16:	2000      	movs	r0, #0
 8002e18:	f7ff fe6e 	bl	8002af8 <label_message_type>
				internal_message_queue_add(message_block_internal); //Add this message to queue
 8002e1c:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f7fe fd50 	bl	80018c4 <internal_message_queue_add>
				break;
 8002e24:	e024      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 'm':
				//Message includes current Alarm A time to be sent to server
				Usart2_Copy_Into_TX_Buffer(pCurrentMessage); //Copies message data into UART TX Buffer
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f7ff fb5d 	bl	80024e8 <Usart2_Copy_Into_TX_Buffer>
				USART2_Send_Data(MESSAGE_BLOCK_BYTES); //UART Sends data to server
 8002e2e:	200e      	movs	r0, #14
 8002e30:	f7ff fb88 	bl	8002544 <USART2_Send_Data>
				break;
 8002e34:	e01c      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 'n':
				//Server requests that Alarm A be disabled (Stop sampling)
				RTC_AlarmA_Disable();
 8002e36:	f7fe ff1f 	bl	8001c78 <RTC_AlarmA_Disable>
				break;
 8002e3a:	e019      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 'o':
				//Server requests ping response
				label_message_type(0x00, 'p', message_block_internal);
 8002e3c:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002e3e:	001a      	movs	r2, r3
 8002e40:	2170      	movs	r1, #112	; 0x70
 8002e42:	2000      	movs	r0, #0
 8002e44:	f7ff fe58 	bl	8002af8 <label_message_type>
				internal_message_queue_add(message_block_internal); //Add this message to queue
 8002e48:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <Process_Global_Message_Queue+0x284>)
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f7fe fd3a 	bl	80018c4 <internal_message_queue_add>
				break;
 8002e50:	e00e      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			case 'p':
				//Message includes ping response to be sent to server
				Usart2_Copy_Into_TX_Buffer(pCurrentMessage); //Copies message data into UART TX Buffer
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	0018      	movs	r0, r3
 8002e56:	f7ff fb47 	bl	80024e8 <Usart2_Copy_Into_TX_Buffer>
				USART2_Send_Data(MESSAGE_BLOCK_BYTES); //UART Sends data to server
 8002e5a:	200e      	movs	r0, #14
 8002e5c:	f7ff fb72 	bl	8002544 <USART2_Send_Data>
				break;
 8002e60:	e006      	b.n	8002e70 <Process_Global_Message_Queue+0x26c>
			default:
				//Unknown message detected
				device_status |= BIT8;
 8002e62:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <Process_Global_Message_Queue+0x290>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2280      	movs	r2, #128	; 0x80
 8002e68:	0052      	lsls	r2, r2, #1
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <Process_Global_Message_Queue+0x290>)
 8002e6e:	601a      	str	r2, [r3, #0]
	while(!global_message_queue_is_empty()){
 8002e70:	f7fe fb54 	bl	800151c <global_message_queue_is_empty>
 8002e74:	1e03      	subs	r3, r0, #0
 8002e76:	d100      	bne.n	8002e7a <Process_Global_Message_Queue+0x276>
 8002e78:	e6c8      	b.n	8002c0c <Process_Global_Message_Queue+0x8>
		}
	}
}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	46c0      	nop			; (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b002      	add	sp, #8
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	08002fe4 	.word	0x08002fe4
 8002e88:	20000668 	.word	0x20000668
 8002e8c:	20000669 	.word	0x20000669
 8002e90:	2000062f 	.word	0x2000062f
 8002e94:	20000678 	.word	0x20000678

08002e98 <PendSV_Handler>:

void PendSV_Handler(){
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
	PendSv_Clear(); //Clear PendSV interrupt
 8002e9c:	f7fe fab4 	bl	8001408 <PendSv_Clear>
	global_message_queue_combine(); //Combine messages into global message queue
 8002ea0:	f7fe faf8 	bl	8001494 <global_message_queue_combine>
	Process_Global_Message_Queue(); //Process the messages in global queue
 8002ea4:	f7ff feae 	bl	8002c04 <Process_Global_Message_Queue>
}
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <AES_RNG_LPUART1_IRQHandler>:

void AES_RNG_LPUART1_IRQHandler(){
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	af00      	add	r7, sp, #0
	Clear_Pending_AES_RNG_LPUART1_Interrupt();
 8002eb2:	f7fe fa9b 	bl	80013ec <Clear_Pending_AES_RNG_LPUART1_Interrupt>
	global_message_queue_combine(); //Combine messages into global message queue
 8002eb6:	f7fe faed 	bl	8001494 <global_message_queue_combine>
	Process_Global_Message_Queue(); //Process the messages in global queue
 8002eba:	f7ff fea3 	bl	8002c04 <Process_Global_Message_Queue>
}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <RTC_IRQHandler>:

//Is only ever using Alarm A
void RTC_IRQHandler(){
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
	//Clear the EXTI pending interrupt register
	EXTI_PR |= BIT17;
 8002ec8:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <RTC_IRQHandler+0x58>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <RTC_IRQHandler+0x58>)
 8002ece:	2180      	movs	r1, #128	; 0x80
 8002ed0:	0289      	lsls	r1, r1, #10
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]

	//This flag is set by hardware when the time/date registers (RTC_TR and RTC_DR) match the Alarm A register (RTC_ALRMAR).
	//The bits ALRAF, ALRBF, WUTF and TSF are cleared 2 APB clock cycles after programming them to 0.
	RTC_ISR &= ~BIT8; //Bit 8 ALRAF: Alarm A flag, This flag is cleared by software by writing 0.
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <RTC_IRQHandler+0x5c>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <RTC_IRQHandler+0x5c>)
 8002edc:	4911      	ldr	r1, [pc, #68]	; (8002f24 <RTC_IRQHandler+0x60>)
 8002ede:	400a      	ands	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]

	//Collect date and time data (time-stamp)
	RTC_Read_Date_Time(message_block_sensor); //Updates message_block array (global) with date and time
 8002ee2:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <RTC_IRQHandler+0x64>)
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f7fe fe53 	bl	8001b90 <RTC_Read_Date_Time>

	//Collect Sensor data
	Get_Data_From_Sensors(message_block_sensor); //Updates message_block_sensor array (global) with sensor data
 8002eea:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <RTC_IRQHandler+0x64>)
 8002eec:	0018      	movs	r0, r3
 8002eee:	f7ff fe19 	bl	8002b24 <Get_Data_From_Sensors>

	//Label message type
	label_message_type(0x00, 'a', message_block_sensor);
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <RTC_IRQHandler+0x64>)
 8002ef4:	001a      	movs	r2, r3
 8002ef6:	2161      	movs	r1, #97	; 0x61
 8002ef8:	2000      	movs	r0, #0
 8002efa:	f7ff fdfd 	bl	8002af8 <label_message_type>

	//Add message to queue to store the data on server or EEPROM
	sensor_message_queue_add(message_block_sensor);
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <RTC_IRQHandler+0x64>)
 8002f00:	0018      	movs	r0, r3
 8002f02:	f7fe fc47 	bl	8001794 <sensor_message_queue_add>

	//Set new alarm - increment old alarm time RTC_AlarmA_Period (seconds)
	RTC_Increment_AlarmA(RTC_AlarmA_Period);
 8002f06:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <RTC_IRQHandler+0x68>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f7ff f906 	bl	800211c <RTC_Increment_AlarmA>

	//Enable PendSV interrupt
	Set_Pending_AES_RNG_LPUART1_Interrupt(); //Set PendSV interrupt to process message queues
 8002f10:	f7fe fa5e 	bl	80013d0 <Set_Pending_AES_RNG_LPUART1_Interrupt>
}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	40010414 	.word	0x40010414
 8002f20:	4000280c 	.word	0x4000280c
 8002f24:	fffffeff 	.word	0xfffffeff
 8002f28:	20000658 	.word	0x20000658
 8002f2c:	20000630 	.word	0x20000630

08002f30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f30:	480d      	ldr	r0, [pc, #52]	; (8002f68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f34:	e000      	b.n	8002f38 <Reset_Handler+0x8>
 8002f36:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f38:	480c      	ldr	r0, [pc, #48]	; (8002f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8002f3a:	490d      	ldr	r1, [pc, #52]	; (8002f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f3c:	4a0d      	ldr	r2, [pc, #52]	; (8002f74 <LoopForever+0xe>)
  movs r3, #0
 8002f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f40:	e002      	b.n	8002f48 <LoopCopyDataInit>

08002f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f46:	3304      	adds	r3, #4

08002f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f4c:	d3f9      	bcc.n	8002f42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f4e:	4a0a      	ldr	r2, [pc, #40]	; (8002f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f50:	4c0a      	ldr	r4, [pc, #40]	; (8002f7c <LoopForever+0x16>)
  movs r3, #0
 8002f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f54:	e001      	b.n	8002f5a <LoopFillZerobss>

08002f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f58:	3204      	adds	r2, #4

08002f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f5c:	d3fb      	bcc.n	8002f56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f5e:	f000 f811 	bl	8002f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f62:	f7ff fd03 	bl	800296c <main>

08002f66 <LoopForever>:

LoopForever:
  b LoopForever
 8002f66:	e7fe      	b.n	8002f66 <LoopForever>
  ldr   r0, =_estack
 8002f68:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f70:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8002f74:	080031b0 	.word	0x080031b0
  ldr r2, =_sbss
 8002f78:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8002f7c:	2000067c 	.word	0x2000067c

08002f80 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f80:	e7fe      	b.n	8002f80 <ADC_COMP_IRQHandler>
	...

08002f84 <__libc_init_array>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	2600      	movs	r6, #0
 8002f88:	4c0c      	ldr	r4, [pc, #48]	; (8002fbc <__libc_init_array+0x38>)
 8002f8a:	4d0d      	ldr	r5, [pc, #52]	; (8002fc0 <__libc_init_array+0x3c>)
 8002f8c:	1b64      	subs	r4, r4, r5
 8002f8e:	10a4      	asrs	r4, r4, #2
 8002f90:	42a6      	cmp	r6, r4
 8002f92:	d109      	bne.n	8002fa8 <__libc_init_array+0x24>
 8002f94:	2600      	movs	r6, #0
 8002f96:	f000 f819 	bl	8002fcc <_init>
 8002f9a:	4c0a      	ldr	r4, [pc, #40]	; (8002fc4 <__libc_init_array+0x40>)
 8002f9c:	4d0a      	ldr	r5, [pc, #40]	; (8002fc8 <__libc_init_array+0x44>)
 8002f9e:	1b64      	subs	r4, r4, r5
 8002fa0:	10a4      	asrs	r4, r4, #2
 8002fa2:	42a6      	cmp	r6, r4
 8002fa4:	d105      	bne.n	8002fb2 <__libc_init_array+0x2e>
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
 8002fa8:	00b3      	lsls	r3, r6, #2
 8002faa:	58eb      	ldr	r3, [r5, r3]
 8002fac:	4798      	blx	r3
 8002fae:	3601      	adds	r6, #1
 8002fb0:	e7ee      	b.n	8002f90 <__libc_init_array+0xc>
 8002fb2:	00b3      	lsls	r3, r6, #2
 8002fb4:	58eb      	ldr	r3, [r5, r3]
 8002fb6:	4798      	blx	r3
 8002fb8:	3601      	adds	r6, #1
 8002fba:	e7f2      	b.n	8002fa2 <__libc_init_array+0x1e>
 8002fbc:	080031a8 	.word	0x080031a8
 8002fc0:	080031a8 	.word	0x080031a8
 8002fc4:	080031ac 	.word	0x080031ac
 8002fc8:	080031a8 	.word	0x080031a8

08002fcc <_init>:
 8002fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd2:	bc08      	pop	{r3}
 8002fd4:	469e      	mov	lr, r3
 8002fd6:	4770      	bx	lr

08002fd8 <_fini>:
 8002fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fde:	bc08      	pop	{r3}
 8002fe0:	469e      	mov	lr, r3
 8002fe2:	4770      	bx	lr
